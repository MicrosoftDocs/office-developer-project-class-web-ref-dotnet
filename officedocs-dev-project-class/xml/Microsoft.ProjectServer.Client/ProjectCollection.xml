<Type Name="ProjectCollection" FullName="Microsoft.ProjectServer.Client.ProjectCollection">
  <TypeSignature Language="C#" Value="public class ProjectCollection : Microsoft.SharePoint.Client.ClientObjectCollection&lt;Microsoft.ProjectServer.Client.PublishedProject&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProjectCollection extends Microsoft.SharePoint.Client.ClientObjectCollection`1&lt;class Microsoft.ProjectServer.Client.PublishedProject&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ProjectServer.Client.ProjectCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class ProjectCollection&#xA;Inherits ClientObjectCollection(Of PublishedProject)" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProjectCollection : Microsoft::SharePoint::Client::ClientObjectCollection&lt;Microsoft::ProjectServer::Client::PublishedProject ^&gt;" />
  <TypeSignature Language="F#" Value="type ProjectCollection = class&#xA;    inherit ClientObjectCollection&lt;PublishedProject&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.SharePoint.Client.ClientObjectCollection&lt;Microsoft.ProjectServer.Client.PublishedProject&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">Microsoft.ProjectServer.Client.PublishedProject</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.SharePoint.Client.ScriptType("PS.ProjectCollection", ServerTypeId="{8d842010-5471-4748-ab8a-ed6df0494f3d}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a collection of <see cref="T:Microsoft.ProjectServer.Client.PublishedProject" /> objects.</summary>
    <remarks>
      <para>To check out a published project for editing, use the <see cref="P:Microsoft.ProjectServer.Client.PublishedProject.CheckOut" /> method.</para>
      <para>Project Server creates a virtual <b>PublishedProject</b> object for each draft project that has not yet been published. A virtual published project ensures that a draft project can be retrieved through the <b>ProjectCollection</b> object, whether it has been published or not. A retrieved project gets properties from the draft tables in the Project database.</para>
      <para>For example, if you create a draft project with the PSI, and then read all projects with the CSOM, the <b>ProjectCollection</b> object contains the unpublished draft project. You can determine whether a project has been published by the value of the <b>PublishedProject.LastPublishedDate</b> property, which is inherited from <see cref="P:Microsoft.ProjectServer.Client.Project.LastPublishedDate" />. For an unpublished project, the <b>LastPublishedDate</b> property value is <b>DateTime.Min</b> (1/1/0001). The following CSOM code fragment creates a draft project but does not persist or publish it.</para>
      <code>ProjectContext projContext = new ProjectContext("http://ServerName/pwa");
ProjectCreationInformation newProj = new ProjectCreationInformation();

newProj.Id = Guid.NewGuid();
newProj.Name = "Test project not published";
newProj.Start = DateTime.Today.Date;

PublishedProject newPublishedProj = projContext.Projects.Add(newProj);

projContext.Load(newPublishedProj);
projContext.ExecuteQuery();

DateTime pubDate = newPublishedProj.LastPublishedDate;
Console.Write("\n\tLastPublishedDate before publishing: {0}", pubDate.ToString());</code>
      <para />
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProjectCollection (Microsoft.SharePoint.Client.ClientRuntimeContext context, Microsoft.SharePoint.Client.ObjectPath objectPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.SharePoint.Client.ClientRuntimeContext context, class Microsoft.SharePoint.Client.ObjectPath objectPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ProjectServer.Client.ProjectCollection.#ctor(Microsoft.SharePoint.Client.ClientRuntimeContext,Microsoft.SharePoint.Client.ObjectPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProjectCollection(Microsoft::SharePoint::Client::ClientRuntimeContext ^ context, Microsoft::SharePoint::Client::ObjectPath ^ objectPath);" />
      <MemberSignature Language="F#" Value="new Microsoft.ProjectServer.Client.ProjectCollection : Microsoft.SharePoint.Client.ClientRuntimeContext * Microsoft.SharePoint.Client.ObjectPath -&gt; Microsoft.ProjectServer.Client.ProjectCollection" Usage="new Microsoft.ProjectServer.Client.ProjectCollection (context, objectPath)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.SharePoint.Client.ClientRuntimeContext" />
        <Parameter Name="objectPath" Type="Microsoft.SharePoint.Client.ObjectPath" />
      </Parameters>
      <Docs>
        <param name="context">The client run-time context for using remote objects.</param>
        <param name="objectPath">The path of the object in the client context.</param>
        <summary>Creates an instance of the <b>ProjectCollection</b> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.PublishedProject Add (Microsoft.ProjectServer.Client.ProjectCreationInformation parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ProjectServer.Client.PublishedProject Add(class Microsoft.ProjectServer.Client.ProjectCreationInformation parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ProjectServer.Client.ProjectCollection.Add(Microsoft.ProjectServer.Client.ProjectCreationInformation)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (parameters As ProjectCreationInformation) As PublishedProject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::ProjectServer::Client::PublishedProject ^ Add(Microsoft::ProjectServer::Client::ProjectCreationInformation ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Add : Microsoft.ProjectServer.Client.ProjectCreationInformation -&gt; Microsoft.ProjectServer.Client.PublishedProject" Usage="projectCollection.Add parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.SharePoint.Client.Remote</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.PublishedProject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.ProjectServer.Client.ProjectCreationInformation" />
      </Parameters>
      <Docs>
        <param name="parameters">The properties of the project to create.</param>
        <summary>Adds the project that is specified by the <see cref="T:Microsoft.ProjectServer.Client.ProjectCreationInformation" /> object to the collection.</summary>
        <returns>The project.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByGuid">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.PublishedProject GetByGuid (Guid uid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ProjectServer.Client.PublishedProject GetByGuid(valuetype System.Guid uid) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ProjectServer.Client.ProjectCollection.GetByGuid(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByGuid (uid As Guid) As PublishedProject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::ProjectServer::Client::PublishedProject ^ GetByGuid(Guid uid);" />
      <MemberSignature Language="F#" Value="member this.GetByGuid : Guid -&gt; Microsoft.ProjectServer.Client.PublishedProject" Usage="projectCollection.GetByGuid uid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.SharePoint.Client.Remote</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.PublishedProject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="uid">A GUID value.</param>
        <summary>Gets a project from the collection with the specified GUID.</summary>
        <returns>A published project.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetById">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.PublishedProject GetById (string objectId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ProjectServer.Client.PublishedProject GetById(string objectId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ProjectServer.Client.ProjectCollection.GetById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetById (objectId As String) As PublishedProject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::ProjectServer::Client::PublishedProject ^ GetById(System::String ^ objectId);" />
      <MemberSignature Language="F#" Value="member this.GetById : string -&gt; Microsoft.ProjectServer.Client.PublishedProject" Usage="projectCollection.GetById objectId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.SharePoint.Client.Remote</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.PublishedProject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="objectId">The string representation of the project GUID.</param>
        <summary>Gets a project from the collection with the <see cref="P:Microsoft.ProjectServer.Client.Project.Id" /> value.</summary>
        <returns>A published project.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public Microsoft.SharePoint.Client.ClientResult&lt;bool&gt; Remove (Microsoft.ProjectServer.Client.PublishedProject project);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.SharePoint.Client.ClientResult`1&lt;bool&gt; Remove(class Microsoft.ProjectServer.Client.PublishedProject project) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ProjectServer.Client.ProjectCollection.Remove(Microsoft.ProjectServer.Client.PublishedProject)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (project As PublishedProject) As ClientResult(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::SharePoint::Client::ClientResult&lt;bool&gt; ^ Remove(Microsoft::ProjectServer::Client::PublishedProject ^ project);" />
      <MemberSignature Language="F#" Value="member this.Remove : Microsoft.ProjectServer.Client.PublishedProject -&gt; Microsoft.SharePoint.Client.ClientResult&lt;bool&gt;" Usage="projectCollection.Remove project" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.SharePoint.Client.Remote</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.SharePoint.Client.ClientResult&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="Microsoft.ProjectServer.Client.PublishedProject" />
      </Parameters>
      <Docs>
        <param name="project">The project to remove.</param>
        <summary>Removes the specified project from the collection.</summary>
        <returns>
          <b>True</b> if the project was removed; otherwise, <b>False</b>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.QueueJob Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ProjectServer.Client.QueueJob Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ProjectServer.Client.ProjectCollection.Update" />
      <MemberSignature Language="VB.NET" Value="Public Function Update () As QueueJob" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::ProjectServer::Client::QueueJob ^ Update();" />
      <MemberSignature Language="F#" Value="member this.Update : unit -&gt; Microsoft.ProjectServer.Client.QueueJob" Usage="projectCollection.Update " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.SharePoint.Client.Remote</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.QueueJob</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Updates the collection of published projects.</summary>
        <returns>A queued job.</returns>
        <remarks>To be added.</remarks>
        <example>
          <para>The following example gets a <b>ProjectCollection</b> object where a project name is specified, checks out the project, adds a task, and then publishes and checks the project back in. Because project names are unique, the <b>ProjectCollection</b> object can contain only one project.</para>
          <code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ProjectServer.Client;

namespace AddTaskToProject
{
    class Program
    {
        private const string pwaPath = "http://ServerName/pwa/"; // Change the path to Project Web App.
        private static string projName = string.Empty;
        private static string taskName = string.Empty;
        private static int timeoutSeconds = 10;  // The maximum wait time for a queue job, in seconds.

        private static ProjectContext projContext;

        static void Main(string[] args)
        {
            if (!ParseCommandLine(args))
            {
                Usage();
                ExitApp();
            }

            projContext = new ProjectContext(pwaPath);

            Console.Write("Editing project: '{0}'; adding task: '{1}' . . .", projName, taskName);

            var projCollection = projContext.LoadQuery(
                projContext.Projects
                    .Where(p =&amp;gt; p.Name == projName));

            projContext.ExecuteQuery();

            if (projCollection.Count() &amp;gt; 0)
            {
                PublishedProject proj2Edit = projCollection.First();

                DraftProject projCheckedOut = proj2Edit.CheckOut();

                // Create a task.
                TaskCreationInformation newTask = new TaskCreationInformation();
                newTask.Name = taskName;
                newTask.IsManual = false;
                newTask.Duration = "3d";
                newTask.Start = DateTime.Today;

                // Add the task to the checked out project.
                projCheckedOut.Tasks.Add(newTask);
                projCheckedOut.Publish(true);

                // Update the published projects collection.
                QueueJob qJob = projContext.Projects.&lt;span class="label"&gt;Update&lt;/span&gt;();
                JobState jobState = projContext.WaitForQueue(qJob, timeoutSeconds);

                if (jobState == JobState.Success)
                {
                    Console.WriteLine("\nSuccess!");
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.WriteLine("\nThere is a problem in the queue. Timeout is {0} seconds.",
                        timeoutSeconds);
                    Console.WriteLine("\tQueue JobState: {0}", jobState.ToString());
                    Console.ResetColor();
                }
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("\nNo project with the name '{0}'", projName);
                Console.ResetColor();
            }

            ExitApp();
        }

        // Parse the command line. Return true if there are no errors.
        private static bool ParseCommandLine(string[] args)
        {
            bool error = false;
            int argsLen = args.Length;

            try
            {
                for (int i = 0; i &amp;lt; argsLen; i++)
                {
                    if (error) break;
                    if (args[i].StartsWith("-") || args[i].StartsWith("/"))
                        args[i] = "*" + args[i].Substring(1).ToLower();

                    switch (args[i])
                    {
                        case "*projname":
                        case "*p":
                            if (++i &amp;gt;= argsLen) return false;
                            projName = args[i];
                            break;
                        case "*taskname":
                        case "*t":
                            if (++i &amp;gt;= argsLen) return false;
                            taskName = args[i];
                            break;
                        case "*queuetime":
                        case "*q":
                            if (++i &amp;gt;= argsLen) return false;
                            timeoutSeconds = Convert.ToInt32(args[i]);
                            break;
                        case "*?":
                        default:
                            error = true;
                            break;
                    }
                }
            }
            catch (FormatException)
            {
                error = true;
            }

            if (string.IsNullOrEmpty(projName)) error = true;
            return !error;
        }

        private static void Usage()
        {
            string example = "Usage: AddTaskToProject -projName | -p \"Project name\"\n\t\t\t-taskName | -t \"Task name\"\n\t\t\t[-queueTime | -q sec]";
            example += "\n\nExample: AddTaskToProject -p \"TestProj1\" -t \"Task name\"";
            Console.WriteLine(example);
        }

        private static void ExitApp()
        {
            Console.Write("\nPress any key to exit... ");
            Console.ReadKey(true);
            Environment.Exit(0);
        }
    }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Validate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ProjectServer.Client.ProjectCollection.Validate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate();" />
      <MemberSignature Language="F#" Value="member this.Validate : unit -&gt; unit" Usage="projectCollection.Validate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.SharePoint.Client.Remote</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Validates pending changes to the project and all of the entities that it contains without saving them.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>