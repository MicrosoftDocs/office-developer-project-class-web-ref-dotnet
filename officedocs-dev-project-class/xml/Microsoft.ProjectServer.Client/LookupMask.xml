<Type Name="LookupMask" FullName="Microsoft.ProjectServer.Client.LookupMask">
  <TypeSignature Language="C#" Value="public class LookupMask : Microsoft.SharePoint.Client.ClientValueObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LookupMask extends Microsoft.SharePoint.Client.ClientValueObject" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ProjectServer.Client.LookupMask" />
  <TypeSignature Language="VB.NET" Value="Public Class LookupMask&#xA;Inherits ClientValueObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class LookupMask : Microsoft::SharePoint::Client::ClientValueObject" />
  <TypeSignature Language="F#" Value="type LookupMask = class&#xA;    inherit ClientValueObject" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.SharePoint.Client.ClientValueObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.SharePoint.Client.ScriptType("PS.LookupMask", ServerTypeId="{2aeb3d46-6e78-4035-b908-9e0a55f5c56d}", ValueObject=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a mask definition for the levels of a hierarchical lookup table.</summary>
    <remarks>
      <para>All lookup tables must have at least one mask, and only text tables may have more than one mask.</para>
      <para />
    </remarks>
    <example>
      <para>The following code example is a console application that queries the collection of lookup tables in a Project Web App instance and displays information about the code masks and entries for a specified lookup table. The <b>projLutCollection</b> variable is a <b>LookupTableCollection</b> object.</para>
      <code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.ProjectServer.Client;

namespace ReadLookupTable
{
    class Program
    {
        // Change the path for your Project Web App instance.
        private const string PWA_PATH = "http://ServerName/pwa/";    
        private static string lutName = "Department";    // Default lookup table to read.

        // Set the Project Server client context.
        private static ProjectContext projContext;

        static void Main(string[] args)
        {

            if (!ParseCommandLine(args))
            {
                Usage();
                ExitApp();
            }
            projContext = new ProjectContext(PWA_PATH);

            var projLutCollection = projContext.LoadQuery(
                projContext.LookupTables
                    .Where(lut =&amp;gt; lut.Name == lutName));

            projContext.ExecuteQuery();

            if (projLutCollection.Count() &amp;gt; 0)
            {
                foreach (LookupTable lut in projLutCollection)
                {
                    Console.WriteLine("'{0}' lookup table Id: {1}", lut.Name, lut.Id);
                    Console.WriteLine("\tField type: {0}", lut.FieldType);

                    // Get the lookup table mask data:
                    Console.WriteLine("\nNumber of '{0}' lookup table masks: {1}\n", lut.Name, lut.Masks.Count());

                    foreach (LookupMask lutMask in lut.Masks)
                    {
                        Console.WriteLine("\tMaskType: {0}\tLength: {1}\tSeparator: {2}", 
                            lutMask.MaskType, lutMask.Length, lutMask.Separator);
                    }

                    // Get the collection of lookup table entries.
                    projContext.Load(lut.Entries);
                    projContext.ExecuteQuery();

                    Console.WriteLine("\nNumber of '{0}' lookup table entries: {1}", lut.Name, lut.Entries.Count());

                    foreach (LookupEntry lutEntry in lut.Entries)
                    {
                        Console.WriteLine("\n\t{0}, SortIndex: {1}\n\tFullValue: {2}",
                            lutEntry.Id, lutEntry.SortIndex.ToString("F0"), lutEntry.FullValue);
                    }
                }
            }
            else
            {
                Console.WriteLine("No lookup table named '{0}'", lutName);
            }

            ExitApp();   
        }

        private static void ExitApp()
        {
            Console.Write("\nPress any key to exit... ");
            Console.ReadKey(true);
            Environment.Exit(0);
        }

        // Parse the command line. Return true if there are no errors.
        private static bool ParseCommandLine(string[] args)
        {
            bool error = false;
            int argsLen = args.Length;

            try
            {
                for (int i = 0; i &amp;lt; argsLen; i++)
                {
                    if (error) break;
                    if (args[i].StartsWith("-") || args[i].StartsWith("/"))
                        args[i] = "*" + args[i].Substring(1).ToLower();

                    switch (args[i])
                    {
                        case "*lookuptable":
                        case "*lut":
                            if (++i &amp;gt;= argsLen) return false;
                            lutName = args[i];
                            break;
                        case "*?":
                        default:
                            error = true;
                            break;
                    }
                }
            }
            catch (FormatException)
            {
                error = true;
            }
            return !error;
        }

        private static void Usage()
        {
            string example = "Usage: ReadLookupTable [/lookuptable | /lut \"LookupTable Name\"";
            example += "\n\nExample: ReadLookupTable /lut \"Department\"";
            Console.WriteLine(example);
        }
    }
}</code>
      <para>For example, suppose the Department lookup table contains the following code masks and lookup table values:</para>
      <code>Sequence              Length          Separator
_______________________________________________
Characters            Any             .
Uppercase Letters     2               .</code>
      <para> </para>
      <code>
Level              Value
______________________________
1                  Test Dept 1
1                  Test Dept 2
1                  Test Dept C
2                      CA
2                      CB</code>
      <para>Following is the output of the <b>ReadLookupTable</b> application (the GUIDs for your entries would be different).</para>
      <para>
        <b>Note</b>: Because the Department lookup table is built-in, the GUID of the Department lookup table is the same in all Project Web App instances. The GUID is the value of the <b>Microsoft.Office.Project.Server.Library.LookupTables.DEPARTMENTS_LT_UID</b> field.</para>
      <code>'Department' lookup table Id: e7397277-1ab0-4096-b2dd-57029a055ba4
        Field type: TEXT

Number of 'Department' lookup table masks: 2

        MaskType: CHARACTERS    Length: 0       Separator: .
        MaskType: UPPERCASE     Length: 2       Separator: .

Number of 'Department' lookup table entries: 5

        bbc07ff5-b06d-e211-93f4-0021704e28a0, SortIndex: 1
        FullValue: Test Dept 1

        bcc07ff5-b06d-e211-93f4-0021704e28a0, SortIndex: 2
        FullValue: Test Dept 2

        bdc07ff5-b06d-e211-93f4-0021704e28a0, SortIndex: 3
        FullValue: Test Dept C

        0a6ef8d8-6871-e211-93f4-0021704e28a0, SortIndex: 4
        FullValue: Test Dept C.CA

        0b6ef8d8-6871-e211-93f4-0021704e28a0, SortIndex: 5
        FullValue: Test Dept C.CB

Press any key to exit...</code>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LookupMask ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ProjectServer.Client.LookupMask.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LookupMask();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates an instance of the <b>LookupMask</b> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitOnePropertyFromJson">
      <MemberSignature Language="C#" Value="protected override bool InitOnePropertyFromJson (string peekedName, Microsoft.SharePoint.Client.JsonReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool InitOnePropertyFromJson(string peekedName, class Microsoft.SharePoint.Client.JsonReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ProjectServer.Client.LookupMask.InitOnePropertyFromJson(System.String,Microsoft.SharePoint.Client.JsonReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function InitOnePropertyFromJson (peekedName As String, reader As JsonReader) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool InitOnePropertyFromJson(System::String ^ peekedName, Microsoft::SharePoint::Client::JsonReader ^ reader);" />
      <MemberSignature Language="F#" Value="override this.InitOnePropertyFromJson : string * Microsoft.SharePoint.Client.JsonReader -&gt; bool" Usage="lookupMask.InitOnePropertyFromJson (peekedName, reader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peekedName" Type="System.String" />
        <Parameter Name="reader" Type="Microsoft.SharePoint.Client.JsonReader" />
      </Parameters>
      <Docs>
        <param name="peekedName">The name of the property to initialize.</param>
        <param name="reader">The <b>JsonReader</b> object that initializes the property value from the JSON data.</param>
        <summary>Reserved for internal use.</summary>
        <returns>
          <b>True</b> if the property is initialized; otherwise, <b>False</b>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.LookupMask.Length" />
      <MemberSignature Language="VB.NET" Value="Public Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Length : int with get, set" Usage="Microsoft.ProjectServer.Client.LookupMask.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.SharePoint.Client.Remote</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of characters in the mask sequence or, if the mask sequence can be of any length, gets or sets the zero value of <b>LookupTableConstants.AnyLengthSequence</b>.</summary>
        <value>The number of characters or the zero value that indicates any length.</value>
        <remarks>
          <para>For a code example, see <see cref="T:Microsoft.ProjectServer.Client.LookupMask" />.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaskType">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.LookupTableMaskSequence MaskType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.ProjectServer.Client.LookupTableMaskSequence MaskType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.LookupMask.MaskType" />
      <MemberSignature Language="VB.NET" Value="Public Property MaskType As LookupTableMaskSequence" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ProjectServer::Client::LookupTableMaskSequence MaskType { Microsoft::ProjectServer::Client::LookupTableMaskSequence get(); void set(Microsoft::ProjectServer::Client::LookupTableMaskSequence value); };" />
      <MemberSignature Language="F#" Value="member this.MaskType : Microsoft.ProjectServer.Client.LookupTableMaskSequence with get, set" Usage="Microsoft.ProjectServer.Client.LookupMask.MaskType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.SharePoint.Client.Remote</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.LookupTableMaskSequence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the mask segment type.</summary>
        <value>A mask type.</value>
        <remarks>
          <para>Examples of common mask types are text, number, currency, and date/time.</para>
          <para>For a code example, see <see cref="T:Microsoft.ProjectServer.Client.LookupMask" />.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Separator">
      <MemberSignature Language="C#" Value="public string Separator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Separator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.LookupMask.Separator" />
      <MemberSignature Language="VB.NET" Value="Public Property Separator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Separator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Separator : string with get, set" Usage="Microsoft.ProjectServer.Client.LookupMask.Separator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.SharePoint.Client.Remote</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the separator string that is used in the concatenation of parent table entry values at each level of the table mask.</summary>
        <value>A string that contains characters.</value>
        <remarks>
          <para>The allowed length of the character string is specified by <b>LookupTableConstants.MaxSeparatorLength</b>.</para>
          <para>For a code example, see <see cref="T:Microsoft.ProjectServer.Client.LookupMask" />.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeId">
      <MemberSignature Language="C#" Value="public override string TypeId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.LookupMask.TypeId" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TypeId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TypeId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeId : string" Usage="Microsoft.ProjectServer.Client.LookupMask.TypeId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToXml">
      <MemberSignature Language="C#" Value="public override void WriteToXml (System.Xml.XmlWriter writer, Microsoft.SharePoint.Client.SerializationContext serializationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteToXml(class System.Xml.XmlWriter writer, class Microsoft.SharePoint.Client.SerializationContext serializationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ProjectServer.Client.LookupMask.WriteToXml(System.Xml.XmlWriter,Microsoft.SharePoint.Client.SerializationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteToXml(System::Xml::XmlWriter ^ writer, Microsoft::SharePoint::Client::SerializationContext ^ serializationContext);" />
      <MemberSignature Language="F#" Value="override this.WriteToXml : System.Xml.XmlWriter * Microsoft.SharePoint.Client.SerializationContext -&gt; unit" Usage="lookupMask.WriteToXml (writer, serializationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="serializationContext" Type="Microsoft.SharePoint.Client.SerializationContext" />
      </Parameters>
      <Docs>
        <param name="writer">An <b>XmlWriter</b> object that generates streams or files that contain XML data. Reserved for internal use.</param>
        <param name="serializationContext">An object that stores information about the client object in order to transmit the path to the server. Reserved for internal use.</param>
        <summary>Reserved for internal use.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>