<Type Name="ProjectContext" FullName="Microsoft.ProjectServer.Client.ProjectContext">
  <TypeSignature Language="C#" Value="public class ProjectContext : Microsoft.SharePoint.Client.ClientContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProjectContext extends Microsoft.SharePoint.Client.ClientContext" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ProjectServer.Client.ProjectContext" />
  <TypeSignature Language="VB.NET" Value="Public Class ProjectContext&#xA;Inherits ClientContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProjectContext : Microsoft::SharePoint::Client::ClientContext" />
  <TypeSignature Language="F#" Value="type ProjectContext = class&#xA;    inherit ClientContext" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.SharePoint.Client.ClientContext</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Maintains the client-side context for development with a Project Web App instance, and contains the enterprise-wide collections of Project Server objects that exist in Project Web App.</summary>
    <remarks>
      <para>Because the <b>ProjectContext</b> object inherits from <b>ClientContext</b> in SharePoint, you can also access the SharePoint CSOM through the <b>ProjectContext</b> object. It is not necessary to instantiate a <b>ProjectServer</b> object, which the client-side code uses internally.</para>
      <para>
        <b>Note</b>: An advantage of the <b>ProjectContext</b> class is that it includes the <b>WaitForQueue</b> method. If you used the <b>ProjectServer</b> class, you would have to develop your own routines to wait for a queue job to complete.</para>
      <para />
      <para>For more information about the <b>ProjectContext</b> class, see Getting started with the Project Server CSOM and .NET. For code examples, see <see cref="M:Microsoft.ProjectServer.Client.ProjectContext.WaitForQueue(Microsoft.ProjectServer.Client.QueueJob,System.Int32)" /> and <see cref="P:Microsoft.ProjectServer.Client.ProjectContext.Projects" />.</para>
      <para />
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProjectContext (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ProjectServer.Client.ProjectContext.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProjectContext(System::String ^ url);" />
      <MemberSignature Language="F#" Value="new Microsoft.ProjectServer.Client.ProjectContext : string -&gt; Microsoft.ProjectServer.Client.ProjectContext" Usage="new Microsoft.ProjectServer.Client.ProjectContext url" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">The path of the Project Web App instance.</param>
        <summary>Creates an instance and initializes a <b>ProjectContext</b> object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Calendars">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.CalendarCollection Calendars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ProjectServer.Client.CalendarCollection Calendars" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.ProjectContext.Calendars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Calendars As CalendarCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ProjectServer::Client::CalendarCollection ^ Calendars { Microsoft::ProjectServer::Client::CalendarCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Calendars : Microsoft.ProjectServer.Client.CalendarCollection" Usage="Microsoft.ProjectServer.Client.ProjectContext.Calendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.CalendarCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of calendars for the Project Server instance.</summary>
        <value>A Project Server calendar collection.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomFields">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.CustomFieldCollection CustomFields { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ProjectServer.Client.CustomFieldCollection CustomFields" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.ProjectContext.CustomFields" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomFields As CustomFieldCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ProjectServer::Client::CustomFieldCollection ^ CustomFields { Microsoft::ProjectServer::Client::CustomFieldCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomFields : Microsoft.ProjectServer.Client.CustomFieldCollection" Usage="Microsoft.ProjectServer.Client.ProjectContext.CustomFields" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.CustomFieldCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of enterprise custom field definitions in the Project Web App instance.</summary>
        <value>A collection of <b>CustomFields</b> objects.</value>
        <remarks>
          <para>Values for custom fields can be set on many entity types, including projects, tasks, resources, and assignments. A project can also include definitions for local custom fields that are specific to each project.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterpriseProjectTypes">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.EnterpriseProjectTypeCollection EnterpriseProjectTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ProjectServer.Client.EnterpriseProjectTypeCollection EnterpriseProjectTypes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.ProjectContext.EnterpriseProjectTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EnterpriseProjectTypes As EnterpriseProjectTypeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ProjectServer::Client::EnterpriseProjectTypeCollection ^ EnterpriseProjectTypes { Microsoft::ProjectServer::Client::EnterpriseProjectTypeCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterpriseProjectTypes : Microsoft.ProjectServer.Client.EnterpriseProjectTypeCollection" Usage="Microsoft.ProjectServer.Client.ProjectContext.EnterpriseProjectTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.EnterpriseProjectTypeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of enterprise project types (EPTs) in the Project Web App instance.</summary>
        <value>A collection of <b>EnterpriseProjectType</b> objects.</value>
        <remarks>
          <para>An EPT can include a workflow association and templates for the initial project plan and the project site.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterpriseResources">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.EnterpriseResourceCollection EnterpriseResources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ProjectServer.Client.EnterpriseResourceCollection EnterpriseResources" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.ProjectContext.EnterpriseResources" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EnterpriseResources As EnterpriseResourceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ProjectServer::Client::EnterpriseResourceCollection ^ EnterpriseResources { Microsoft::ProjectServer::Client::EnterpriseResourceCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterpriseResources : Microsoft.ProjectServer.Client.EnterpriseResourceCollection" Usage="Microsoft.ProjectServer.Client.ProjectContext.EnterpriseResources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.EnterpriseResourceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of enterprise resources in a Project Web App instance.</summary>
        <value>A collection of <b>EnterpriseResource</b> objects.</value>
        <remarks>
          <para>A project can also include local resources that are specific to each project.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityTypes">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.EntityTypes EntityTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ProjectServer.Client.EntityTypes EntityTypes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.ProjectContext.EntityTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntityTypes As EntityTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ProjectServer::Client::EntityTypes ^ EntityTypes { Microsoft::ProjectServer::Client::EntityTypes ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EntityTypes : Microsoft.ProjectServer.Client.EntityTypes" Usage="Microsoft.ProjectServer.Client.ProjectContext.EntityTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.EntityTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the types of Project Server entities that are exposed through the CSOM.</summary>
        <value>An <b>EntityType</b> object.</value>
        <remarks>
          <para>Project Server entity types include projects, enterprise resources, tasks, assignments, custom fields, and so on.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHandlers">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.EventHandlerCollection EventHandlers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ProjectServer.Client.EventHandlerCollection EventHandlers" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.ProjectContext.EventHandlers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventHandlers As EventHandlerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ProjectServer::Client::EventHandlerCollection ^ EventHandlers { Microsoft::ProjectServer::Client::EventHandlerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EventHandlers : Microsoft.ProjectServer.Client.EventHandlerCollection" Usage="Microsoft.ProjectServer.Client.ProjectContext.EventHandlers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.EventHandlerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of event handlers that are defined in a Project Web App instance.</summary>
        <value>A collection of <b>EventHandler</b> objects.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Events">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.EventCollection Events { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ProjectServer.Client.EventCollection Events" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.ProjectContext.Events" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Events As EventCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ProjectServer::Client::EventCollection ^ Events { Microsoft::ProjectServer::Client::EventCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Events : Microsoft.ProjectServer.Client.EventCollection" Usage="Microsoft.ProjectServer.Client.ProjectContext.Events" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.EventCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of event objects in a Project Web App instance.</summary>
        <value>A collection of <b>Event</b> objects.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTables">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.LookupTableCollection LookupTables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ProjectServer.Client.LookupTableCollection LookupTables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.ProjectContext.LookupTables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LookupTables As LookupTableCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ProjectServer::Client::LookupTableCollection ^ LookupTables { Microsoft::ProjectServer::Client::LookupTableCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LookupTables : Microsoft.ProjectServer.Client.LookupTableCollection" Usage="Microsoft.ProjectServer.Client.ProjectContext.LookupTables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.LookupTableCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of lookup table definitions in the Project Web App instance.</summary>
        <value>A collection of <b>LookupTable</b> objects.</value>
        <remarks>
          <para>Custom field values can reference the values for entries in a lookup table. A project can also include definitions for local lookup tables that are specific to each project.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Phases">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.PhaseCollection Phases { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ProjectServer.Client.PhaseCollection Phases" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.ProjectContext.Phases" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Phases As PhaseCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ProjectServer::Client::PhaseCollection ^ Phases { Microsoft::ProjectServer::Client::PhaseCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Phases : Microsoft.ProjectServer.Client.PhaseCollection" Usage="Microsoft.ProjectServer.Client.ProjectContext.Phases" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.PhaseCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of Project Server workflow phases in the Project Web App instance.</summary>
        <value>A collection of <b>Phase</b> objects.</value>
        <remarks>
          <para>A workflow phase is a major part of a workflow. A phase can contain one or more stages in the workflow.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProjectDetailPages">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.ProjectDetailPageCollection ProjectDetailPages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ProjectServer.Client.ProjectDetailPageCollection ProjectDetailPages" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.ProjectContext.ProjectDetailPages" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProjectDetailPages As ProjectDetailPageCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ProjectServer::Client::ProjectDetailPageCollection ^ ProjectDetailPages { Microsoft::ProjectServer::Client::ProjectDetailPageCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProjectDetailPages : Microsoft.ProjectServer.Client.ProjectDetailPageCollection" Usage="Microsoft.ProjectServer.Client.ProjectContext.ProjectDetailPages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.ProjectDetailPageCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of project detail pages in the Project Server instance.</summary>
        <value>A collection of <b>ProjectDetailPage</b> objects.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Projects">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.ProjectCollection Projects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ProjectServer.Client.ProjectCollection Projects" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.ProjectContext.Projects" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Projects As ProjectCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ProjectServer::Client::ProjectCollection ^ Projects { Microsoft::ProjectServer::Client::ProjectCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Projects : Microsoft.ProjectServer.Client.ProjectCollection" Usage="Microsoft.ProjectServer.Client.ProjectContext.Projects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.ProjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of projects in the Project Web App instance.</summary>
        <value>A collection of projects.</value>
        <remarks>
          <para>A project entity contains additional entity types, such as tasks, resources, and assignments.</para>
          <para />
        </remarks>
        <example>
          <para>The following example uses the <b>ProjectContext</b> object to list the published projects in Project Web App. To see the same application using the <b>ProjectServer</b> object, see <see cref="P:Microsoft.ProjectServer.Client.ProjectContext.Projects" />. For information about creating a simple CSOM application in Microsoft Visual Studio, see <see cref="N:Microsoft.ProjectServer.Client" />.</para>
          <code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.ProjectServer.Client;

namespace ReadProjectList
{
    class Program
    {
        private const string pwaPath = "http://&lt;i&gt;ServerName&lt;/i&gt;/&lt;i&gt;PwaName&lt;/i&gt;/";    // Change the path for Project Web App.
        
        private static &lt;span class="label"&gt;ProjectContext&lt;/span&gt; projContext;

        static void Main(string[] args)
        {
            projContext = new ProjectContext(pwaPath); 

            // Get the list of published projects in Project Web App.
            projContext.Load(projContext.Projects);
            projContext.ExecuteQuery();

            Console.WriteLine("\nProject ID : Project name : Created date");

            foreach (PublishedProject pubProj in projContext.Projects)
            {
                Console.WriteLine("\n\t{0}\n\t{1} : {2}", pubProj.Id.ToString(), pubProj.Name, 
                    pubProj.CreatedDate.ToString());
            }

            Console.Write("\nPress any key to exit: ");
            Console.ReadKey(false);
        }
    }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ServiceStatus">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.ServiceStatus ServiceStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ProjectServer.Client.ServiceStatus ServiceStatus" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.ProjectContext.ServiceStatus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceStatus As ServiceStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ProjectServer::Client::ServiceStatus ^ ServiceStatus { Microsoft::ProjectServer::Client::ServiceStatus ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceStatus : Microsoft.ProjectServer.Client.ServiceStatus" Usage="Microsoft.ProjectServer.Client.ProjectContext.ServiceStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.ServiceStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets information about the status of the Project Server service.</summary>
        <value>A <b>ServiceStatus</b> object.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stages">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.StageCollection Stages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ProjectServer.Client.StageCollection Stages" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.ProjectContext.Stages" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Stages As StageCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ProjectServer::Client::StageCollection ^ Stages { Microsoft::ProjectServer::Client::StageCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Stages : Microsoft.ProjectServer.Client.StageCollection" Usage="Microsoft.ProjectServer.Client.ProjectContext.Stages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.StageCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of Project Server workflow stages in a Project Web App instance.</summary>
        <value>A collection of <b>Stage</b> objects.</value>
        <remarks>
          <para>A workflow stage is a specific subsection of a workflow phase.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeSheetPeriods">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.TimeSheetPeriodCollection TimeSheetPeriods { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ProjectServer.Client.TimeSheetPeriodCollection TimeSheetPeriods" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.ProjectContext.TimeSheetPeriods" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeSheetPeriods As TimeSheetPeriodCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ProjectServer::Client::TimeSheetPeriodCollection ^ TimeSheetPeriods { Microsoft::ProjectServer::Client::TimeSheetPeriodCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeSheetPeriods : Microsoft.ProjectServer.Client.TimeSheetPeriodCollection" Usage="Microsoft.ProjectServer.Client.ProjectContext.TimeSheetPeriods" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.TimeSheetPeriodCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of time sheet periods.</summary>
        <value>A collection of <b>TimeSheetPeriod</b> objects.</value>
        <remarks>
          <para>Timesheet periods represent a defined period of time on a timesheet.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForQueue">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.JobState WaitForQueue (Microsoft.ProjectServer.Client.QueueJob job, int timeoutSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.ProjectServer.Client.JobState WaitForQueue(class Microsoft.ProjectServer.Client.QueueJob job, int32 timeoutSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ProjectServer.Client.ProjectContext.WaitForQueue(Microsoft.ProjectServer.Client.QueueJob,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForQueue (job As QueueJob, timeoutSeconds As Integer) As JobState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::ProjectServer::Client::JobState WaitForQueue(Microsoft::ProjectServer::Client::QueueJob ^ job, int timeoutSeconds);" />
      <MemberSignature Language="F#" Value="member this.WaitForQueue : Microsoft.ProjectServer.Client.QueueJob * int -&gt; Microsoft.ProjectServer.Client.JobState" Usage="projectContext.WaitForQueue (job, timeoutSeconds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.JobState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="job" Type="Microsoft.ProjectServer.Client.QueueJob" />
        <Parameter Name="timeoutSeconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="job">An object that represents the queued job.</param>
        <param name="timeoutSeconds">The maximum number of seconds to wait for the queue job to complete.</param>
        <summary>Waits for the specified queue job to complete, or for a maximum number of seconds.</summary>
        <returns>The state of the queue job. If the job completes successfully, returns <see cref="F:Microsoft.ProjectServer.Client.JobState.Success" />.</returns>
        <remarks>To be added.</remarks>
        <example>
          <para>The Console example named <b>QueueCreateProject</b> does the following jobs: </para>
          <list type="bullet">
            <item>
              <description>Parses the command line to get the name of a new project, and an optional queue job wait time. The default wait time is 10 seconds. For example, if a project named Test proj 1 does not exist in Project Web App, you can run the application with the QueueCreateProject -projName "Test proj 1" command.</description>
            </item>
            <item>
              <description>Creates a <b>ProjectContext</b> object for the specified Project Web App instance.</description>
            </item>
            <item>
              <description>Gets the GUID of the enterprise project type (EPT) named "Basic Project Plan".</description>
            </item>
            <item>
              <description>Creates a project by using the <b>CreateTestProject</b> method, which sets the properties of a <b>ProjectCreationInformation</b> object.</description>
            </item>
            <item>
              <description>Waits for the Project Server Queue Service to publish the new project, by using the <b>ProjectContext.WaitForQueue</b> method.</description>
            </item>
            <item>
              <description>Lists the published projects. If the <b>QueueCreateProject</b> application does not call the <b>WaitForQueue</b> method, the published projects may not yet include the new project.</description>
            </item>
          </list>
          <para>For more information about this example, see Getting started with the Project Server CSOM and .NET.</para>
          <code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.ProjectServer.Client;

namespace QueueCreateProject
{
    class Program
    {
        private const string pwaPath = "http://&lt;i&gt;ServerName&lt;/i&gt;/pwa/"; // Change the path to Project Web App.
        private static string basicEpt = "Basic Project Plan";   // Basic enterprise project type.
        private static string projName = string.Empty;
        private static int timeoutSeconds = 10;  // The maximum wait time for a queue job, in seconds.

        private static ProjectContext projContext;

        static void Main(string[] args)
        {
            if (!ParseCommandLine(args))
            {
                Usage();
                ExitApp();
            }

            projContext = new ProjectContext(pwaPath);

            if (CreateTestProject())
                ListPublishedProjects();
            else
                Console.WriteLine("\nProject creation failed: {0}", projName);

            ExitApp();
        }

        // Create a project.
        private static bool CreateTestProject()
        {
            bool projCreated = false;

            try
            {
                Console.Write("\nCreating project: {0} ...", projName);
                ProjectCreationInformation newProj = new ProjectCreationInformation();

                newProj.Id = Guid.NewGuid();
                newProj.Name = projName;
                newProj.Description = "Test creating a project with CSOM";
                newProj.Start = DateTime.Today.Date;

                // Setting the EPT GUID is optional. If no EPT is specified, Project Server uses 
                // the default EPT. 
                newProj.EnterpriseProjectTypeId = GetEptUid(basicEpt);

                PublishedProject newPublishedProj = projContext.Projects.Add(newProj);
                QueueJob qJob = projContext.Projects.Update();

                // Calling Load and ExecuteQuery for the queue job is optional. If qJob is 
                // not initialized when you call WaitForQueue, Project Server initializes it.
                // projContext.Load(qJob);
                // projContext.ExecuteQuery();

                JobState jobState = projContext.WaitForQueue(qJob, timeoutSeconds);

                if (jobState == JobState.Success)
                {
                    projCreated = true;
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.WriteLine("\nThere is a problem in the queue. Timeout is {0} seconds.", 
                        timeoutSeconds);
                    Console.WriteLine("\tQueue JobState: {0}", jobState.ToString());
                    Console.ResetColor();
                }

                Console.WriteLine();
            }
            catch(Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("\nError: {0}", ex.Message);
                Console.ResetColor();
            }
            return projCreated;
        }

        // Get the GUID of the specified enterprise project type.
        private static Guid GetEptUid(string eptName)
        {
            Guid eptUid = Guid.Empty;

            try
            {
                // Get the list of EPTs that have the specified name. 
                // If the EPT name exists, the list will contain only one EPT.
                var eptList = projContext.LoadQuery(
                    projContext.EnterpriseProjectTypes.Where(
                        ept =&amp;gt; ept.Name == eptName));
                projContext.ExecuteQuery();

                eptUid = eptList.First().Id;

                // Alternate routines to find the EPT GUID. Both (a) and (b) download the entire list of EPTs.
                // (a) Using a foreach block:
                //foreach (EnterpriseProjectType ept in projSvr.EnterpriseProjectTypes)
                //{
                //    if (ept.Name == eptName)
                //    {
                //        eptUid = ept.Id;
                //        break;
                //    }
                //}
                // (b) Querying for the EPT list, and then using a lambda expression to select the EPT:
                //var eptList = projContext.LoadQuery(projContext.EnterpriseProjectTypes);
                //projContext.ExecuteQuery();
                //eptUid = eptList.First(ept =&amp;gt; ept.Name == eptName).Id;
            }
            catch (Exception ex)
            {
                string msg = string.Format("GetEptUid: eptName = \"{0}\"\n\n{1}",
                    eptName, ex.GetBaseException().ToString());
                throw new ArgumentException(msg);
            }
            return eptUid;
        }

        // List the published projects.
        private static void ListPublishedProjects()
        {
            // Get the list of projects on the server.
            projContext.Load(projContext.Projects);
            projContext.ExecuteQuery();

            Console.WriteLine("\nProject ID : Project name : Created date");

            foreach (PublishedProject pubProj in projContext.Projects)
            {
                Console.WriteLine("\n\t{0} :\n\t{1} : {2}", pubProj.Id.ToString(), pubProj.Name,
                    pubProj.CreatedDate.ToString());
            }
        }

        // Parse the command line. Return true if there are no errors.
        private static bool ParseCommandLine(string[] args)
        {
            bool error = false;
            int argsLen = args.Length;

            try
            {
                for (int i = 0; i &amp;lt; argsLen; i++)
                {
                    if (error) break;
                    if (args[i].StartsWith("-") || args[i].StartsWith("/"))
                        args[i] = "*" + args[i].Substring(1).ToLower();

                    switch (args[i])
                    {
                        case "*projname":
                        case "*n":
                            if (++i &amp;gt;= argsLen) return false;
                            projName = args[i];
                            break;
                        case "*timeout":
                        case "*t":
                            if (++i &amp;gt;= argsLen) return false;
                            timeoutSeconds = Convert.ToInt32(args[i]);
                            break;
                        case "*?":
                        default:
                            error = true;
                            break;
                    }
                }
            }
            catch (FormatException)
            {
                error = true;
            }
            if (string.IsNullOrEmpty(projName)) error = true;
            return !error;
        }

        private static void Usage()
        {
            string example = "Usage: QueueCreateProject -projName | -n \"New project name\" [-timeout | -t sec]";
            example += "\nExample: QueueCreateProject -n \"My new project\"";
            example += "\nDefault timeout seconds = " + timeoutSeconds.ToString();
            Console.WriteLine(example);
        }

        private static void ExitApp()
        {
            Console.Write("\nPress any key to exit... ");
            Console.ReadKey(true);
            Environment.Exit(0);
        }
    }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="WorkflowActivities">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.WorkflowActivities WorkflowActivities { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ProjectServer.Client.WorkflowActivities WorkflowActivities" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.ProjectContext.WorkflowActivities" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkflowActivities As WorkflowActivities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ProjectServer::Client::WorkflowActivities ^ WorkflowActivities { Microsoft::ProjectServer::Client::WorkflowActivities ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WorkflowActivities : Microsoft.ProjectServer.Client.WorkflowActivities" Usage="Microsoft.ProjectServer.Client.ProjectContext.WorkflowActivities" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.WorkflowActivities</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the methods that Project Server workflows can call at run time.</summary>
        <value>A <b>WorkflowActivities</b> object.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowDesigner">
      <MemberSignature Language="C#" Value="public Microsoft.ProjectServer.Client.WorkflowDesigner WorkflowDesigner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ProjectServer.Client.WorkflowDesigner WorkflowDesigner" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ProjectServer.Client.ProjectContext.WorkflowDesigner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkflowDesigner As WorkflowDesigner" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::ProjectServer::Client::WorkflowDesigner ^ WorkflowDesigner { Microsoft::ProjectServer::Client::WorkflowDesigner ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WorkflowDesigner : Microsoft.ProjectServer.Client.WorkflowDesigner" Usage="Microsoft.ProjectServer.Client.ProjectContext.WorkflowDesigner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ProjectServer.Client</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ProjectServer.Client.WorkflowDesigner</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a workflow designer that developers can call at design time.</summary>
        <value>A workflow designer.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>