<Type Name="Resource" FullName="WebSvcResource.Resource">
  <TypeSignature Language="C#" Value="public class Resource : System.Web.Services.Protocols.SoapHttpClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Resource extends System.Web.Services.Protocols.SoapHttpClientProtocol" />
  <TypeSignature Language="DocId" Value="T:WebSvcResource.Resource" />
  <TypeSignature Language="VB.NET" Value="Public Class Resource&#xA;Inherits SoapHttpClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class Resource : System::Web::Services::Protocols::SoapHttpClientProtocol" />
  <TypeSignature Language="F#" Value="type Resource = class&#xA;    inherit SoapHttpClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>ProjectServerServices</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.SoapHttpClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Web.Services.WebServiceBinding(Name="ResourceSoap", Namespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Includes methods for managing resources and users in Project Server.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Resource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Resource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates an <b>Resource</b> object from the ASMX-based <b>Resource</b> web service.</summary>
        <remarks>
          <para>To create an object that is equivalent to <b>Resource</b> by using the Windows Communication Foundation (WCF) API, use one of the <b>ResourceClient</b> constructors.</para>
          <para />
        </remarks>
        <example>
          <para>In the following statement, <b>ResourceWebSvc</b> is an arbitrary namespace for the ASMX-based <b>Resource</b> web service.</para>
          <code>private static ResourceWebSvc.Resource resource = new ResourceWebSvc.Resource();</code>
          <para>In the following statement, <b>SvcResource</b> is an arbitrary namespace for the WCF-based <b>Resource</b> service. The <paramref name="endpt" /> parameter is a <b>String</b> value that specifies the name of the client endpoint address in the app.config file (or in the web.config file for web applications).</para>
          <code>private static SvcResource.ResourceClient resourceClient = new SvcResource.ResourceClient(endpt);</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ActivateResources">
      <MemberSignature Language="C#" Value="public void ActivateResources (Guid[] resourceGuids, bool validateOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ActivateResources(valuetype System.Guid[] resourceGuids, bool validateOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.ActivateResources(System.Guid[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateResources (resourceGuids As Guid(), validateOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateResources(cli::array &lt;Guid&gt; ^ resourceGuids, bool validateOnly);" />
      <MemberSignature Language="F#" Value="member this.ActivateResources : Guid[] * bool -&gt; unit" Usage="resource.ActivateResources (resourceGuids, validateOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/ActivateResources", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGuids" Type="System.Guid[]" />
        <Parameter Name="validateOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="resourceGuids">Array of Guids of the resources to deactivate.</param>
        <param name="validateOnly">If <b>true</b>, only validates the data and does not activate the new resources.</param>
        <summary>Activates one or more Project Server enterprise resources.</summary>
        <remarks>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageUsersAndGroups" />
              </term>
              <description>Allows a user to manage resources, users and groups. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>This example retrieves enterprise resources, creating several if they are not present. It then deativates these resources and reactivates them.</para>
          <para>Please see Prerequisites for Reference Code Samples for critical information on running this code sample.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.ActivateResources
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";

            SvcResource.ResourceDataSet resourceDs;
            PSLibrary.Filter resourceFilter;

            // Set up the Web service objects
            SvcResource.Resource resourceSvc = new SvcResource.Resource();

            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.Credentials = CredentialCache.DefaultCredentials;

            // Get the resources
            Console.WriteLine("Getting/Creating resources");
            Guid[] resources= EnsureEnterpriseResources(resourceSvc);
            
            // Deactivate them so we can activate them.
            Console.WriteLine("Deactivating resources");
            resourceSvc.DeactivateResources(resources, false);

            resourceFilter = GetResourceFilter(resources);
            resourceDs = resourceSvc.ReadResources(resourceFilter.GetXml(), false);

            WriteResourceState(resourceDs);

            // Activate Resources
            Console.WriteLine("Activating resources");
            resourceSvc.ActivateResources(resources, false);
            
            resourceDs = resourceSvc.ReadResources(resourceFilter.GetXml(), false);
            WriteResourceState(resourceDs);
         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }

      private static void WriteResourceState(SvcResource.ResourceDataSet resourceDs)
      {
         foreach (SvcResource.ResourceDataSet.ResourcesRow row in resourceDs.Resources.Rows)
         {
            // If the resource type is greater than the inactive offset, it is inactive.
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.Write(row.RES_NAME);
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.Write(" is ");
            if (row.RES_TYPE &amp;gt; (int)PSLibrary.Resource.Type.INACTIVATED_OFFSET)
            {
               Console.ForegroundColor = ConsoleColor.Red;
               Console.Write("Inactive\r\n");
            }
            else
            {
               Console.ForegroundColor = ConsoleColor.DarkGreen;
               Console.Write("Active\r\n");
            }
            Console.ResetColor();
         }
      }
      private static Guid[] EnsureEnterpriseResources(SvcResource.Resource resourceSvc)
      {
         string[] resourceNames = new string[] { "Lertchai Treetawatchaiwong", 
                                                 "Bricks", 
                                                 "Conference Room A",
                                                 "Rental"};
         PSLibrary.Resource.Type[] resourceTypes = new PSLibrary.Resource.Type[] { PSLibrary.Resource.Type.WorkResource, PSLibrary.Resource.Type.MaterialResource, PSLibrary.Resource.Type.WorkResource,PSLibrary.Resource.Type.CostResources};
         Guid[] resources = new Guid[resourceNames.Length];
         for (int i=0; i &amp;lt; resourceNames.Length; i++)
         {
            resources[i] = EnsureEnterpriseResource(resourceSvc, resourceNames[i], resourceTypes[i]);
         }
         return resources;
      }
      private static Guid EnsureEnterpriseResource(SvcResource.Resource resourceSvc, string resourceName, PSLibrary.Resource.Type resourceType)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, resourceName);
         resourceFilter.Criteria = existingResource;
         string filterXml = resourceFilter.GetXml();
         resourceDs = resourceSvc.ReadResources(filterXml, false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs.Resources[0].RES_UID;
         }
         else
         {
            resourceDs = new SvcResource.ResourceDataSet();
            SvcResource.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
            resourceRow.RES_UID = Guid.NewGuid();
            resourceRow.RES_NAME = resourceName;
            resourceRow.RES_INITIALS = resourceName.Substring(0,1) + 
                              (resourceName.IndexOf(" ")&amp;gt;0?resourceName.Substring(resourceName.IndexOf(" ")+1,1):"");
            resourceRow.RES_TYPE = (int)resourceType;
            resourceDs.Resources.AddResourcesRow(resourceRow);
            resourceSvc.CreateResources(resourceDs, false, true);
            return resourceRow.RES_UID;
         }
      }

      private static PSLibrary.Filter GetResourceFilter(Guid[] resources)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();
         PSLibrary.Filter resourceFilter = new PSLibrary.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         //List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt; resourceFieldOps = new List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt;();
         PSLibrary.Filter.IOperator[] fos = new PSLibrary.Filter.IOperator[resources.Length];
         for (int i = 0; i &amp;lt; resources.Length; i++)
         {
            fos[i] = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_UIDColumn.ColumnName, resources[i]);
         }

         PSLibrary.Filter.LogicalOperator lo = new Microsoft.Office.Project.Server.Library.Filter.LogicalOperator(PSLibrary.Filter.LogicalOperationType.Or,fos);

         resourceFilter.Criteria = lo;
         return resourceFilter;
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CheckInResources">
      <MemberSignature Language="C#" Value="public void CheckInResources (Guid[] array, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CheckInResources(valuetype System.Guid[] array, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.CheckInResources(System.Guid[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CheckInResources (array As Guid(), force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CheckInResources(cli::array &lt;Guid&gt; ^ array, bool force);" />
      <MemberSignature Language="F#" Value="member this.CheckInResources : Guid[] * bool -&gt; unit" Usage="resource.CheckInResources (array, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/CheckInResources", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Guid[]" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="array">Array of Guids of the resources to check in.</param>
        <param name="force">If <b>true</b>, forces a check-in.</param>
        <summary>Checks in one or more enterprise resources.</summary>
        <remarks>
          <para>Project Server Permissions</para>
          <para>If the current user has the resource checked out, they will be allowed to check in regardless of the <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageCheckIns" /> setting.</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageCheckIns" />
              </term>
              <description>Check in resources. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example retrieves enterprise resources, creating several if they are not present, reads the resource using a resource filter, checks out each resource if available, updates the <b>RES_CODE</b> property of available resources, and checks the resources back in. It reports the before state, updates made, and the after state of the resources.</para>
          <para>Please see Prerequisites for Reference Code Samples for critical information on running this code sample.</para>
          <para>You can go to <b>Admin/AddModifyUser.aspx</b> on your Project Web App site to verify that the resource is not checked out in another session</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.CheckInResources
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";

            SvcResource.ResourceDataSet resourceDs;
            PSLibrary.Filter resourceFilter;
            string filterXml;

            // Set up the Web service objects
            SvcResource.Resource resourceSvc = new SvcResource.Resource();

            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.Credentials = CredentialCache.DefaultCredentials;

            // Get the resources
            Console.WriteLine("Getting/Creating resources");
            Guid[] resources = EnsureEnterpriseResources(resourceSvc);

            // Read the resources so we can see what it looked like before.
            resourceFilter = GetResourceFilter(resources);
            filterXml = resourceFilter.GetXml();

            resourceDs = resourceSvc.ReadResources(filterXml, false);
            WriteTablesToConsole(resourceDs.Tables);

            // Check out resources so they can be modified
            Guid me = resourceSvc.GetCurrentUserUid();
            bool checkedOut =false;
            Random rand = new Random();
            // Modify the resources
            foreach(SvcResource.ResourceDataSet.ResourcesRow resourceRow in resourceDs.Resources)
            {
               Console.WriteLine("Check out " + resourceRow.RES_NAME);
               if (resourceRow.IsRES_CHECKOUTBYNull())
               {
                  resourceSvc.CheckOutResources(new Guid[] { resourceRow.RES_UID });
                  checkedOut=true;
               }
               else
               {
                  if (resourceRow.RES_CHECKOUTBY == me)
                  {
                     checkedOut = true;
                  }
                  else
                  {
                     checkedOut = false;
                     Console.WriteLine("\tCan't check out this resource, skip updating this one.");
                  }
               }
               if (checkedOut)
               {
                  SvcResource.ResourceDataSet updateDs = resourceSvc.ReadResource(resourceRow.RES_UID);
                  updateDs.Resources[0].RES_CODE = " A" + rand.Next(1000,9999) ;
                  Console.WriteLine("Update RES_CODE to " + updateDs.Resources[0].RES_CODE);
                  resourceSvc.UpdateResources(updateDs, false, false);
                  Console.WriteLine("Check in " + resourceRow.RES_NAME);
                  resourceSvc.CheckInResources(new Guid[] { resourceRow.RES_UID },false);
               }
               Console.ForegroundColor=ConsoleColor.Yellow;
               Console.WriteLine("".PadRight(30,'-'));
               Console.ResetColor();
            }

            // retrieve the data from the server for display
            resourceDs = resourceSvc.ReadResources(filterXml, false);
            WriteTablesToConsole(resourceDs.Tables);
         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }

      private static void WriteResourceState(SvcResource.ResourceDataSet resourceDs)
      {
         foreach (SvcResource.ResourceDataSet.ResourcesRow row in resourceDs.Resources.Rows)
         {
            // If the resource type is greater than the inactive offset, it is inactive.
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.Write(row.RES_NAME);
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.Write(" is ");
            if (row.RES_TYPE &amp;gt; (int)PSLibrary.Resource.Type.INACTIVATED_OFFSET)
            {
               Console.ForegroundColor = ConsoleColor.Red;
               Console.Write("Inactive\r\n");
            }
            else
            {
               Console.ForegroundColor = ConsoleColor.DarkGreen;
               Console.Write("Active\r\n");
            }
            Console.ResetColor();
         }
      }
      private static Guid[] EnsureEnterpriseResources(SvcResource.Resource resourceSvc)
      {
         string[] resourceNames = new string[] { "Lertchai Treetawatchaiwong", 
                                                 "Bricks", 
                                                 "Conference Room A",
                                                 "Rental"};
         PSLibrary.Resource.Type[] resourceTypes = new PSLibrary.Resource.Type[] { PSLibrary.Resource.Type.WorkResource, PSLibrary.Resource.Type.MaterialResource, PSLibrary.Resource.Type.WorkResource, PSLibrary.Resource.Type.CostResources };
         Guid[] resources = new Guid[resourceNames.Length];
         for (int i = 0; i &amp;lt; resourceNames.Length; i++)
         {
            resources[i] = EnsureEnterpriseResource(resourceSvc, resourceNames[i], resourceTypes[i]);
         }
         return resources;
      }
      private static Guid EnsureEnterpriseResource(SvcResource.Resource resourceSvc, string resourceName, PSLibrary.Resource.Type resourceType)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, resourceName);
         resourceFilter.Criteria = existingResource;
         string filterXml = resourceFilter.GetXml();
         resourceDs = resourceSvc.ReadResources(filterXml, false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs.Resources[0].RES_UID;
         }
         else
         {
            resourceDs = new SvcResource.ResourceDataSet();
            SvcResource.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
            resourceRow.RES_UID = Guid.NewGuid();
            resourceRow.RES_NAME = resourceName;
            resourceRow.RES_INITIALS = resourceName.Substring(0, 1) +
                              (resourceName.IndexOf(" ") &amp;gt; 0 ? resourceName.Substring(resourceName.IndexOf(" ") + 1, 1) : "");
            resourceRow.RES_TYPE = (int)resourceType;
            resourceDs.Resources.AddResourcesRow(resourceRow);
            resourceSvc.CreateResources(resourceDs, false, true);
            return resourceRow.RES_UID;
         }
      }

      private static PSLibrary.Filter GetResourceFilter(Guid[] resources)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();
         PSLibrary.Filter resourceFilter = new PSLibrary.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CODEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_ACCRUE_ATColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_BOOKING_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CAN_LEVELColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CHECKOUTBYColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CHECKOUTDATEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_COST_CENTERColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_DEF_ASSN_OWNERColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_EXTERNAL_IDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_GROUPColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HAS_NOTESColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HIRE_DATEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HYPERLINK_ADDRESSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HYPERLINK_FRIENDLY_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HYPERLINK_SUB_ADDRESSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_IDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_IS_TEAMColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_IS_WINDOWS_USERColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_MATERIAL_LABELColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         //resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NOTESColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_PHONETICSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_RTF_NOTESColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TERMINATION_DATEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TIMESHEET_MGR_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));


         //List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt; resourceFieldOps = new List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt;();
         PSLibrary.Filter.IOperator[] fos = new PSLibrary.Filter.IOperator[resources.Length];
         for (int i = 0; i &amp;lt; resources.Length; i++)
         {
            fos[i] = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_UIDColumn.ColumnName, resources[i]);
         }

         PSLibrary.Filter.LogicalOperator lo = new Microsoft.Office.Project.Server.Library.Filter.LogicalOperator(PSLibrary.Filter.LogicalOperationType.Or, fos);

         resourceFilter.Criteria = lo;
         return resourceFilter;
      }
      // Write all contents of a table collection to the console
      private static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // add a space so it won't wrap
            tableWidth += 1;
            // make the console as wide as the widest table
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  dataString = row[i].ToString();
                  // truncate output if it is wider than 
                  // the desired column width
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // Helper function for WriteTablesToConsole
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: may not handle byte[]data types well
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         //return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise use the max col width
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // truncate if over the max length
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // always be at least as wide as the colum name
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CheckOutResources">
      <MemberSignature Language="C#" Value="public void CheckOutResources (Guid[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CheckOutResources(valuetype System.Guid[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.CheckOutResources(System.Guid[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub CheckOutResources (array As Guid())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CheckOutResources(cli::array &lt;Guid&gt; ^ array);" />
      <MemberSignature Language="F#" Value="member this.CheckOutResources : Guid[] -&gt; unit" Usage="resource.CheckOutResources array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/CheckOutResources", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Guid[]" />
      </Parameters>
      <Docs>
        <param name="array">Array of GUIDs of the enterprise resources to check out.</param>
        <summary>Checks out one or more enterprise resources for editing.</summary>
        <remarks>
          <para>If any of the requested resources are already checked out, <b>CheckOutResources</b> fails for all resources specified by the <paramref name="array" /> parameter. If you get a <see cref="T:Microsoft.Office.Project.Server.Library.PSClientError" /> object using the SOAP exception, it does not tell you which resources are checked out. For example, the following code fragment uses <b>PSClientError</b> to get information about the exception and write it to the console. The <b>resource</b> object is an instance of the <b>Resource</b> class in the Resource Web service.</para>
          <code>using PSLibrary = Microsoft.Office.Project.Server.Library;
. . .
try
{
    resource.CheckOutResources(resourcesToTest);
    Console.WriteLine("Checkout succeeded.");
}
catch (SoapException ex)
{
    string errMess = string.Empty;
    // Pass the exception to the PSClientError constructor to 
    // get all error information.
    PSLibrary.PSClientError psiError = new PSLibrary.PSClientError(ex);
    PSLibrary.PSErrorInfo[] psiErrors = psiError.GetAllErrors();

    for (int j = 0; j &amp;lt; psiErrors.Length; j++)
    {
        errMess += psiErrors[j].ErrId.ToString() + "\n";
    }
    errMess += "\n" + ex.Message.ToString();
    Console.WriteLine(errMess + "\n");
}</code>
          <para>If two of the resources are already checked out, one to the application user and one to another user, the application writes the following to the console.</para>
          <code>CICOAlreadyCheckedOutToYou
CICOCheckedOutToOtherUser

System.Web.Services.Protocols.SoapException: ProjectServerError(s) LastError=CICOCheckedOutToOtherUser Instructions: Pass this into PSClientError constructor to access all error information
   at Microsoft.Office.Project.Server.WebService.Resource.CheckOutResources(Guid[] array)</code>
          <para>The following example console application shows how to get information about which resources are checked out. To use the application, set a Web reference to the Resource Web service and name the reference <b>ResourceWS</b>. If none of the specified resources are already checked out, TestResourceCheckOut.exe checks out the resources and then checks them back in. If any of the resources are already checked out, the application writes an error message to the console with the resource GUID and reason. To run the application, specify the Project Web App URL as an argument, for example, TestResourceCheckOut http://ServerName/ProjectServerName.</para>
          <code>using System;
using System.Collections;
using System.Text;
using System.Net;
using System.Web.Services.Protocols;
using System.Xml;

namespace TestResourceCheckOut
{
    class Program
    {
        private const string RESOURCEWEBSERVICE = "/_vti_bin/PSI/Resource.asmx";
        static ResourceWS.Resource resource = new ResourceWS.Resource();

        // Test application to determine if resources are already checked out.
        static void Main(string[] args)
        { 
            ArrayList checkedOut = null;
            String pwaUrl = args[0];
            resource.Url = pwaUrl + RESOURCEWEBSERVICE;
            resource.Credentials = CredentialCache.DefaultCredentials;

            Guid[] resourcesToTest = new Guid[3];
            // Change the following GUIDs to match resources in your system.
            resourcesToTest[0] = new Guid("{09be4db3-129e-46b9-b47a-d66ff6f2cbd2}");
            resourcesToTest[1] = new Guid("{50752a44-4b31-4f4c-bbfc-a54c10ec871a}");
            resourcesToTest[2] = new Guid("{cfb5216c-1f43-49f7-85e4-e0bab57dcdef}");

            Console.WriteLine("Trying to check out resources ...");
            
            try
            {
                // If any resources are already checked out, 
                // CheckOutResources fails for all resources.
                resource.CheckOutResources(resourcesToTest);
                Console.WriteLine("Checkout succeeded.");
            }
            catch (SoapException ex)
            {
                String tempXml = ex.Detail.InnerXml;
                checkedOut = ExtractError(tempXml);
            }

            int numAlreadyCheckedOut = checkedOut != null ? checkedOut.Count : 0;
            int totalTested = resourcesToTest.Length;
            int num2CheckIn = totalTested - numAlreadyCheckedOut;

            // Check in the resources this application just checked out.
            if (numAlreadyCheckedOut == 0)
            {
                resource.CheckInResources(resourcesToTest, false);

                for (int i = 0; i &amp;lt; num2CheckIn; i++)
                    Console.WriteLine(string.Format("Checked back in: {0}",
                        resourcesToTest[i].ToString()));
            }
            Console.ReadLine();
        }

        // Write reason for resource checkout error to console.
        // Return a list of resources checked out.
        static ArrayList ExtractError(String xmlstr)
        {
            ArrayList checkedOut = new ArrayList();
            XmlDocument doc = new XmlDocument();
            doc.LoadXml(xmlstr);

            foreach (XmlNode node in doc.DocumentElement.FirstChild.ChildNodes)
            {
                String err = String.Empty;
                if (node.Name.Equals("item"))
                {
                    // The node is one error.
                    XmlNode n = node.Attributes.GetNamedItem("value");
                    err = "Error:  Resource - " + n.Value;
                    checkedOut.Add(new Guid(n.Value));

                    XmlNode childn = node.FirstChild;

                    if (childn.Name.Equals("error"))
                    {
                        XmlNode nodeItem = childn.Attributes.GetNamedItem("name");

                        switch (nodeItem.Value)
                        {
                            case "CICOAlreadyCheckedOutToYou":
                                err += "\n\t--already checked out to you.";
                                break;
                            case "CICOCheckedOutInOtherSession":
                                err += "\n\t--checked out in another session.";
                                break;
                            case "CICOCheckedOutToOtherUser":
                                err += "\n\t--checked out to another user.";
                                break;
                        }
                    }
                }
                Console.WriteLine(err);
            }
            return checkedOut;
        }
    }
}</code>
          <para>For the previous case where two resources are checked out, TestResourceCheckOut.exe returns the error results.</para>
          <code>C:\Project\Test&amp;gt;testresourcecheckout http://servername/pwa
Trying to check out resources ...
Error:  Resource - 09be4db3-129e-46b9-b47a-d66ff6f2cbd2
        --already checked out to you.
Error:  Resource - 50752a44-4b31-4f4c-bbfc-a54c10ec871a
        --checked out to another user.</code>
          <para>If none of the resources are checked out, the application successfully checks out the resources and then checks them back in.</para>
          <code>C:\Project\Test&amp;gt;testresourcecheckout http://servername/pwa
Trying to check out resources ...
Checkout succeeded.
Checked back in: 09be4db3-129e-46b9-b47a-d66ff6f2cbd2
Checked back in: 2e956742-bca3-4445-8d3b-8640b9ec3b26
Checked back in: cfb5216c-1f43-49f7-85e4-e0bab57dcdef</code>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageUsersAndGroups" />
              </term>
              <description>Allows a user to manage all enterprise users, resources and groups. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.EditEnterpriseResourceData" />
              </term>
              <description>Allows a user to view enterprise resource data for this resource. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example retrieves enterprise resources, creating several if they are not present, reads the resource using a resource filter, checks out each resource if available, updates the <b>RES_CODE</b> property of available resources, and checks the resources back in. It reports the before state, updates made, and the after state of the resources.</para>
          <para>Please see Prerequisites for Reference Code Samples for critical information on running this code sample.</para>
          <para>You can go to <b>Admin/AddModifyUser.aspx</b> on your Project Web App site to verify that the resource is checked out in another session</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.CheckInResources
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";

            SvcResource.ResourceDataSet resourceDs;
            PSLibrary.Filter resourceFilter;
            string filterXml;

            // Set up the Web service objects
            SvcResource.Resource resourceSvc = new SvcResource.Resource();

            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.Credentials = CredentialCache.DefaultCredentials;

            // Get the resources
            Console.WriteLine("Getting/Creating resources");
            Guid[] resources = EnsureEnterpriseResources(resourceSvc);

            // Read the resources so we can see what it looked like before.
            resourceFilter = GetResourceFilter(resources);
            filterXml = resourceFilter.GetXml();

            resourceDs = resourceSvc.ReadResources(filterXml, false);
            WriteTablesToConsole(resourceDs.Tables);

            // Check out resources so they can be modified
            Guid me = resourceSvc.GetCurrentUserUid();
            bool checkedOut =false;
            Random rand = new Random();
            // Modify the resources
            foreach(SvcResource.ResourceDataSet.ResourcesRow resourceRow in resourceDs.Resources)
            {
               Console.WriteLine("Check out " + resourceRow.RES_NAME);
               if (resourceRow.IsRES_CHECKOUTBYNull())
               {
                  resourceSvc.CheckOutResources(new Guid[] { resourceRow.RES_UID });
                  checkedOut=true;
               }
               else
               {
                  if (resourceRow.RES_CHECKOUTBY == me)
                  {
                     checkedOut = true;
                  }
                  else
                  {
                     checkedOut = false;
                     Console.WriteLine("\tCan't check out this resource, skip updating this one.");
                  }
               }
               if (checkedOut)
               {
                  SvcResource.ResourceDataSet updateDs = resourceSvc.ReadResource(resourceRow.RES_UID);
                  updateDs.Resources[0].RES_CODE = "A" + rand.Next(1000,9999) ;
                  Console.WriteLine("Update RES_CODE to " + updateDs.Resources[0].RES_CODE);
                  resourceSvc.UpdateResources(updateDs, false, false);
                  Console.WriteLine("Check in " + resourceRow.RES_NAME);
                  resourceSvc.CheckInResources(new Guid[] { resourceRow.RES_UID },false);
               }
               Console.ForegroundColor=ConsoleColor.Yellow;
               Console.WriteLine("".PadRight(30,'-'));
               Console.ResetColor();
            }

            // retrieve the data from the server for display
            resourceDs = resourceSvc.ReadResources(filterXml, false);
            WriteTablesToConsole(resourceDs.Tables);

         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }

      private static void WriteResourceState(SvcResource.ResourceDataSet resourceDs)
      {
         foreach (SvcResource.ResourceDataSet.ResourcesRow row in resourceDs.Resources.Rows)
         {
            // If the resource type is greater than the inactive offset, it is inactive.
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.Write(row.RES_NAME);
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.Write(" is ");
            if (row.RES_TYPE &amp;gt; (int)PSLibrary.Resource.Type.INACTIVATED_OFFSET)
            {
               Console.ForegroundColor = ConsoleColor.Red;
               Console.Write("Inactive\r\n");
            }
            else
            {
               Console.ForegroundColor = ConsoleColor.DarkGreen;
               Console.Write("Active\r\n");
            }
            Console.ResetColor();
         }
      }
      private static Guid[] EnsureEnterpriseResources(SvcResource.Resource resourceSvc)
      {
         string[] resourceNames = new string[] { "Lertchai Treetawatchaiwong", 
                                                 "Bricks", 
                                                 "Conference Room A",
                                                 "Rental"};
         PSLibrary.Resource.Type[] resourceTypes = new PSLibrary.Resource.Type[] { PSLibrary.Resource.Type.WorkResource, PSLibrary.Resource.Type.MaterialResource, PSLibrary.Resource.Type.WorkResource, PSLibrary.Resource.Type.CostResources };
         Guid[] resources = new Guid[resourceNames.Length];
         for (int i = 0; i &amp;lt; resourceNames.Length; i++)
         {
            resources[i] = EnsureEnterpriseResource(resourceSvc, resourceNames[i], resourceTypes[i]);
         }
         return resources;
      }
      private static Guid EnsureEnterpriseResource(SvcResource.Resource resourceSvc, string resourceName, PSLibrary.Resource.Type resourceType)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, resourceName);
         resourceFilter.Criteria = existingResource;
         string filterXml = resourceFilter.GetXml();
         resourceDs = resourceSvc.ReadResources(filterXml, false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs.Resources[0].RES_UID;
         }
         else
         {
            resourceDs = new SvcResource.ResourceDataSet();
            SvcResource.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
            resourceRow.RES_UID = Guid.NewGuid();
            resourceRow.RES_NAME = resourceName;
            resourceRow.RES_INITIALS = resourceName.Substring(0, 1) +
                              (resourceName.IndexOf(" ") &amp;gt; 0 ? resourceName.Substring(resourceName.IndexOf(" ") + 1, 1) : "");
            resourceRow.RES_TYPE = (int)resourceType;
            resourceDs.Resources.AddResourcesRow(resourceRow);
            resourceSvc.CreateResources(resourceDs, false, true);
            return resourceRow.RES_UID;
         }
      }

      private static PSLibrary.Filter GetResourceFilter(Guid[] resources)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();
         PSLibrary.Filter resourceFilter = new PSLibrary.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CODEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_ACCRUE_ATColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_BOOKING_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CAN_LEVELColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CHECKOUTBYColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CHECKOUTDATEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_COST_CENTERColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_DEF_ASSN_OWNERColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_EXTERNAL_IDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_GROUPColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HAS_NOTESColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HIRE_DATEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HYPERLINK_ADDRESSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HYPERLINK_FRIENDLY_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HYPERLINK_SUB_ADDRESSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_IDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_IS_TEAMColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_IS_WINDOWS_USERColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_MATERIAL_LABELColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         //resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NOTESColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_PHONETICSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_RTF_NOTESColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TERMINATION_DATEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TIMESHEET_MGR_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));


         //List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt; resourceFieldOps = new List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt;();
         PSLibrary.Filter.IOperator[] fos = new PSLibrary.Filter.IOperator[resources.Length];
         for (int i = 0; i &amp;lt; resources.Length; i++)
         {
            fos[i] = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_UIDColumn.ColumnName, resources[i]);
         }

         PSLibrary.Filter.LogicalOperator lo = new Microsoft.Office.Project.Server.Library.Filter.LogicalOperator(PSLibrary.Filter.LogicalOperationType.Or, fos);

         resourceFilter.Criteria = lo;
         return resourceFilter;
      }
      // Write all contents of a table collection to the console
      private static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // add a space so it won't wrap
            tableWidth += 1;
            // make the console as wide as the widest table
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  dataString = row[i].ToString();
                  // truncate output if it is wider than 
                  // the desired column width
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // Helper function for WriteTablesToConsole
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: may not handle byte[]data types well
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         //return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise use the max col width
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // truncate if over the max length
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // always be at least as wide as the colum name
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateDelegations">
      <MemberSignature Language="C#" Value="public void CreateDelegations (WebSvcResource.UserDelegationDataSet ds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateDelegations(class WebSvcResource.UserDelegationDataSet ds) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.CreateDelegations(WebSvcResource.UserDelegationDataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateDelegations (ds As UserDelegationDataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateDelegations(WebSvcResource::UserDelegationDataSet ^ ds);" />
      <MemberSignature Language="F#" Value="member this.CreateDelegations : WebSvcResource.UserDelegationDataSet -&gt; unit" Usage="resource.CreateDelegations ds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/CreateDelegations", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ds" Type="WebSvcResource.UserDelegationDataSet" />
      </Parameters>
      <Docs>
        <param name="ds">To be added.</param>
        <summary>Creates the delegation information used to manage resources.</summary>
        <remarks>
          <para />
          <para>This method does not return the project GUID and the resource GUID.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageMyDelegations" />
              </term>
              <description>Allows a user to manage his or her own user delegations.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageMyResourceDelegations" />
              </term>
              <description>Allows a user to manage his or her own resource delegations.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateResources">
      <MemberSignature Language="C#" Value="public WebSvcResource.ResourceDataSet CreateResources (WebSvcResource.ResourceDataSet rds, bool validateOnly, bool autoCheckIn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcResource.ResourceDataSet CreateResources(class WebSvcResource.ResourceDataSet rds, bool validateOnly, bool autoCheckIn) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.CreateResources(WebSvcResource.ResourceDataSet,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateResources (rds As ResourceDataSet, validateOnly As Boolean, autoCheckIn As Boolean) As ResourceDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcResource::ResourceDataSet ^ CreateResources(WebSvcResource::ResourceDataSet ^ rds, bool validateOnly, bool autoCheckIn);" />
      <MemberSignature Language="F#" Value="member this.CreateResources : WebSvcResource.ResourceDataSet * bool * bool -&gt; WebSvcResource.ResourceDataSet" Usage="resource.CreateResources (rds, validateOnly, autoCheckIn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/CreateResources", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcResource.ResourceDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rds" Type="WebSvcResource.ResourceDataSet" />
        <Parameter Name="validateOnly" Type="System.Boolean" />
        <Parameter Name="autoCheckIn" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rds">The <see cref="T:WebSvcResource.ResourceDataSet" /> containing the data for the new resources.</param>
        <param name="validateOnly">If <b>true</b>, only validates the data and does not create the new resources.</param>
        <param name="autoCheckIn">If <b>true</b>, automatically checks in the resource data.</param>
        <summary>Creates one or more enterprise work, material, or cost resources.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>If you pass in a null <see cref="T:WebSvcResource.ResourceDataSet" /> as the <paramref name="Rds" /> parameter, <b>CreateResources</b> doesn't throw an exception, but takes no action.</para>
          <para>
            <b>Note</b>: To add a work or cost resource availability date, specify a date only, not a time. For example, DateTime dt = DateTime(2011, 06, 26) or DateTime dt = DateTime(2011, 06, 26, 0, 0, 0) works because either value is the same date and time. DateTime dt = DateTime(2011, 06, 26, 9, 0, 0) causes a SOAP exception with the error <b>GeneralInvalidColumnValue</b> (error code 20000) when you try to create the resource.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageUsersAndGroups" />
              </term>
              <description>Allows a user to manage all enterprise users, resources and groups. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.NewResource" />
              </term>
              <description>Allows a user to create a new resource. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The WCF-based <b>CreateResourceTest</b> example does the following:</para>
          <list type="number">
            <item>
              <description>Parses the command arguments for resource name and percent availability.</description>
            </item>
            <item>
              <description>Creates a <b>ResourceDataSet</b> object that contains basic resource and availability data. </description>
            </item>
            <item>
              <description>Writes an XML file of the initial <b>ResourceDataSet</b> contents.</description>
            </item>
            <item>
              <description>Calls the <b>CreateResources</b> method, and then updates the <b>ResourceDataSet</b> object by calling the <b>ReadResource</b> method.</description>
            </item>
            <item>
              <description>Writes an XML file of the updated <b>ResourceDataSet</b> contents. Comparing the values you set with the two XML files shows the additional resource data that Project Server internally creates.</description>
            </item>
          </list>
          <para>For information about using the code sample in a Microsoft Visual Studio 2010 project and creating an app.config file for configuration of the WCF endpoint, see Prerequisites for WCF-Based Code Samples.</para>
          <code>using System;
using System.Text;
using System.ServiceModel;
using System.Xml;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.CreateResourceTest
{
    class Program
    {
        private const string ENDPOINT_RESOURCE = "basicHttp_Resource";
        // Change the output directory for your computer.
        private const string OUTPUT_FILES = @"C:\Project\Samples\Output\";
        private const string FILE_BEFORE = "ResourceDataSet_BeforeCreate.xml";
        private const string FILE_AFTER = "ResourceDataSet_AfterCreate.xml";

        private static SvcResource.ResourceClient resourceClient;

        private static string outFileResourceDs;
        private static string resourceName = string.Empty;
        private static double resAvailUnits = 0.0;

        static void Main(string[] args)
        {
            if (args.Length == 4)
            {
                if (args[0].ToLower() == "-name")
                {
                    resourceName = args[1];
                }
                if (args[2].ToLower() == "-units")
                {
                    // Units available, in percent.
                    resAvailUnits = Convert.ToDouble(args[3]);
                }
            }
            else
            {
                Console.WriteLine(@"Usage: CreateResourceTest -name ""Resource Name"" -units 100.0");
                Console.Write("\nPress any key to exit... ");
                Console.ReadKey(true);
                Environment.Exit(-1);
            }

            try
            {
                ConfigClientEndpoints(ENDPOINT_RESOURCE);
                Console.WriteLine("Creating ResourceDataSet...");

                SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();
                resourceDs = PopulateData(resourceDs, resourceName.Trim(), resAvailUnits);

                outFileResourceDs = OUTPUT_FILES + FILE_BEFORE;
                Console.WriteLine(
                    "\nXML output of the ResourceDataSet before CreateResource:\n\t{0}", outFileResourceDs);
                resourceDs.WriteXml(outFileResourceDs);

                Console.WriteLine("Calling CreateResources...");
                resourceClient.CreateResources(resourceDs, false, true);

                resourceDs = resourceClient.ReadResource(resourceDs.Resources[0].RES_UID);

                outFileResourceDs = OUTPUT_FILES + FILE_AFTER;
                Console.WriteLine(
                    "\nXML output of the ResourceDataSet after CreateResource:\n\t{0}", outFileResourceDs);
                resourceDs.WriteXml(outFileResourceDs);
            }
            catch (FaultException fault)
            {
                // Use the WCF FaultException, because the ASMX SoapException does not 
                // exist in a WCF-based application.
                WriteFaultOutput(fault);
            }
            catch (EndpointNotFoundException ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine("\nInnerException: \n" + ex.InnerException.Message);
            }
            catch (ServerTooBusyException ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine("\nInnerException: \n" + ex.InnerException.Message);
                Console.WriteLine("\nCheck that PWA is running. Can you log on?"
                    + "\nIs the endpoint address correct in app.config?");
            }
            Console.Write("\nPress any key to exit... ");
            Console.ReadKey(true);
        }

        
        // Populate the minimum data necessary in the ResourceDataSet, for the Resource 
        // table and for the ResourceAvailabilities table.
        private static SvcResource.ResourceDataSet PopulateData(
            SvcResource.ResourceDataSet resDs, string resName, double unitsAvail)
        {
            SvcResource.ResourceDataSet.ResourcesRow resRow = resDs.Resources.NewResourcesRow();
            SvcResource.ResourceDataSet.ResourceAvailabilitiesRow resAvailRow = 
                resDs.ResourceAvailabilities.NewResourceAvailabilitiesRow();

            resRow.RES_NAME = resName;
            resRow.RES_UID = Guid.NewGuid();
            resRow.RES_TYPE = (int)PSLibrary.Resource.Type.WorkResource;
            resRow.RES_INITIALS = resName.Substring(0, 1) 
                + (resName.IndexOf(" ") &amp;gt; 0
                ? resName.Substring(resName.IndexOf(" ") + 1, 1)
                : string.Empty);
            resDs.Resources.AddResourcesRow(resRow);

            resAvailRow.RES_UID = resRow.RES_UID;
            resAvailRow.SetRES_AVAIL_FROMNull();
            resAvailRow.SetRES_AVAIL_TONull();
            resAvailRow.RES_AVAIL_UNITS = unitsAvail;
            resDs.ResourceAvailabilities.AddResourceAvailabilitiesRow(resAvailRow);
            return resDs;
        }


        // Extract a PSClientError object from the WCF FaultException object, and
        // then display the exception details and each error in the PSClientError stack.
        private static void WriteFaultOutput(FaultException fault)
        {
            string errAttributeName;
            string errAttribute;
            string errOut;
            string errMess = "".PadRight(30, '=') + "\r\n"
                + "Error details: " + "\r\n";

            PSLibrary.PSClientError error = Helpers.GetPSClientError(fault, out errOut);
            errMess += errOut;

            if (error != null)
            {
                PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
                PSLibrary.PSErrorInfo thisError;

                for (int i = 0; i &amp;lt; errors.Length; i++)
                {
                    thisError = errors[i];
                    errMess += "\r\n".PadRight(30, '=') + "\r\nPSClientError output:\r\n";
                    errMess += thisError.ErrId.ToString() + "\n";

                    for (int j = 0; j &amp;lt; thisError.ErrorAttributes.Length; j++)
                    {
                        errAttributeName = thisError.ErrorAttributeNames()[j];
                        errAttribute = thisError.ErrorAttributes[j];
                        errMess += "\r\n\t" + errAttributeName
                            + ": " + errAttribute;
                    }
                }
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
            Console.ResetColor();
        }

        // Use the endpoints defined in app.config to configure the client.
        public static void ConfigClientEndpoints(string endpt)
        {
            if (endpt == ENDPOINT_RESOURCE)
                resourceClient = new SvcResource.ResourceClient(endpt);
        }
    }

    // Helper methods: WaitForQueue and GetPSClientError.
    class Helpers
    {
        // Wait for the queue jobs to complete.
        public static bool WaitForQueue(SvcQueueSystem.QueueMsgType jobType,
            SvcQueueSystem.QueueSystemClient queueSystemClient,
            DateTime startTime)
        {
            const int MAX_WAIT = 50;    // Maximum wait time.
            int numJobs = 1;            // Number of jobs in the queue.
            bool completed = false;     // Queue job completed.
            SvcQueueSystem.QueueStatusDataSet queueStatusDs =
                new SvcQueueSystem.QueueStatusDataSet();

            int timeout = 0;            // Number of seconds waited.
            Console.Write("Waiting for job: {0} ", jobType.ToString());

            SvcQueueSystem.QueueMsgType[] messageTypes = { jobType };
            SvcQueueSystem.JobState[] jobStates = { SvcQueueSystem.JobState.Success };

            while (timeout &amp;lt; MAX_WAIT)
            {
                System.Threading.Thread.Sleep(1000);    // Sleep one second.

                queueStatusDs = queueSystemClient.ReadMyJobStatus(
                    messageTypes,
                    jobStates,
                    startTime,
                    DateTime.Now,
                    numJobs,
                    true,
                    SvcQueueSystem.SortColumn.QueuePosition,
                    SvcQueueSystem.SortOrder.LastOrder);

                timeout++;
                Console.Write(".");
            }
            Console.WriteLine();

            if (queueStatusDs.Status.Count == numJobs)
                completed = true;
            return completed;
        }

        /// &amp;lt;summary&amp;gt;
        /// Extract a PSClientError object from the ServiceModel.FaultException,
        /// for use in output of the GetPSClientError stack of errors.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="e"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name="errOut"&amp;gt;Shows that FaultException has more information 
        /// about the errors than PSClientError has. FaultException can also contain 
        /// other types of errors, such as failure to connect to the server.&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;PSClientError object, for enumerating errors.&amp;lt;/returns&amp;gt;
        public static PSLibrary.PSClientError GetPSClientError(FaultException e,
                                                               out string errOut)
        {
            const string PREFIX = "GetPSClientError() returns null: ";
            errOut = string.Empty;
            PSLibrary.PSClientError psClientError = null;

            if (e == null)
            {
                errOut = PREFIX + "Null parameter (FaultException e) passed in.";
                psClientError = null;
            }
            else
            {
                // Get a ServiceModel.MessageFault object.
                var messageFault = e.CreateMessageFault();

                if (messageFault.HasDetail)
                {
                    using (var xmlReader = messageFault.GetReaderAtDetailContents())
                    {
                        var xml = new XmlDocument();
                        xml.Load(xmlReader);

                        var serverExecutionFault = xml["ServerExecutionFault"];
                        if (serverExecutionFault != null)
                        {
                            var exceptionDetails = serverExecutionFault["ExceptionDetails"];
                            if (exceptionDetails != null)
                            {
                                try
                                {
                                    errOut = exceptionDetails.InnerXml + "\r\n";
                                    psClientError =
                                        new PSLibrary.PSClientError(exceptionDetails.InnerXml);
                                }
                                catch (InvalidOperationException ex)
                                {
                                    errOut = PREFIX + "Unable to convert fault exception info ";
                                    errOut += "a valid Project Server error message. Message: \n\t";
                                    errOut += ex.Message;
                                    psClientError = null;
                                }
                            }
                            else
                            {
                                errOut = PREFIX + "The FaultException e is a ServerExecutionFault, "
                                    + "but does not have ExceptionDetails.";
                            }
                        }
                        else
                        {
                            errOut = PREFIX + "The FaultException e is not a ServerExecutionFault.";
                        }
                    }
                }
                else // No detail in the MessageFault.
                {
                    errOut = PREFIX + "The FaultException e does not have any detail.";
                }
            }
            errOut += "\r\n" + e.ToString() + "\r\n";
            return psClientError;
        }
    }
}</code>
          <para>When you run the command CreateResourceTest –name "Test Res1" –units 30, the application writes the ResourceDataSet_BeforeCreate.xml file with the following content:</para>
          <code>&amp;lt;?xml version="1.0" standalone="yes"?&amp;gt;
&amp;lt;ResourceDataSet xmlns="http://schemas.microsoft.com/office/project/server/webservices/ResourceDataSet/"&amp;gt;
  &amp;lt;Resources&amp;gt;
    &amp;lt;RES_UID&amp;gt;cf45c439-5320-438b-bc30-22a564f64fca&amp;lt;/RES_UID&amp;gt;
    &amp;lt;RES_ID&amp;gt;-1&amp;lt;/RES_ID&amp;gt;
    &amp;lt;RES_TYPE&amp;gt;2&amp;lt;/RES_TYPE&amp;gt;
    &amp;lt;RES_HAS_NOTES&amp;gt;false&amp;lt;/RES_HAS_NOTES&amp;gt;
    &amp;lt;RES_CAN_LEVEL&amp;gt;true&amp;lt;/RES_CAN_LEVEL&amp;gt;
    &amp;lt;RES_NAME&amp;gt;Test Res1&amp;lt;/RES_NAME&amp;gt;
    &amp;lt;RES_INITIALS&amp;gt;TR&amp;lt;/RES_INITIALS&amp;gt;
    &amp;lt;RES_IS_TEAM&amp;gt;false&amp;lt;/RES_IS_TEAM&amp;gt;
    &amp;lt;RES_EXCHANGE_SYNC&amp;gt;false&amp;lt;/RES_EXCHANGE_SYNC&amp;gt;
  &amp;lt;/Resources&amp;gt;
  &amp;lt;ResourceAvailabilities&amp;gt;
    &amp;lt;RES_UID&amp;gt;cf45c439-5320-438b-bc30-22a564f64fca&amp;lt;/RES_UID&amp;gt;
    &amp;lt;RES_AVAIL_UNITS&amp;gt;30&amp;lt;/RES_AVAIL_UNITS&amp;gt;
  &amp;lt;/ResourceAvailabilities&amp;gt;
&amp;lt;/ResourceDataSet&amp;gt;</code>
          <para>After creating the resource and updating the <b>ResourceDataSet</b> by using <b>ReadResource</b>, the ResourceDataSet_AfterCreate.xml file contains the following:</para>
          <code>&amp;lt;?xml version="1.0" standalone="yes"?&amp;gt;
&amp;lt;ResourceDataSet xmlns="http://schemas.microsoft.com/office/project/server/webservices/ResourceDataSet/"&amp;gt;
  &amp;lt;Resources&amp;gt;
    &amp;lt;RES_UID&amp;gt;6004cee6-e74a-4389-a5e0-d6925a79e5b8&amp;lt;/RES_UID&amp;gt;
    &amp;lt;RES_ID&amp;gt;13&amp;lt;/RES_ID&amp;gt;
    &amp;lt;RES_TYPE&amp;gt;2&amp;lt;/RES_TYPE&amp;gt;
    &amp;lt;RES_HAS_NOTES&amp;gt;false&amp;lt;/RES_HAS_NOTES&amp;gt;
    &amp;lt;RES_CAN_LEVEL&amp;gt;true&amp;lt;/RES_CAN_LEVEL&amp;gt;
    &amp;lt;RES_ACCRUE_AT&amp;gt;3&amp;lt;/RES_ACCRUE_AT&amp;gt;
    &amp;lt;RES_BOOKING_TYPE&amp;gt;0&amp;lt;/RES_BOOKING_TYPE&amp;gt;
    &amp;lt;RES_NAME&amp;gt;Test Res47&amp;lt;/RES_NAME&amp;gt;
    &amp;lt;RES_INITIALS&amp;gt;TR&amp;lt;/RES_INITIALS&amp;gt;
    &amp;lt;RES_IS_WINDOWS_USER&amp;gt;false&amp;lt;/RES_IS_WINDOWS_USER&amp;gt;
    &amp;lt;RES_TIMESHEET_MGR_UID&amp;gt;6004cee6-e74a-4389-a5e0-d6925a79e5b8&amp;lt;/RES_TIMESHEET_MGR_UID&amp;gt;
    &amp;lt;RES_DEF_ASSN_OWNER&amp;gt;6004cee6-e74a-4389-a5e0-d6925a79e5b8&amp;lt;/RES_DEF_ASSN_OWNER&amp;gt;
    &amp;lt;RES_IS_TEAM&amp;gt;false&amp;lt;/RES_IS_TEAM&amp;gt;
    &amp;lt;RES_EXCHANGE_SYNC&amp;gt;false&amp;lt;/RES_EXCHANGE_SYNC&amp;gt;
    &amp;lt;CREATED_DATE&amp;gt;2010-12-08T08:12:50.377-08:00&amp;lt;/CREATED_DATE&amp;gt;
    &amp;lt;MOD_DATE&amp;gt;2010-12-08T08:12:50.38-08:00&amp;lt;/MOD_DATE&amp;gt;
    &amp;lt;RES_STD_RATE_FMT&amp;gt;2&amp;lt;/RES_STD_RATE_FMT&amp;gt;
    &amp;lt;RES_OVT_RATE_FMT&amp;gt;2&amp;lt;/RES_OVT_RATE_FMT&amp;gt;
    &amp;lt;RES_MAX_UNITS&amp;gt;3000.000000&amp;lt;/RES_MAX_UNITS&amp;gt;
    &amp;lt;RES_PREVENT_ADSYNC&amp;gt;false&amp;lt;/RES_PREVENT_ADSYNC&amp;gt;
    &amp;lt;BaseCalendarUniqueId&amp;gt;b6635b2e-e747-4771-a78b-24f7509629d0&amp;lt;/BaseCalendarUniqueId&amp;gt;
  &amp;lt;/Resources&amp;gt;
  &amp;lt;ResourceAvailabilities&amp;gt;
    &amp;lt;RES_UID&amp;gt;6004cee6-e74a-4389-a5e0-d6925a79e5b8&amp;lt;/RES_UID&amp;gt;
    &amp;lt;RES_AVAIL_UNITS&amp;gt;30&amp;lt;/RES_AVAIL_UNITS&amp;gt;
  &amp;lt;/ResourceAvailabilities&amp;gt;
&amp;lt;/ResourceDataSet&amp;gt;</code>
          <para>Comparing the two files shows, for example, that Project Server internally sets the <b>RES_MAX_UNITS</b> property with a value that corresponds to the <b>RES_AVAIL_UNITS</b> property value.</para>
          <para>The following example creates two work resources, a material resource, and a cost resource. It does not check for pre-existing resources and reports an error if a resource already exists. The example also adds a <b>ResourceAvailabilitiesDataTable</b> for the work and cost resources and specifies the <b>RES_AVAIL_FROM</b> and <b>RES_AVAIL_UNITS</b> values.</para>
          <para>You can use the example in <see cref="M:WebSvcResource.Resource.DeleteResources(System.Guid[],System.String)" /> to delete the resources, or to manually delete resources, go to the Server Settings of your Project Web App and choose Delete Enterprise Objects (for example, http://ServerName/pwa/_layouts/pwa/admin/admin.aspx).</para>
          <para>Please see Prerequisites for Reference Code Samples for critical information on running this code sample.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.CreateResources
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://DevDocPj12/PWA/";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";

            SvcResource.ResourceDataSet resourceDs;

            // Set up the Web service objects
            SvcResource.Resource resourceSvc = new SvcResource.Resource();

            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.Credentials = CredentialCache.DefaultCredentials;

            // Set up the resources
            Console.WriteLine("Set up the resources");
            resourceDs = new SvcResource.ResourceDataSet();
            // NOTE: Resource names must be unique. Open Server Settings - Delete Enterprise Objects   
            //       in Project Web App to delete resources, if you have previously run 
            //       the resource code sample.
            string[] resourceNames = new string[] { "Charlotte Weiss", 
                                                    "Bricks", 
                                                    "Conference Room A",
                                                    "Rental" 
                                                  };
            PSLibrary.Resource.Type[] resourceTypes = 
                new PSLibrary.Resource.Type[] { 
                    PSLibrary.Resource.Type.WorkResource, 
                    PSLibrary.Resource.Type.MaterialResource, 
                    PSLibrary.Resource.Type.WorkResource, 
                    PSLibrary.Resource.Type.CostResources 
               };
            Guid[] resources = new Guid[resourceNames.Length];
            for (int i = 0; i &amp;lt; resourceNames.Length; i++)
            {
               SvcResource.ResourceDataSet.ResourcesRow resourceRow = 
                   resourceDs.Resources.NewResourcesRow();
               resourceRow.RES_UID = Guid.NewGuid();
               resources[i] = resourceRow.RES_UID;
               resourceRow.RES_NAME = resourceNames[i];
               resourceRow.RES_INITIALS = resourceNames[i].Substring(0, 1) +
                                 (resourceNames[i].IndexOf(" ") &amp;gt; 0 
                                 ? resourceNames[i].Substring(resourceNames[i].IndexOf(" ") + 1, 1) 
                                 : "");
               resourceRow.RES_TYPE = (int)resourceTypes[i];
               resourceDs.Resources.AddResourcesRow(resourceRow);

               // To add work or cost resource availability, specify a date only, not a time.
               // DateTime(2011, 06, 26) or DateTime(2011, 06, 26, 0, 0, 0) is OK.
               // DateTime(2011, 06, 26, 9, 0, 0) causes a Soap exception.
               // The default availability is the current date, and 100 RES_AVAIL_UNITS.

               if (i != 1)  // Can't add availability for material resources.
               {
                  SvcResource.ResourceDataSet.ResourceAvailabilitiesRow availRow =
                     resourceDs.ResourceAvailabilities.NewResourceAvailabilitiesRow();
                  availRow.RES_UID = resourceRow.RES_UID;

                  DateTime dt = new DateTime(2011, 06, 26);
                  dt = DateTime.SpecifyKind(dt, DateTimeKind.Local);  // Optional.
                  availRow.RES_AVAIL_FROM = dt;
                  availRow.RES_AVAIL_TO = new DateTime(2011, 7, 1);
                  availRow.RES_AVAIL_UNITS = 100.0;

                  SvcResource.ResourceDataSet.ResourcesRow resRow = 
                     (SvcResource.ResourceDataSet.ResourcesRow)resourceDs.Resources.Rows[i];
                  availRow.ResourcesRow = resRow;

                  resourceDs.ResourceAvailabilities.AddResourceAvailabilitiesRow(availRow);
               }
            }

            Console.WriteLine("Save the data to the server");
            resourceSvc.CreateResources(resourceDs, false, true);

            // retrieve the data from the server for display
            Console.WriteLine("Retrieve the data just created and display");
            PSLibrary.Filter resourceFilter = GetResourceFilter(resources);
            string filterXml = resourceFilter.GetXml();
            resourceDs = resourceSvc.ReadResources(filterXml, false);
            WriteTablesToConsole(resourceDs.Tables);
         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + 
                      errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }

      private static void WriteResourceState(SvcResource.ResourceDataSet resourceDs)
      {
         foreach (SvcResource.ResourceDataSet.ResourcesRow row in resourceDs.Resources.Rows)
         {
            // If the resource type is greater than the inactive offset, it is inactive.
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.Write(row.RES_NAME);
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.Write(" is ");
            if (row.RES_TYPE &amp;gt; (int)PSLibrary.Resource.Type.INACTIVATED_OFFSET)
            {
               Console.ForegroundColor = ConsoleColor.Red;
               Console.Write("Inactive\r\n");
            }
            else
            {
               Console.ForegroundColor = ConsoleColor.DarkGreen;
               Console.Write("Active\r\n");
            }
            Console.ResetColor();
         }
      }
      
      private static PSLibrary.Filter GetResourceFilter(Guid[] resources)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();
         PSLibrary.Filter resourceFilter = new PSLibrary.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_UIDColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_NAMEColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_INITIALSColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_TYPEColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_CODEColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_ACCRUE_ATColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_BOOKING_TYPEColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_CAN_LEVELColumn.ColumnName, 
             
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_CHECKOUTBYColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_CHECKOUTDATEColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_COST_CENTERColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_DEF_ASSN_OWNERColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_EXTERNAL_IDColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_GROUPColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_HAS_NOTESColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_HIRE_DATEColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_HYPERLINK_ADDRESSColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_HYPERLINK_FRIENDLY_NAMEColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_HYPERLINK_SUB_ADDRESSColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_IDColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_IS_TEAMColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_IS_WINDOWS_USERColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_MATERIAL_LABELColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_PHONETICSColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_RTF_NOTESColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_TERMINATION_DATEColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
             resourceDs.Resources.RES_TIMESHEET_MGR_UIDColumn.ColumnName, 
             PSLibrary.Filter.SortOrderTypeEnum.None));

         PSLibrary.Filter.IOperator[] fos = new PSLibrary.Filter.IOperator[resources.Length];

         for (int i = 0; i &amp;lt; resources.Length; i++)
         {
            fos[i] = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, 
                resourceDs.Resources.RES_UIDColumn.ColumnName, resources[i]);
         }

         PSLibrary.Filter.LogicalOperator lo = 
             new Microsoft.Office.Project.Server.Library.Filter.LogicalOperator(
                PSLibrary.Filter.LogicalOperationType.Or, fos);

         resourceFilter.Criteria = lo;
         return resourceFilter;
      }
      // Write all contents of a table collection to the console
      private static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // add a space so it won't wrap
            tableWidth += 1;
            // make the console as wide as the widest table
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth 
                ? Console.BufferWidth 
                : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  dataString = row[i].ToString();
                  // truncate output if it is wider than 
                  // the desired column width
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // Helper function for WriteTablesToConsole
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: may not handle byte[]data types well
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         //return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise use the max col width
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // truncate if over the max length
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // always be at least as wide as the colum name
         return (column.ColumnName.Length &amp;gt; (dataWidth) 
            ? column.ColumnName.Length + 1 
            : dataWidth);
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeactivateResources">
      <MemberSignature Language="C#" Value="public void DeactivateResources (Guid[] resourceGuids, bool validateOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeactivateResources(valuetype System.Guid[] resourceGuids, bool validateOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.DeactivateResources(System.Guid[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeactivateResources (resourceGuids As Guid(), validateOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeactivateResources(cli::array &lt;Guid&gt; ^ resourceGuids, bool validateOnly);" />
      <MemberSignature Language="F#" Value="member this.DeactivateResources : Guid[] * bool -&gt; unit" Usage="resource.DeactivateResources (resourceGuids, validateOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/DeactivateResources", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGuids" Type="System.Guid[]" />
        <Parameter Name="validateOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="resourceGuids">Array of Guids of the enterprise resources to deactivate.</param>
        <param name="validateOnly">If <b>true</b>, only validates the data and does not deactivate the resources.</param>
        <summary>Deactivates one or more enterprise resources.</summary>
        <remarks>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageUsersAndGroups" />
              </term>
              <description>Allows a user to manage resources, users and groups. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>This example retrieves enterprise resources, creating several if they are not present. It then deativates these resources and reactivates them.</para>
          <para>Please see Prerequisites for Reference Code Samples for critical information on running this code sample.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.DeactivateResources
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";

            SvcResource.ResourceDataSet resourceDs;
            PSLibrary.Filter resourceFilter;

            // Set up the Web service objects
            SvcResource.Resource resourceSvc = new SvcResource.Resource();

            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.Credentials = CredentialCache.DefaultCredentials;

            // Get the resources
            Console.WriteLine("Getting/Creating resources");
            Guid[] resources = EnsureEnterpriseResources(resourceSvc);

            // Deactivate resources.
            Console.WriteLine("Deactivating resources");
            resourceSvc.DeactivateResources(resources, false);

            resourceFilter = GetResourceFilter(resources);
            resourceDs = resourceSvc.ReadResources(resourceFilter.GetXml(), false);

            WriteResourceState(resourceDs);

            // Activate Resources so we can use them later if we want
            Console.WriteLine("Activating resources");
            resourceSvc.ActivateResources(resources, false);

            resourceDs = resourceSvc.ReadResources(resourceFilter.GetXml(), false);
            WriteResourceState(resourceDs);
         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }

      private static void WriteResourceState(SvcResource.ResourceDataSet resourceDs)
      {
         foreach (SvcResource.ResourceDataSet.ResourcesRow row in resourceDs.Resources.Rows)
         {
            // If the resource type is greater than the inactive offset, it is inactive.
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.Write(row.RES_NAME);
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.Write(" is ");
            if (row.RES_TYPE &amp;gt; (int)PSLibrary.Resource.Type.INACTIVATED_OFFSET)
            {
               Console.ForegroundColor = ConsoleColor.Red;
               Console.Write("Inactive\r\n");
            }
            else
            {
               Console.ForegroundColor = ConsoleColor.DarkGreen;
               Console.Write("Active\r\n");
            }
            Console.ResetColor();
         }
      }
      private static Guid[] EnsureEnterpriseResources(SvcResource.Resource resourceSvc)
      {
         string[] resourceNames = new string[] { "Lertchai Treetawatchaiwong", 
                                                 "Bricks", 
                                                 "Conference Room A",
                                                 "Rental"};
         PSLibrary.Resource.Type[] resourceTypes = new PSLibrary.Resource.Type[] { PSLibrary.Resource.Type.WorkResource, PSLibrary.Resource.Type.MaterialResource, PSLibrary.Resource.Type.WorkResource, PSLibrary.Resource.Type.CostResources };
         Guid[] resources = new Guid[resourceNames.Length];
         for (int i = 0; i &amp;lt; resourceNames.Length; i++)
         {
            resources[i] = EnsureEnterpriseResource(resourceSvc, resourceNames[i], resourceTypes[i]);
         }
         return resources;
      }
      private static Guid EnsureEnterpriseResource(SvcResource.Resource resourceSvc, string resourceName, PSLibrary.Resource.Type resourceType)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, resourceName);
         resourceFilter.Criteria = existingResource;
         string filterXml = resourceFilter.GetXml();
         resourceDs = resourceSvc.ReadResources(filterXml, false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs.Resources[0].RES_UID;
         }
         else
         {
            resourceDs = new SvcResource.ResourceDataSet();
            SvcResource.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
            resourceRow.RES_UID = Guid.NewGuid();
            resourceRow.RES_NAME = resourceName;
            resourceRow.RES_INITIALS = resourceName.Substring(0, 1) +
                              (resourceName.IndexOf(" ") &amp;gt; 0 ? resourceName.Substring(resourceName.IndexOf(" ") + 1, 1) : "");
            resourceRow.RES_TYPE = (int)resourceType;
            resourceDs.Resources.AddResourcesRow(resourceRow);
            resourceSvc.CreateResources(resourceDs, false, true);
            return resourceRow.RES_UID;
         }
      }

      private static PSLibrary.Filter GetResourceFilter(Guid[] resources)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();
         PSLibrary.Filter resourceFilter = new PSLibrary.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         //List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt; resourceFieldOps = new List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt;();
         PSLibrary.Filter.IOperator[] fos = new PSLibrary.Filter.IOperator[resources.Length];
         for (int i = 0; i &amp;lt; resources.Length; i++)
         {
            fos[i] = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_UIDColumn.ColumnName, resources[i]);
         }

         PSLibrary.Filter.LogicalOperator lo = new Microsoft.Office.Project.Server.Library.Filter.LogicalOperator(PSLibrary.Filter.LogicalOperationType.Or, fos);

         resourceFilter.Criteria = lo;
         return resourceFilter;
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteDelegations">
      <MemberSignature Language="C#" Value="public void DeleteDelegations (Guid[] delegationsUids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteDelegations(valuetype System.Guid[] delegationsUids) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.DeleteDelegations(System.Guid[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDelegations (delegationsUids As Guid())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDelegations(cli::array &lt;Guid&gt; ^ delegationsUids);" />
      <MemberSignature Language="F#" Value="member this.DeleteDelegations : Guid[] -&gt; unit" Usage="resource.DeleteDelegations delegationsUids" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/DeleteDelegations", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegationsUids" Type="System.Guid[]" />
      </Parameters>
      <Docs>
        <param name="delegationsUids">To be added.</param>
        <summary>Deletes the delegation information used to manage resources.</summary>
        <remarks>
          <para />
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageMyDelegations" />
              </term>
              <description>Allows a user to manage his or her own user delegations.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageMyResourceDelegations" />
              </term>
              <description>Allows a user to manage his or her own resource delegations.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteResources">
      <MemberSignature Language="C#" Value="public void DeleteResources (Guid[] arrayRes, string deletionComment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteResources(valuetype System.Guid[] arrayRes, string deletionComment) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.DeleteResources(System.Guid[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteResources (arrayRes As Guid(), deletionComment As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteResources(cli::array &lt;Guid&gt; ^ arrayRes, System::String ^ deletionComment);" />
      <MemberSignature Language="F#" Value="member this.DeleteResources : Guid[] * string -&gt; unit" Usage="resource.DeleteResources (arrayRes, deletionComment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/DeleteResources", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrayRes" Type="System.Guid[]" />
        <Parameter Name="deletionComment" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="arrayRes">Guids of the resources to delete.</param>
        <param name="deletionComment">A brief note describing the deletion. This comment is sent to any affected project manager when a resource in their project changes from an enterprise resource to a local resource.</param>
        <summary>Deletes one or more enterprise resources or users.</summary>
        <remarks>
          <para>The resource must be checked out before it can be deleted. </para>
          <para>A resource may not be deleted if the resource:</para>
          <list type="bullet">
            <item>
              <description>Has anything checked out</description>
            </item>
            <item>
              <description>Is the current user</description>
            </item>
            <item>
              <description>Owns a project</description>
            </item>
            <item>
              <description>Is a timesheet manager</description>
            </item>
            <item>
              <description>Owns an assignment</description>
            </item>
            <item>
              <description>Is the default assignment owner</description>
            </item>
            <item>
              <description>Is used in a resource plan</description>
            </item>
          </list>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.CleanupProjectServerDatabase" />
              </term>
              <description>Allows a user to delete information from the database. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example creates several resources, retrieving them if they already exist, reports them, and then deletes them.</para>
          <para>Please see Prerequisites for Reference Code Samples for critical information on running this code sample.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.DeleteResources
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";

            SvcResource.ResourceDataSet resourceDs;

            // Set up the Web service objects
            SvcResource.Resource resourceSvc = new SvcResource.Resource();

            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.Credentials = CredentialCache.DefaultCredentials;

            // Get the resources
            Console.WriteLine("Getting/Creating resources");
            Guid[] resources = EnsureEnterpriseResources(resourceSvc);
           
            // retrieve the data from the server for display
            Console.WriteLine("Retrieve the data just created and display");
            PSLibrary.Filter resourceFilter = GetResourceFilter(resources);
            string filterXml = resourceFilter.GetXml();
            resourceDs = resourceSvc.ReadResources(filterXml, false);
            WriteTablesToConsole(resourceDs.Tables);

            // Check out resources
            Console.WriteLine("Check out resources");
            resourceSvc.CheckOutResources(resources);

            // Delete the resources
            Console.WriteLine("Deleting resources");
            resourceSvc.DeleteResources(resources, "Deletion Utility Test");
            
            // Display absence of resources
            Console.WriteLine("See? They're gone...");
            resourceDs = resourceSvc.ReadResources(filterXml, false);
            WriteTablesToConsole(resourceDs.Tables);
         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }

      private static void WriteResourceState(SvcResource.ResourceDataSet resourceDs)
      {
         foreach (SvcResource.ResourceDataSet.ResourcesRow row in resourceDs.Resources.Rows)
         {
            // If the resource type is greater than the inactive offset, it is inactive.
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.Write(row.RES_NAME);
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.Write(" is ");
            if (row.RES_TYPE &amp;gt; (int)PSLibrary.Resource.Type.INACTIVATED_OFFSET)
            {
               Console.ForegroundColor = ConsoleColor.Red;
               Console.Write("Inactive\r\n");
            }
            else
            {
               Console.ForegroundColor = ConsoleColor.DarkGreen;
               Console.Write("Active\r\n");
            }
            Console.ResetColor();
         }
      }
      private static Guid[] EnsureEnterpriseResources(SvcResource.Resource resourceSvc)
      {
         string[] resourceNames = new string[] { "Lertchai Treetawatchaiwong", 
                                                 "Bricks", 
                                                 "Conference Room A",
                                                 "Rental"};
         PSLibrary.Resource.Type[] resourceTypes = new PSLibrary.Resource.Type[] { PSLibrary.Resource.Type.WorkResource, PSLibrary.Resource.Type.MaterialResource, PSLibrary.Resource.Type.WorkResource, PSLibrary.Resource.Type.CostResources };
         Guid[] resources = new Guid[resourceNames.Length];
         for (int i = 0; i &amp;lt; resourceNames.Length; i++)
         {
            resources[i] = EnsureEnterpriseResource(resourceSvc, resourceNames[i], resourceTypes[i]);
         }
         return resources;
      }
      private static Guid EnsureEnterpriseResource(SvcResource.Resource resourceSvc, string resourceName, PSLibrary.Resource.Type resourceType)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, resourceName);
         resourceFilter.Criteria = existingResource;
         string filterXml = resourceFilter.GetXml();
         resourceDs = resourceSvc.ReadResources(filterXml, false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs.Resources[0].RES_UID;
         }
         else
         {
            resourceDs = new SvcResource.ResourceDataSet();
            SvcResource.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
            resourceRow.RES_UID = Guid.NewGuid();
            resourceRow.RES_NAME = resourceName;
            resourceRow.RES_INITIALS = resourceName.Substring(0, 1) +
                              (resourceName.IndexOf(" ") &amp;gt; 0 ? resourceName.Substring(resourceName.IndexOf(" ") + 1, 1) : "");
            resourceRow.RES_TYPE = (int)resourceType;
            resourceDs.Resources.AddResourcesRow(resourceRow);
            resourceSvc.CreateResources(resourceDs, false, true);
            return resourceRow.RES_UID;
         }
      }

      private static PSLibrary.Filter GetResourceFilter(Guid[] resources)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();
         PSLibrary.Filter resourceFilter = new PSLibrary.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         //List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt; resourceFieldOps = new List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt;();
         PSLibrary.Filter.IOperator[] fos = new PSLibrary.Filter.IOperator[resources.Length];
         for (int i = 0; i &amp;lt; resources.Length; i++)
         {
            fos[i] = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_UIDColumn.ColumnName, resources[i]);
         }

         PSLibrary.Filter.LogicalOperator lo = new Microsoft.Office.Project.Server.Library.Filter.LogicalOperator(PSLibrary.Filter.LogicalOperationType.Or, fos);

         resourceFilter.Criteria = lo;
         return resourceFilter;
      }
      private static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // add a space so it won't wrap
            tableWidth += 1;
            // make the console as wide as the widest table
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  dataString = row[i].ToString();
                  // truncate output if it is wider than 
                  // the desired column width
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // Helper function for WriteTablesToConsole
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: may not handle byte[]data types well
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         //return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise use the max col width
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // truncate if over the max length
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // always be at least as wide as the colum name
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentUserUid">
      <MemberSignature Language="C#" Value="public Guid GetCurrentUserUid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid GetCurrentUserUid() cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.GetCurrentUserUid" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentUserUid () As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Guid GetCurrentUserUid();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentUserUid : unit -&gt; Guid" Usage="resource.GetCurrentUserUid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/GetCurrentUserUid", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the GUID of the user logged in to Project Server.</summary>
        <returns>GUID of the current logged in user.</returns>
        <remarks>
          <para>The user logged into the Project Server may be different than the current Windows user.</para>
          <para>Project Server Permissions</para>
          <para>No permissions are required.</para>
          <para />
        </remarks>
        <example>
          <para>This example retrieves enterprise resources, creating several if they are not present, reads the resource using a resource filter, checks out each resource if available, updates the <b>RES_CODE</b> property of available resources, and checks the resources back in. It reports the before state, updates made, and the after state of the resources.</para>
          <para>It uses the current user ID to determine if the resource is checked out to the current user.</para>
          <para>Please see Prerequisites for Reference Code Samples for critical information on running this code sample.</para>
          <code>SvcResource.Resource resourceSvc = new Resource();
using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.CheckInResources
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";

            SvcResource.ResourceDataSet resourceDs;
            PSLibrary.Filter resourceFilter;
            string filterXml;

            // Set up the Web service objects
            SvcResource.Resource resourceSvc = new SvcResource.Resource();

            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.Credentials = CredentialCache.DefaultCredentials;

            // Get the resources
            Console.WriteLine("Getting/Creating resources");
            Guid[] resources = EnsureEnterpriseResources(resourceSvc);

            // Read the resources so we can see what it looked like before.
            resourceFilter = GetResourceFilter(resources);
            filterXml = resourceFilter.GetXml();

            resourceDs = resourceSvc.ReadResources(filterXml, false);
            WriteTablesToConsole(resourceDs.Tables);

            // Check out resources so they can be modified
            Guid me = resourceSvc.GetCurrentUserUid();
            bool checkedOut =false;
            Random rand = new Random();
            // Modify the resources
            foreach(SvcResource.ResourceDataSet.ResourcesRow resourceRow in resourceDs.Resources)
            {
               Console.WriteLine("Check out " + resourceRow.RES_NAME);
               if (resourceRow.IsRES_CHECKOUTBYNull())
               {
                  resourceSvc.CheckOutResources(new Guid[] { resourceRow.RES_UID });
                  checkedOut=true;
               }
               else
               {
                  if (resourceRow.RES_CHECKOUTBY == me)
                  {
                     checkedOut = true;
                  }
                  else
                  {
                     checkedOut = false;
                     Console.WriteLine("\tCan't check out this resource, skip updating this one.");
                  }
               }
               if (checkedOut)
               {
                  SvcResource.ResourceDataSet updateDs = resourceSvc.ReadResource(resourceRow.RES_UID);
                  updateDs.Resources[0].RES_CODE = "A" + rand.Next(1000,9999) ;
                  Console.WriteLine("Update RES_CODE to " + updateDs.Resources[0].RES_CODE);
                  resourceSvc.UpdateResources(updateDs, false, false);
                  Console.WriteLine("Check in " + resourceRow.RES_NAME);
                  resourceSvc.CheckInResources(new Guid[] { resourceRow.RES_UID },false);
               }
               Console.ForegroundColor=ConsoleColor.Yellow;
               Console.WriteLine("".PadRight(30,'-'));
               Console.ResetColor();
            }

            // retrieve the data from the server for display
            resourceDs = resourceSvc.ReadResources(filterXml, false);
            WriteTablesToConsole(resourceDs.Tables);

         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }

      private static void WriteResourceState(SvcResource.ResourceDataSet resourceDs)
      {
         foreach (SvcResource.ResourceDataSet.ResourcesRow row in resourceDs.Resources.Rows)
         {
            // If the resource type is greater than the inactive offset, it is inactive.
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.Write(row.RES_NAME);
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.Write(" is ");
            if (row.RES_TYPE &amp;gt; (int)PSLibrary.Resource.Type.INACTIVATED_OFFSET)
            {
               Console.ForegroundColor = ConsoleColor.Red;
               Console.Write("Inactive\r\n");
            }
            else
            {
               Console.ForegroundColor = ConsoleColor.DarkGreen;
               Console.Write("Active\r\n");
            }
            Console.ResetColor();
         }
      }
      private static Guid[] EnsureEnterpriseResources(SvcResource.Resource resourceSvc)
      {
         string[] resourceNames = new string[] { "Lertchai Treetawatchaiwong", 
                                                 "Bricks", 
                                                 "Conference Room A",
                                                 "Rental"};
         PSLibrary.Resource.Type[] resourceTypes = new PSLibrary.Resource.Type[] { PSLibrary.Resource.Type.WorkResource, PSLibrary.Resource.Type.MaterialResource, PSLibrary.Resource.Type.WorkResource, PSLibrary.Resource.Type.CostResources };
         Guid[] resources = new Guid[resourceNames.Length];
         for (int i = 0; i &amp;lt; resourceNames.Length; i++)
         {
            resources[i] = EnsureEnterpriseResource(resourceSvc, resourceNames[i], resourceTypes[i]);
         }
         return resources;
      }
      private static Guid EnsureEnterpriseResource(SvcResource.Resource resourceSvc, string resourceName, PSLibrary.Resource.Type resourceType)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, resourceName);
         resourceFilter.Criteria = existingResource;
         string filterXml = resourceFilter.GetXml();
         resourceDs = resourceSvc.ReadResources(filterXml, false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs.Resources[0].RES_UID;
         }
         else
         {
            resourceDs = new SvcResource.ResourceDataSet();
            SvcResource.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
            resourceRow.RES_UID = Guid.NewGuid();
            resourceRow.RES_NAME = resourceName;
            resourceRow.RES_INITIALS = resourceName.Substring(0, 1) +
                              (resourceName.IndexOf(" ") &amp;gt; 0 ? resourceName.Substring(resourceName.IndexOf(" ") + 1, 1) : "");
            resourceRow.RES_TYPE = (int)resourceType;
            resourceDs.Resources.AddResourcesRow(resourceRow);
            resourceSvc.CreateResources(resourceDs, false, true);
            return resourceRow.RES_UID;
         }
      }

      private static PSLibrary.Filter GetResourceFilter(Guid[] resources)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();
         PSLibrary.Filter resourceFilter = new PSLibrary.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CODEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_ACCRUE_ATColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_BOOKING_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CAN_LEVELColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CHECKOUTBYColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CHECKOUTDATEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_COST_CENTERColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_DEF_ASSN_OWNERColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_EXTERNAL_IDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_GROUPColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HAS_NOTESColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HIRE_DATEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HYPERLINK_ADDRESSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HYPERLINK_FRIENDLY_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HYPERLINK_SUB_ADDRESSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_IDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_IS_TEAMColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_IS_WINDOWS_USERColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_MATERIAL_LABELColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         //resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NOTESColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_PHONETICSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_RTF_NOTESColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TERMINATION_DATEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TIMESHEET_MGR_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));


         //List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt; resourceFieldOps = new List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt;();
         PSLibrary.Filter.IOperator[] fos = new PSLibrary.Filter.IOperator[resources.Length];
         for (int i = 0; i &amp;lt; resources.Length; i++)
         {
            fos[i] = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_UIDColumn.ColumnName, resources[i]);
         }

         PSLibrary.Filter.LogicalOperator lo = new Microsoft.Office.Project.Server.Library.Filter.LogicalOperator(PSLibrary.Filter.LogicalOperationType.Or, fos);

         resourceFilter.Criteria = lo;
         return resourceFilter;
      }
      // Write all contents of a table collection to the console
      private static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // add a space so it won't wrap
            tableWidth += 1;
            // make the console as wide as the widest table
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  dataString = row[i].ToString();
                  // truncate output if it is wider than 
                  // the desired column width
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // Helper function for WriteTablesToConsole
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: may not handle byte[]data types well
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         //return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise use the max col width
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // truncate if over the max length
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // always be at least as wide as the colum name
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetResourceUids">
      <MemberSignature Language="C#" Value="public Guid[] GetResourceUids (int[] resIDs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid[] GetResourceUids(int32[] resIDs) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.GetResourceUids(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetResourceUids (resIDs As Integer()) As Guid()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Guid&gt; ^ GetResourceUids(cli::array &lt;int&gt; ^ resIDs);" />
      <MemberSignature Language="F#" Value="member this.GetResourceUids : int[] -&gt; Guid[]" Usage="resource.GetResourceUids resIDs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/GetResourceUids", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resIDs" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="resIDs">Resource IDs of the desired resources.</param>
        <summary>Converts enterprise resource IDs to resource unique IDs (GUIDs).</summary>
        <returns>An array of GUIDs for the requested resource IDs.</returns>
        <remarks>
          <para>Resource IDs are the numbers on the resource sheet. Resource unique IDs are the globally unique IDs used by the system.</para>
          <para>Project Server Permissions</para>
          <para>No permissions are required.</para>
          <para />
        </remarks>
        <example>
          <para>This example retrieves enterprise resource IDs for several enterprise resources, creating them if they do not exist, then it retrieves the unique IDS..</para>
          <para>Please see Prerequisites for Reference Code Samples for critical information on running this code sample.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.GetResourceUids
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";

            // Set up the Web service objects
            SvcResource.Resource resourceSvc = new SvcResource.Resource();

            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.Credentials = CredentialCache.DefaultCredentials;

            int[] resourceIds = GetResourceIds(resourceSvc);
            Guid[] resourceGuids = resourceSvc.GetResourceUids(resourceIds);

            for (int i = 0; i &amp;lt; resourceIds.Length; i++)
            {
               Console.WriteLine(resourceIds[i].ToString() +"\tis\t" + resourceGuids[i].ToString());
            }
         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }

      // This is routine to get a bunch of resource IDs that are valid.
      // In a real application, you might get these from a spreadsheet
      // or some other source.
      private static int[] GetResourceIds(SvcResource.Resource resourceSvc)
      {
         // Get the resource GUIDs
         Guid[] resources = EnsureEnterpriseResources(resourceSvc);
         int[] resourceIds = new Int32[resources.Length];

         // Get the resource dataset to get the IDs using the resource GUIDs
         PSLibrary.Filter resourceFilter = GetResourceFilter(resources);
         string filterXml = resourceFilter.GetXml();
         SvcResource.ResourceDataSet resourceDs = resourceSvc.ReadResources(filterXml, false);

         // Copy the IDs into the array
         for(int i=0;i&amp;lt;resourceIds.Length;i++)
         {
            resourceIds[i] = resourceDs.Resources[i].RES_ID;
         }
         // Return the array
         return resourceIds;
      }
      private static Guid[] EnsureEnterpriseResources(SvcResource.Resource resourceSvc)
      {
         string[] resourceNames = new string[] { "Lertchai Treetawatchaiwong", 
                                                 "Bricks", 
                                                 "Conference Room A",
                                                 "Rental"};
         PSLibrary.Resource.Type[] resourceTypes = new PSLibrary.Resource.Type[] { PSLibrary.Resource.Type.WorkResource, PSLibrary.Resource.Type.MaterialResource, PSLibrary.Resource.Type.WorkResource, PSLibrary.Resource.Type.CostResources };
         Guid[] resources = new Guid[resourceNames.Length];
         for (int i = 0; i &amp;lt; resourceNames.Length; i++)
         {
            resources[i] = EnsureEnterpriseResource(resourceSvc, resourceNames[i], resourceTypes[i]);
         }
         return resources;
      }
      private static Guid EnsureEnterpriseResource(SvcResource.Resource resourceSvc, string resourceName, PSLibrary.Resource.Type resourceType)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, resourceName);
         resourceFilter.Criteria = existingResource;
         string filterXml = resourceFilter.GetXml();
         resourceDs = resourceSvc.ReadResources(filterXml, false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs.Resources[0].RES_UID;
         }
         else
         {
            resourceDs = new SvcResource.ResourceDataSet();
            SvcResource.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
            resourceRow.RES_UID = Guid.NewGuid();
            resourceRow.RES_NAME = resourceName;
            resourceRow.RES_INITIALS = resourceName.Substring(0, 1) +
                              (resourceName.IndexOf(" ") &amp;gt; 0 ? resourceName.Substring(resourceName.IndexOf(" ") + 1, 1) : "");
            resourceRow.RES_TYPE = (int)resourceType;
            resourceDs.Resources.AddResourcesRow(resourceRow);
            resourceSvc.CreateResources(resourceDs, false, true);
            return resourceRow.RES_UID;
         }
      }

      private static PSLibrary.Filter GetResourceFilter(Guid[] resources)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();
         PSLibrary.Filter resourceFilter = new PSLibrary.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_IDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         //List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt; resourceFieldOps = new List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt;();
         PSLibrary.Filter.IOperator[] fos = new PSLibrary.Filter.IOperator[resources.Length];
         for (int i = 0; i &amp;lt; resources.Length; i++)
         {
            fos[i] = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_UIDColumn.ColumnName, resources[i]);
         }

         PSLibrary.Filter.LogicalOperator lo = new Microsoft.Office.Project.Server.Library.Filter.LogicalOperator(PSLibrary.Filter.LogicalOperationType.Or, fos);

         resourceFilter.Criteria = lo;
         return resourceFilter;
      }
      private static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // add a space so it won't wrap
            tableWidth += 1;
            // make the console as wide as the widest table
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  dataString = row[i].ToString();
                  // truncate output if it is wider than 
                  // the desired column width
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // Helper function for WriteTablesToConsole
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: may not handle byte[]data types well
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         //return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise use the max col width
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // truncate if over the max length
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // always be at least as wide as the colum name
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadDelegation">
      <MemberSignature Language="C#" Value="public WebSvcResource.UserDelegationDataSet ReadDelegation (Guid delegationUid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcResource.UserDelegationDataSet ReadDelegation(valuetype System.Guid delegationUid) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.ReadDelegation(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadDelegation (delegationUid As Guid) As UserDelegationDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcResource::UserDelegationDataSet ^ ReadDelegation(Guid delegationUid);" />
      <MemberSignature Language="F#" Value="member this.ReadDelegation : Guid -&gt; WebSvcResource.UserDelegationDataSet" Usage="resource.ReadDelegation delegationUid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/ReadDelegation", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcResource.UserDelegationDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegationUid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="delegationUid">To be added.</param>
        <summary>Reads the delegation information for a specified resource.</summary>
        <returns>Returns <see cref="T:WebSvcResource.UserDelegationDataSet" />.</returns>
        <remarks>
          <para />
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageMyDelegations" />
              </term>
              <description>Allows a user to manage his or her own user delegations.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageMyResourceDelegations" />
              </term>
              <description>Allows a user to manage his or her own resource delegations.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadDelegations">
      <MemberSignature Language="C#" Value="public WebSvcResource.UserDelegationDataSet ReadDelegations (WebSvcResource.DelegationFilter filter, Guid resUid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcResource.UserDelegationDataSet ReadDelegations(valuetype WebSvcResource.DelegationFilter filter, valuetype System.Guid resUid) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.ReadDelegations(WebSvcResource.DelegationFilter,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadDelegations (filter As DelegationFilter, resUid As Guid) As UserDelegationDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcResource::UserDelegationDataSet ^ ReadDelegations(WebSvcResource::DelegationFilter filter, Guid resUid);" />
      <MemberSignature Language="F#" Value="member this.ReadDelegations : WebSvcResource.DelegationFilter * Guid -&gt; WebSvcResource.UserDelegationDataSet" Usage="resource.ReadDelegations (filter, resUid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/ReadDelegations", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcResource.UserDelegationDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="WebSvcResource.DelegationFilter" />
        <Parameter Name="resUid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="filter">To be added.</param>
        <param name="resUid">To be added.</param>
        <summary>Reads the delegation information used to manage resources.</summary>
        <returns>Returns <see cref="T:WebSvcResource.UserDelegationDataSet" />.</returns>
        <remarks>
          <para />
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>Non-standard</term>
              <description>You must have either the <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageWorkflow" /> or <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ChangeWorkflow" /> global permission. If you have <b>ChangeWorkflow</b> permission, you must also have both the <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.OpenProject" /> and <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.SaveProject" /> category permissions.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadResource">
      <MemberSignature Language="C#" Value="public WebSvcResource.ResourceDataSet ReadResource (Guid resourceUid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcResource.ResourceDataSet ReadResource(valuetype System.Guid resourceUid) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.ReadResource(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadResource (resourceUid As Guid) As ResourceDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcResource::ResourceDataSet ^ ReadResource(Guid resourceUid);" />
      <MemberSignature Language="F#" Value="member this.ReadResource : Guid -&gt; WebSvcResource.ResourceDataSet" Usage="resource.ReadResource resourceUid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/ReadResource", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcResource.ResourceDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceUid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="resourceUid">A GUID of the desired resource.</param>
        <summary>Gets detailed information about the specified enterprise resource or user. </summary>
        <returns>The <b>ResourceDataSet</b> includes detailed information in <see cref="P:WebSvcResource.ResourceDataSet.Resources" /> and <see cref="P:WebSvcResource.ResourceDataSet.ResourceCustomFields" /> tables.</returns>
        <remarks>
          <para>If you call <b>ReadResource</b> and pass in a GUID for a resource that no longer exists in the system, <b>ReadResource</b> returns a <see cref="F:Microsoft.Office.Project.Server.Library.PSErrorID.GeneralSecurityAccessDenied" /> error.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageUsersAndGroups" />
              </term>
              <description>Allows a user to manage all enterprise users, resources and groups. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.ViewEnterpriseResourceData" />
              </term>
              <description>Allows a user to view enterprise resource data for this resource. Category permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.AcceptTimesheets" />
              </term>
              <description>Allows the current user to accept, but not approve, timesheets. Succeeds only if the resource requested is the same as the current user. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The WCF-based <b>CreateResourceTest</b> example does the following:</para>
          <list type="number">
            <item>
              <description>Parses the command arguments for resource name and percent availability.</description>
            </item>
            <item>
              <description>Creates a <b>ResourceDataSet</b> object that contains basic resource and availability data. </description>
            </item>
            <item>
              <description>Writes an XML file of the initial <b>ResourceDataSet</b> contents.</description>
            </item>
            <item>
              <description>Calls the <b>CreateResources</b> method, and then updates the <b>ResourceDataSet</b> object by calling the <b>ReadResource</b> method.</description>
            </item>
            <item>
              <description>Writes an XML file of the updated <b>ResourceDataSet</b> contents. Comparing the values you set with the two XML files shows the additional resource data that Project Server internally creates.</description>
            </item>
          </list>
          <para>For information about using the code sample in a Microsoft Visual Studio 2010 project and creating an app.config file for configuration of the WCF endpoint, see Prerequisites for WCF-Based Code Samples.</para>
          <code>using System;
using System.Text;
using System.ServiceModel;
using System.Xml;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.CreateResourceTest
{
    class Program
    {
        private const string ENDPOINT_RESOURCE = "basicHttp_Resource";
        // Change the output directory for your computer.
        private const string OUTPUT_FILES = @"C:\Project\Samples\Output\";
        private const string FILE_BEFORE = "ResourceDataSet_BeforeCreate.xml";
        private const string FILE_AFTER = "ResourceDataSet_AfterCreate.xml";

        private static SvcResource.ResourceClient resourceClient;

        private static string outFileResourceDs;
        private static string resourceName = string.Empty;
        private static double resAvailUnits = 0.0;

        static void Main(string[] args)
        {
            if (args.Length == 4)
            {
                if (args[0].ToLower() == "-name")
                {
                    resourceName = args[1];
                }
                if (args[2].ToLower() == "-units")
                {
                    // Units available, in percent.
                    resAvailUnits = Convert.ToDouble(args[3]);
                }
            }
            else
            {
                Console.WriteLine(@"Usage: CreateResourceTest -name ""Resource Name"" -units 100.0");
                Console.Write("\nPress any key to exit... ");
                Console.ReadKey(true);
                Environment.Exit(-1);
            }

            try
            {
                ConfigClientEndpoints(ENDPOINT_RESOURCE);
                Console.WriteLine("Creating ResourceDataSet...");

                SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();
                resourceDs = PopulateData(resourceDs, resourceName.Trim(), resAvailUnits);

                outFileResourceDs = OUTPUT_FILES + FILE_BEFORE;
                Console.WriteLine(
                    "\nXML output of the ResourceDataSet before CreateResource:\n\t{0}", outFileResourceDs);
                resourceDs.WriteXml(outFileResourceDs);

                Console.WriteLine("Calling CreateResources...");
                resourceClient.CreateResources(resourceDs, false, true);

                resourceDs = resourceClient.ReadResource(resourceDs.Resources[0].RES_UID);

                outFileResourceDs = OUTPUT_FILES + FILE_AFTER;
                Console.WriteLine(
                    "\nXML output of the ResourceDataSet after CreateResource:\n\t{0}", outFileResourceDs);
                resourceDs.WriteXml(outFileResourceDs);
            }
            catch (FaultException fault)
            {
                // Use the WCF FaultException, because the ASMX SoapException does not 
                // exist in a WCF-based application.
                WriteFaultOutput(fault);
            }
            catch (EndpointNotFoundException ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine("\nInnerException: \n" + ex.InnerException.Message);
            }
            catch (ServerTooBusyException ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine("\nInnerException: \n" + ex.InnerException.Message);
                Console.WriteLine("\nCheck that PWA is running. Can you log on?"
                    + "\nIs the endpoint address correct in app.config?");
            }
            Console.Write("\nPress any key to exit... ");
            Console.ReadKey(true);
        }

        
        // Populate the minimum data necessary in the ResourceDataSet, for the Resource 
        // table and for the ResourceAvailabilities table.
        private static SvcResource.ResourceDataSet PopulateData(
            SvcResource.ResourceDataSet resDs, string resName, double unitsAvail)
        {
            SvcResource.ResourceDataSet.ResourcesRow resRow = resDs.Resources.NewResourcesRow();
            SvcResource.ResourceDataSet.ResourceAvailabilitiesRow resAvailRow = 
                resDs.ResourceAvailabilities.NewResourceAvailabilitiesRow();

            resRow.RES_NAME = resName;
            resRow.RES_UID = Guid.NewGuid();
            resRow.RES_TYPE = (int)PSLibrary.Resource.Type.WorkResource;
            resRow.RES_INITIALS = resName.Substring(0, 1) 
                + (resName.IndexOf(" ") &amp;gt; 0
                ? resName.Substring(resName.IndexOf(" ") + 1, 1)
                : string.Empty);
            resDs.Resources.AddResourcesRow(resRow);

            resAvailRow.RES_UID = resRow.RES_UID;
            resAvailRow.SetRES_AVAIL_FROMNull();
            resAvailRow.SetRES_AVAIL_TONull();
            resAvailRow.RES_AVAIL_UNITS = unitsAvail;
            resDs.ResourceAvailabilities.AddResourceAvailabilitiesRow(resAvailRow);
            return resDs;
        }


        // Extract a PSClientError object from the WCF FaultException object, and
        // then display the exception details and each error in the PSClientError stack.
        private static void WriteFaultOutput(FaultException fault)
        {
            string errAttributeName;
            string errAttribute;
            string errOut;
            string errMess = "".PadRight(30, '=') + "\r\n"
                + "Error details: " + "\r\n";

            PSLibrary.PSClientError error = Helpers.GetPSClientError(fault, out errOut);
            errMess += errOut;

            if (error != null)
            {
                PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
                PSLibrary.PSErrorInfo thisError;

                for (int i = 0; i &amp;lt; errors.Length; i++)
                {
                    thisError = errors[i];
                    errMess += "\r\n".PadRight(30, '=') + "\r\nPSClientError output:\r\n";
                    errMess += thisError.ErrId.ToString() + "\n";

                    for (int j = 0; j &amp;lt; thisError.ErrorAttributes.Length; j++)
                    {
                        errAttributeName = thisError.ErrorAttributeNames()[j];
                        errAttribute = thisError.ErrorAttributes[j];
                        errMess += "\r\n\t" + errAttributeName
                            + ": " + errAttribute;
                    }
                }
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
            Console.ResetColor();
        }

        // Use the endpoints defined in app.config to configure the client.
        public static void ConfigClientEndpoints(string endpt)
        {
            if (endpt == ENDPOINT_RESOURCE)
                resourceClient = new SvcResource.ResourceClient(endpt);
        }
    }

    // Helper methods: WaitForQueue and GetPSClientError.
    class Helpers
    {
        // Wait for the queue jobs to complete.
        public static bool WaitForQueue(SvcQueueSystem.QueueMsgType jobType,
            SvcQueueSystem.QueueSystemClient queueSystemClient,
            DateTime startTime)
        {
            const int MAX_WAIT = 50;    // Maximum wait time.
            int numJobs = 1;            // Number of jobs in the queue.
            bool completed = false;     // Queue job completed.
            SvcQueueSystem.QueueStatusDataSet queueStatusDs =
                new SvcQueueSystem.QueueStatusDataSet();

            int timeout = 0;            // Number of seconds waited.
            Console.Write("Waiting for job: {0} ", jobType.ToString());

            SvcQueueSystem.QueueMsgType[] messageTypes = { jobType };
            SvcQueueSystem.JobState[] jobStates = { SvcQueueSystem.JobState.Success };

            while (timeout &amp;lt; MAX_WAIT)
            {
                System.Threading.Thread.Sleep(1000);    // Sleep one second.

                queueStatusDs = queueSystemClient.ReadMyJobStatus(
                    messageTypes,
                    jobStates,
                    startTime,
                    DateTime.Now,
                    numJobs,
                    true,
                    SvcQueueSystem.SortColumn.QueuePosition,
                    SvcQueueSystem.SortOrder.LastOrder);

                timeout++;
                Console.Write(".");
            }
            Console.WriteLine();

            if (queueStatusDs.Status.Count == numJobs)
                completed = true;
            return completed;
        }

        /// &amp;lt;summary&amp;gt;
        /// Extract a PSClientError object from the ServiceModel.FaultException,
        /// for use in output of the GetPSClientError stack of errors.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="e"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name="errOut"&amp;gt;Shows that FaultException has more information 
        /// about the errors than PSClientError has. FaultException can also contain 
        /// other types of errors, such as failure to connect to the server.&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;PSClientError object, for enumerating errors.&amp;lt;/returns&amp;gt;
        public static PSLibrary.PSClientError GetPSClientError(FaultException e,
                                                               out string errOut)
        {
            const string PREFIX = "GetPSClientError() returns null: ";
            errOut = string.Empty;
            PSLibrary.PSClientError psClientError = null;

            if (e == null)
            {
                errOut = PREFIX + "Null parameter (FaultException e) passed in.";
                psClientError = null;
            }
            else
            {
                // Get a ServiceModel.MessageFault object.
                var messageFault = e.CreateMessageFault();

                if (messageFault.HasDetail)
                {
                    using (var xmlReader = messageFault.GetReaderAtDetailContents())
                    {
                        var xml = new XmlDocument();
                        xml.Load(xmlReader);

                        var serverExecutionFault = xml["ServerExecutionFault"];
                        if (serverExecutionFault != null)
                        {
                            var exceptionDetails = serverExecutionFault["ExceptionDetails"];
                            if (exceptionDetails != null)
                            {
                                try
                                {
                                    errOut = exceptionDetails.InnerXml + "\r\n";
                                    psClientError =
                                        new PSLibrary.PSClientError(exceptionDetails.InnerXml);
                                }
                                catch (InvalidOperationException ex)
                                {
                                    errOut = PREFIX + "Unable to convert fault exception info ";
                                    errOut += "a valid Project Server error message. Message: \n\t";
                                    errOut += ex.Message;
                                    psClientError = null;
                                }
                            }
                            else
                            {
                                errOut = PREFIX + "The FaultException e is a ServerExecutionFault, "
                                    + "but does not have ExceptionDetails.";
                            }
                        }
                        else
                        {
                            errOut = PREFIX + "The FaultException e is not a ServerExecutionFault.";
                        }
                    }
                }
                else // No detail in the MessageFault.
                {
                    errOut = PREFIX + "The FaultException e does not have any detail.";
                }
            }
            errOut += "\r\n" + e.ToString() + "\r\n";
            return psClientError;
        }
    }
}</code>
          <para>When you run the command CreateResourceTest –name "Test Res1" –units 30, the application writes the ResourceDataSet_BeforeCreate.xml file with the following content:</para>
          <code>&amp;lt;?xml version="1.0" standalone="yes"?&amp;gt;
&amp;lt;ResourceDataSet xmlns="http://schemas.microsoft.com/office/project/server/webservices/ResourceDataSet/"&amp;gt;
  &amp;lt;Resources&amp;gt;
    &amp;lt;RES_UID&amp;gt;cf45c439-5320-438b-bc30-22a564f64fca&amp;lt;/RES_UID&amp;gt;
    &amp;lt;RES_ID&amp;gt;-1&amp;lt;/RES_ID&amp;gt;
    &amp;lt;RES_TYPE&amp;gt;2&amp;lt;/RES_TYPE&amp;gt;
    &amp;lt;RES_HAS_NOTES&amp;gt;false&amp;lt;/RES_HAS_NOTES&amp;gt;
    &amp;lt;RES_CAN_LEVEL&amp;gt;true&amp;lt;/RES_CAN_LEVEL&amp;gt;
    &amp;lt;RES_NAME&amp;gt;Test Res1&amp;lt;/RES_NAME&amp;gt;
    &amp;lt;RES_INITIALS&amp;gt;TR&amp;lt;/RES_INITIALS&amp;gt;
    &amp;lt;RES_IS_TEAM&amp;gt;false&amp;lt;/RES_IS_TEAM&amp;gt;
    &amp;lt;RES_EXCHANGE_SYNC&amp;gt;false&amp;lt;/RES_EXCHANGE_SYNC&amp;gt;
  &amp;lt;/Resources&amp;gt;
  &amp;lt;ResourceAvailabilities&amp;gt;
    &amp;lt;RES_UID&amp;gt;cf45c439-5320-438b-bc30-22a564f64fca&amp;lt;/RES_UID&amp;gt;
    &amp;lt;RES_AVAIL_UNITS&amp;gt;30&amp;lt;/RES_AVAIL_UNITS&amp;gt;
  &amp;lt;/ResourceAvailabilities&amp;gt;
&amp;lt;/ResourceDataSet&amp;gt;</code>
          <para>After creating the resource and updating the <b>ResourceDataSet</b> by using <b>ReadResource</b>, the ResourceDataSet_AfterCreate.xml file contains the following:</para>
          <code>&amp;lt;?xml version="1.0" standalone="yes"?&amp;gt;
&amp;lt;ResourceDataSet xmlns="http://schemas.microsoft.com/office/project/server/webservices/ResourceDataSet/"&amp;gt;
  &amp;lt;Resources&amp;gt;
    &amp;lt;RES_UID&amp;gt;6004cee6-e74a-4389-a5e0-d6925a79e5b8&amp;lt;/RES_UID&amp;gt;
    &amp;lt;RES_ID&amp;gt;13&amp;lt;/RES_ID&amp;gt;
    &amp;lt;RES_TYPE&amp;gt;2&amp;lt;/RES_TYPE&amp;gt;
    &amp;lt;RES_HAS_NOTES&amp;gt;false&amp;lt;/RES_HAS_NOTES&amp;gt;
    &amp;lt;RES_CAN_LEVEL&amp;gt;true&amp;lt;/RES_CAN_LEVEL&amp;gt;
    &amp;lt;RES_ACCRUE_AT&amp;gt;3&amp;lt;/RES_ACCRUE_AT&amp;gt;
    &amp;lt;RES_BOOKING_TYPE&amp;gt;0&amp;lt;/RES_BOOKING_TYPE&amp;gt;
    &amp;lt;RES_NAME&amp;gt;Test Res47&amp;lt;/RES_NAME&amp;gt;
    &amp;lt;RES_INITIALS&amp;gt;TR&amp;lt;/RES_INITIALS&amp;gt;
    &amp;lt;RES_IS_WINDOWS_USER&amp;gt;false&amp;lt;/RES_IS_WINDOWS_USER&amp;gt;
    &amp;lt;RES_TIMESHEET_MGR_UID&amp;gt;6004cee6-e74a-4389-a5e0-d6925a79e5b8&amp;lt;/RES_TIMESHEET_MGR_UID&amp;gt;
    &amp;lt;RES_DEF_ASSN_OWNER&amp;gt;6004cee6-e74a-4389-a5e0-d6925a79e5b8&amp;lt;/RES_DEF_ASSN_OWNER&amp;gt;
    &amp;lt;RES_IS_TEAM&amp;gt;false&amp;lt;/RES_IS_TEAM&amp;gt;
    &amp;lt;RES_EXCHANGE_SYNC&amp;gt;false&amp;lt;/RES_EXCHANGE_SYNC&amp;gt;
    &amp;lt;CREATED_DATE&amp;gt;2010-12-08T08:12:50.377-08:00&amp;lt;/CREATED_DATE&amp;gt;
    &amp;lt;MOD_DATE&amp;gt;2010-12-08T08:12:50.38-08:00&amp;lt;/MOD_DATE&amp;gt;
    &amp;lt;RES_STD_RATE_FMT&amp;gt;2&amp;lt;/RES_STD_RATE_FMT&amp;gt;
    &amp;lt;RES_OVT_RATE_FMT&amp;gt;2&amp;lt;/RES_OVT_RATE_FMT&amp;gt;
    &amp;lt;RES_MAX_UNITS&amp;gt;3000.000000&amp;lt;/RES_MAX_UNITS&amp;gt;
    &amp;lt;RES_PREVENT_ADSYNC&amp;gt;false&amp;lt;/RES_PREVENT_ADSYNC&amp;gt;
    &amp;lt;BaseCalendarUniqueId&amp;gt;b6635b2e-e747-4771-a78b-24f7509629d0&amp;lt;/BaseCalendarUniqueId&amp;gt;
  &amp;lt;/Resources&amp;gt;
  &amp;lt;ResourceAvailabilities&amp;gt;
    &amp;lt;RES_UID&amp;gt;6004cee6-e74a-4389-a5e0-d6925a79e5b8&amp;lt;/RES_UID&amp;gt;
    &amp;lt;RES_AVAIL_UNITS&amp;gt;30&amp;lt;/RES_AVAIL_UNITS&amp;gt;
  &amp;lt;/ResourceAvailabilities&amp;gt;
&amp;lt;/ResourceDataSet&amp;gt;</code>
          <para>Comparing the two files shows, for example, that Project Server internally sets the <b>RES_MAX_UNITS</b> property with a value that corresponds to the <b>RES_AVAIL_UNITS</b> property value.</para>
          <para>The following example retrieves enterprise resources, creating several if they are not present, reads the resource using a resource filter, checks out each resource if available, updates the <b>RES_CODE</b> property of available resources, and checks the resources back in. It reports the before state, updates made, and the after state of the resources.</para>
          <para>Please see Prerequisites for Reference Code Samples for critical information on running this code sample.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.CheckInResources
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";

            SvcResource.ResourceDataSet resourceDs;
            PSLibrary.Filter resourceFilter;
            string filterXml;

            // Set up the Web service objects
            SvcResource.Resource resourceSvc = new SvcResource.Resource();

            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.Credentials = CredentialCache.DefaultCredentials;

            // Get the resources
            Console.WriteLine("Getting/Creating resources");
            Guid[] resources = EnsureEnterpriseResources(resourceSvc);

            // Read the resources so we can see what it looked like before.
            resourceFilter = GetResourceFilter(resources);
            filterXml = resourceFilter.GetXml();

            resourceDs = resourceSvc.ReadResources(filterXml, false);
            WriteTablesToConsole(resourceDs.Tables);

            // Check out resources so they can be modified
            Guid me = resourceSvc.GetCurrentUserUid();
            bool checkedOut =false;
            Random rand = new Random();
            // Modify the resources
            foreach(SvcResource.ResourceDataSet.ResourcesRow resourceRow in resourceDs.Resources)
            {
               Console.WriteLine("Check out " + resourceRow.RES_NAME);
               if (resourceRow.IsRES_CHECKOUTBYNull())
               {
                  resourceSvc.CheckOutResources(new Guid[] { resourceRow.RES_UID });
                  checkedOut=true;
               }
               else
               {
                  if (resourceRow.RES_CHECKOUTBY == me)
                  {
                     checkedOut = true;
                  }
                  else
                  {
                     checkedOut = false;
                     Console.WriteLine("\tCan't check out this resource, skip updating this one.");
                  }
               }
               if (checkedOut)
               {
                  SvcResource.ResourceDataSet updateDs = resourceSvc.ReadResource(resourceRow.RES_UID);
                  updateDs.Resources[0].RES_CODE = "A" + rand.Next(1000,9999) ;
                  Console.WriteLine("Update RES_CODE to " + updateDs.Resources[0].RES_CODE);
                  resourceSvc.UpdateResources(updateDs, false, false);
                  Console.WriteLine("Check in " + resourceRow.RES_NAME);
                  resourceSvc.CheckInResources(new Guid[] { resourceRow.RES_UID },false);
               }
               Console.ForegroundColor=ConsoleColor.Yellow;
               Console.WriteLine("".PadRight(30,'-'));
               Console.ResetColor();
            }

            // retrieve the data from the server for display
            resourceDs = resourceSvc.ReadResources(filterXml, false);
            WriteTablesToConsole(resourceDs.Tables);

         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }

      private static void WriteResourceState(SvcResource.ResourceDataSet resourceDs)
      {
         foreach (SvcResource.ResourceDataSet.ResourcesRow row in resourceDs.Resources.Rows)
         {
            // If the resource type is greater than the inactive offset, it is inactive.
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.Write(row.RES_NAME);
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.Write(" is ");
            if (row.RES_TYPE &amp;gt; (int)PSLibrary.Resource.Type.INACTIVATED_OFFSET)
            {
               Console.ForegroundColor = ConsoleColor.Red;
               Console.Write("Inactive\r\n");
            }
            else
            {
               Console.ForegroundColor = ConsoleColor.DarkGreen;
               Console.Write("Active\r\n");
            }
            Console.ResetColor();
         }
      }
      private static Guid[] EnsureEnterpriseResources(SvcResource.Resource resourceSvc)
      {
         string[] resourceNames = new string[] { "Lertchai Treetawatchaiwong", 
                                                 "Bricks", 
                                                 "Conference Room A",
                                                 "Rental"};
         PSLibrary.Resource.Type[] resourceTypes = new PSLibrary.Resource.Type[] { PSLibrary.Resource.Type.WorkResource, PSLibrary.Resource.Type.MaterialResource, PSLibrary.Resource.Type.WorkResource, PSLibrary.Resource.Type.CostResources };
         Guid[] resources = new Guid[resourceNames.Length];
         for (int i = 0; i &amp;lt; resourceNames.Length; i++)
         {
            resources[i] = EnsureEnterpriseResource(resourceSvc, resourceNames[i], resourceTypes[i]);
         }
         return resources;
      }
      private static Guid EnsureEnterpriseResource(SvcResource.Resource resourceSvc, string resourceName, PSLibrary.Resource.Type resourceType)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, resourceName);
         resourceFilter.Criteria = existingResource;
         string filterXml = resourceFilter.GetXml();
         resourceDs = resourceSvc.ReadResources(filterXml, false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs.Resources[0].RES_UID;
         }
         else
         {
            resourceDs = new SvcResource.ResourceDataSet();
            SvcResource.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
            resourceRow.RES_UID = Guid.NewGuid();
            resourceRow.RES_NAME = resourceName;
            resourceRow.RES_INITIALS = resourceName.Substring(0, 1) +
                              (resourceName.IndexOf(" ") &amp;gt; 0 ? resourceName.Substring(resourceName.IndexOf(" ") + 1, 1) : "");
            resourceRow.RES_TYPE = (int)resourceType;
            resourceDs.Resources.AddResourcesRow(resourceRow);
            resourceSvc.CreateResources(resourceDs, false, true);
            return resourceRow.RES_UID;
         }
      }

      private static PSLibrary.Filter GetResourceFilter(Guid[] resources)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();
         PSLibrary.Filter resourceFilter = new PSLibrary.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CODEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_ACCRUE_ATColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_BOOKING_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CAN_LEVELColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CHECKOUTBYColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CHECKOUTDATEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_COST_CENTERColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_DEF_ASSN_OWNERColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_EXTERNAL_IDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_GROUPColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HAS_NOTESColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HIRE_DATEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HYPERLINK_ADDRESSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HYPERLINK_FRIENDLY_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HYPERLINK_SUB_ADDRESSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_IDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_IS_TEAMColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_IS_WINDOWS_USERColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_MATERIAL_LABELColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         //resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NOTESColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_PHONETICSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_RTF_NOTESColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TERMINATION_DATEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TIMESHEET_MGR_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));


         //List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt; resourceFieldOps = new List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt;();
         PSLibrary.Filter.IOperator[] fos = new PSLibrary.Filter.IOperator[resources.Length];
         for (int i = 0; i &amp;lt; resources.Length; i++)
         {
            fos[i] = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_UIDColumn.ColumnName, resources[i]);
         }

         PSLibrary.Filter.LogicalOperator lo = new Microsoft.Office.Project.Server.Library.Filter.LogicalOperator(PSLibrary.Filter.LogicalOperationType.Or, fos);

         resourceFilter.Criteria = lo;
         return resourceFilter;
      }
      // Write all contents of a table collection to the console
      private static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // add a space so it won't wrap
            tableWidth += 1;
            // make the console as wide as the widest table
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  dataString = row[i].ToString();
                  // truncate output if it is wider than 
                  // the desired column width
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // Helper function for WriteTablesToConsole
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: may not handle byte[]data types well
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         //return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise use the max col width
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // truncate if over the max length
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // always be at least as wide as the colum name
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadResourceAssignments">
      <MemberSignature Language="C#" Value="public WebSvcResource.ResourceAssignmentDataSet ReadResourceAssignments (string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcResource.ResourceAssignmentDataSet ReadResourceAssignments(string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.ReadResourceAssignments(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadResourceAssignments (filter As String) As ResourceAssignmentDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcResource::ResourceAssignmentDataSet ^ ReadResourceAssignments(System::String ^ filter);" />
      <MemberSignature Language="F#" Value="member this.ReadResourceAssignments : string -&gt; WebSvcResource.ResourceAssignmentDataSet" Usage="resource.ReadResourceAssignments filter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/ReadResourceAssignments", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcResource.ResourceAssignmentDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filter">Filter XML string as returned by <see cref="T:Microsoft.Office.Project.Server.Library.Filter" />. A filter is required due to the possible large number of assignments returned. <b>String.Empty</b> returns an error.</param>
        <summary>Gets resource assignments.</summary>
        <returns>A <see cref="T:WebSvcResource.ResourceAssignmentDataSet" /> populated with resource assignment data.</returns>
        <remarks>
          <para>Resources must be published before the <b>ReadResourceAssignments</b> method returns them.</para>
          <para>
            <b>Note</b>: The <paramref name="filter" /> parameter works with the <b>Criteria</b> operators to filter rows only in the primary <b>ResourceAssignmentDataTable</b>. For example, you cannot use <paramref name="filter" /> with the <b>ReadResourceAssignments</b> method to filter rows in the <b>ResourceAssignmentCustomFieldsDataTable</b>. If you try to filter rows in a secondary <b>DataTable</b>, the PSI returns a <b>FilterInvalid</b> exception.</para>
          <para>However, you can use the <b>Fields.Add</b> method to filter columns in the secondary <b>ResourceAssignmentCustomFieldsDataTable</b> of the <b>ResourceAssignmentDataSet</b>. For more information, see How to: Use a Filter Parameter with PSI Methods.</para>
          <para>Retrieving ResourceAssignmentCustomFields Data</para>
          <para>To get data for resource assignment custom fields with the <b>ReadResourceAssignments</b> method, the <paramref name="filter" /> parameter must include the <b>PROJ_UID</b> and <b>ASSN_UID</b> fields for the <b>ResourceAssignmentCustomFields</b> table name. </para>
          <para>For example, the following <paramref name="filter" /> value results in a <b>System.Data.ConstraintException</b>, because the <b>PROJ_UID</b> field is missing for the <b>ResourceAssignmentCustomFields</b> table name:</para>
          <code> &amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
 &amp;lt;Filter xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
         filterTableName="ResourceAssignment" 
         xmlns="http://microsoft.com/ProjectServer/FilterSchema.xsd"&amp;gt;
   &amp;lt;Fields&amp;gt;
     &amp;lt;Field tableName="ResourceAssignment" fieldName="PROJ_UID" /&amp;gt;
     &amp;lt;Field tableName="ResourceAssignment" fieldName="PROJ_NAME" /&amp;gt;
     &amp;lt;Field tableName="ResourceAssignment" fieldName="TASK_UID" /&amp;gt;
     &amp;lt;Field tableName="ResourceAssignment" fieldName="ASSN_UID" /&amp;gt;
     &amp;lt;Field tableName="ResourceAssignment" fieldName="RES_UID" /&amp;gt;
     &amp;lt;Field tableName="ResourceAssignment" fieldName="TASK_IS_SUMMARY" /&amp;gt;
     &amp;lt;Field tableName="ResourceAssignmentCustomFields" fieldName="ASSN_UID" /&amp;gt;
     &amp;lt;Field tableName="ResourceAssignmentCustomFields" fieldName="MD_PROP_UID" /&amp;gt;
     &amp;lt;Field tableName="ResourceAssignmentCustomFields" fieldName="FIELD_TYPE_ENUM" /&amp;gt;
     &amp;lt;Field tableName="ResourceAssignmentCustomFields" fieldName="TEXT_VALUE" /&amp;gt;
     &amp;lt;Field tableName="ResourceAssignmentCustomFields" fieldName="CODE_VALUE" /&amp;gt;
     &amp;lt;Field tableName="ResourceAssignmentCustomFields" fieldName="NUM_VALUE" /&amp;gt; 
  &amp;lt;/Fields&amp;gt;
   &amp;lt;Criteria /&amp;gt;
 &amp;lt;/Filter&amp;gt;</code>
          <para>For the filter to work, add the following field:</para>
          <code>&amp;lt;Field tableName="ResourceAssignmentCustomFields" fieldName="PROJ_UID" /&amp;gt;</code>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.ViewResourceAssignmentsInAssignmentViews" />
              </term>
              <description>Allows a user to view assignments. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>This example retrieves enterprise resource or creates several resources if they do not exist, creates two projects, assigns the resources to the projects, and finally reads the assignments using a filter.</para>
          <para>Please see Prerequisites for Reference Code Samples for critical information on running this code sample.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Net;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.ReadResourceAssignments
{
    class Program
    {
        [STAThread]
        static void Main()
        {
            try
            {
                #region Setup
                const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
                const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
                const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
                const string QUEUE_SYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
                const string RESOURCE_PLAN_SERVICE_PATH = "_vti_bin/psi/resourceplan.asmx";
                const string SESSION_DESCRIPTION = "ReadResourceAssignments Utility";
                Guid sessionUid = Guid.NewGuid();
                Guid jobUid;

                // Initialize the Web service objects.
                SvcResource.Resource resourceSvc = new SvcResource.Resource();
                resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
                resourceSvc.UseDefaultCredentials = true;

                SvcProject.Project projectSvc = new SvcProject.Project();
                projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
                projectSvc.UseDefaultCredentials = true;

                SvcQueueSystem.QueueSystem q = new SvcQueueSystem.QueueSystem();
                q.Url = PROJECT_SERVER_URI + QUEUE_SYSTEM_SERVICE_PATH;
                q.UseDefaultCredentials = true;

                SvcResourcePlan.ResourcePlan resourcePlanSvc = 
                    new SvcResourcePlan.ResourcePlan();
                resourcePlanSvc.Url = PROJECT_SERVER_URI + RESOURCE_PLAN_SERVICE_PATH;
                resourcePlanSvc.UseDefaultCredentials = true;

                // Create the resources.
                Console.WriteLine("Setting up enterprise resources");
                Guid[] resourceUids = EnsureEnterpriseResources(resourceSvc);
                PSLibrary.Filter resourceFilter = GetResourceFilter(resourceUids);
                string resourceFilterXml = resourceFilter.GetXml();
                SvcResource.ResourceDataSet resourceDs = 
                    resourceSvc.ReadResources(resourceFilterXml, false);

                // Create the projects.
                Console.WriteLine("Creating Projects");
                const int NUM_PROJS = 2;
                Guid[] projectUids = new Guid[NUM_PROJS];
                for (int i = 0; i &amp;lt; NUM_PROJS; i++)
                {
                    // Create the project
                    Console.WriteLine("Cr.eating Project {0}:", i);
                    projectUids[i] = CreateSampleProject(projectSvc, q);

                    // Check out the project.
                    projectSvc.CheckOutProject(projectUids[i], sessionUid, SESSION_DESCRIPTION);

                    // Add the enterprise resources.
                    Console.WriteLine("...Adding Enterprise Resources");
                    AddResourcesToProjectTeam(projectUids[i], resourceUids, q, projectSvc, 
                        sessionUid, SESSION_DESCRIPTION);

                    // Give the enterprise resources some work to do.
                    Console.WriteLine("...Assigning Work");
                    AddResourcesToAssignments(projectUids[i], resourceUids, projectSvc, q, 
                        sessionUid, SESSION_DESCRIPTION);

                    // Check in the project.
                    Console.WriteLine("...Check in project");
                    jobUid = Guid.NewGuid();
                    projectSvc.QueueCheckInProject(jobUid, projectUids[i], false, sessionUid, 
                        SESSION_DESCRIPTION);
                    WaitForQueue(q, jobUid);

                    // Must publish for the resources to be booked.
                    Console.WriteLine("...Publishing the project");
                    jobUid = Guid.NewGuid();
                    projectSvc.QueuePublish(jobUid, projectUids[i], false, null);
                    WaitForQueue(q, jobUid);
                }
                #endregion

                #region Read Resource Assignments
                Console.WriteLine("Read the resource assignments");

                // Create the resource filter.
                PSLibrary.Filter resourceAssignmentFilter = 
                    GetResourceAssignmentFilter(resourceUids);
                string resourceAssignmentFilterXml = resourceAssignmentFilter.GetXml();
                Console.WriteLine("filter: ");
                Console.WriteLine(resourceAssignmentFilterXml);

                // Read the assignments.
                SvcResource.ResourceAssignmentDataSet resourceAssignDs = 
                    resourceSvc.ReadResourceAssignments(resourceAssignmentFilterXml);
                WriteTablesToConsole(resourceAssignDs.Tables);
                #endregion
            }

            #region Error Handling and Final
            catch (SoapException ex)
            {
                PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
                PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
                string errMess = "==============================\r\nError: \r\n";
                for (int i = 0; i &amp;lt; errors.Length; i++)
                {
                    errMess += "\n" + ex.Message.ToString() + "\r\n";
                    errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
                    errMess += errors[i].ErrId.ToString() + "\n";

                    for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
                    {
                        errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " 
                            + errors[i].ErrorAttributes[j];
                    }
                    errMess += "\r\n".PadRight(30, '=');
                }
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(errMess);
            }
            catch (WebException ex)
            {
                string errMess = ex.Message.ToString() +
                   "\n\nLog on, or check the Project Server Queuing Service";
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Error: " + errMess);
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Error: " + ex.Message);
            }
            finally
            {
                Console.ResetColor();
                Console.WriteLine("\r\n\r\nPress any key...");
                Console.ReadKey();
            }
            #endregion
        }
        #region Supporting Setup Functions

        // Randomly assign resources to tasks, for the sample.
        private static void AddResourcesToAssignments(Guid projectUid, Guid[] resourceUids, 
            SvcProject.Project projectSvc, SvcQueueSystem.QueueSystem q, 
            Guid sessionUid, string SESSION_DESCRIPTION)
        {
            SvcProject.ProjectDataSet projectDs = projectSvc.ReadProject(projectUid, 
                SvcProject.DataStoreEnum.WorkingStore);

            int r = 0;
            for (int i = 0; i &amp;lt; projectDs.Task.Count; i++)
            {
                // Can't add resources to summary tasks through the PSI.
                if (!projectDs.Task[i].TASK_IS_SUMMARY)
                {
                    CreateAssignment(projectDs, projectDs.Task[i].TASK_UID, resourceUids[r]);
                    r = (r == resourceUids.Length - 1 ? 0 : r + 1);
                    CreateAssignment(projectDs, projectDs.Task[i].TASK_UID, resourceUids[r]);
                }
            }
            Guid jobUid = Guid.NewGuid();
            projectSvc.QueueAddToProject(jobUid, sessionUid, 
                (SvcProject.ProjectDataSet)projectDs.GetChanges(DataRowState.Added), false);
            WaitForQueue(q, jobUid);
        }
        // Add the resources in the array to the specified project.
        private static void AddResourcesToProjectTeam(Guid projectUid, Guid[] resourceUids, 
            SvcQueueSystem.QueueSystem q, SvcProject.Project projectSvc, 
            Guid sessionUid, string SESSION_DESCRIPTION)
        {
            // Add the resource to the team
            SvcProject.ProjectTeamDataSet projectTeamDs = new SvcProject.ProjectTeamDataSet();
            for (int i = 0; i &amp;lt; resourceUids.Length; i++)
            {
                ProjectTeamAddResource(projectTeamDs, projectUid, resourceUids[i], resourceUids[i]);
            }
            // Save the team!
            Guid jobId = Guid.NewGuid();
            projectSvc.QueueUpdateProjectTeam(jobId, sessionUid, projectUid, projectTeamDs);
            WaitForQueue(q, jobId);
        }
        // Add an enterprise resource to use on the project.
        // Helper function for AddResourcesToProjectTeam.
        public static void ProjectTeamAddResource(SvcProject.ProjectTeamDataSet projTeamDataSet, 
            Guid projGuid, Guid resGuid, Guid newResGuid)
        {
            SvcProject.ProjectTeamDataSet.ProjectTeamRow projTeamRow = 
                projTeamDataSet.ProjectTeam.NewProjectTeamRow();
            projTeamRow.PROJ_UID = projGuid;
            projTeamRow.RES_UID = resGuid;
            projTeamRow.NEW_RES_UID = newResGuid;
            projTeamDataSet.ProjectTeam.AddProjectTeamRow(projTeamRow);
        }
        // Create enterprise resources for the sample.
        // Add GUIDs to name to ensure unique enterprise resources.
        private static Guid[] EnsureEnterpriseResources(SvcResource.Resource resourceSvc)
        {
            string[] resourceNames = new string[] { "Lertchai Treetawatchaiwong " 
                                                     + Guid.NewGuid().ToString(), 
                                                 "Bricks "  + Guid.NewGuid().ToString(), 
                                                 "Conference Room A " + Guid.NewGuid().ToString(),
                                                 "Rental " + Guid.NewGuid().ToString()};
            PSLibrary.Resource.Type[] resourceTypes = new PSLibrary.Resource.Type[] {
                PSLibrary.Resource.Type.WorkResource, 
                PSLibrary.Resource.Type.MaterialResource, 
                PSLibrary.Resource.Type.WorkResource, 
                PSLibrary.Resource.Type.CostResources };

            Guid[] resources = new Guid[resourceNames.Length];
            for (int i = 0; i &amp;lt; resourceNames.Length; i++)
            {
                resources[i] = EnsureEnterpriseResource(resourceSvc, 
                    resourceNames[i], resourceTypes[i]);
            }
            return resources;
        }
        private static Guid EnsureEnterpriseResource(SvcResource.Resource resourceSvc, 
            string resourceName, PSLibrary.Resource.Type resourceType)
        {
            SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();

            PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
            resourceFilter.FilterTableName = resourceDs.Resources.TableName;
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
                resourceDs.Resources.RES_UIDColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
                resourceDs.Resources.RES_NAMEColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
                resourceDs.Resources.RES_INITIALSColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
                resourceDs.Resources.RES_TYPEColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
                resourceDs.Resources.RES_CODEColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));

            PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(
                PSLibrary.Filter.FieldOperationType.Equal, 
                resourceDs.Resources.RES_NAMEColumn.ColumnName, 
                resourceName);
            resourceFilter.Criteria = existingResource;
            string filterXml = resourceFilter.GetXml();
            resourceDs = resourceSvc.ReadResources(filterXml, false);

            if (resourceDs.Resources.Count &amp;gt;= 1)
            {
                return resourceDs.Resources[0].RES_UID;
            }
            else
            {
                resourceDs = new SvcResource.ResourceDataSet();
                SvcResource.ResourceDataSet.ResourcesRow resourceRow = 
                    resourceDs.Resources.NewResourcesRow();
                resourceRow.RES_UID = Guid.NewGuid();
                resourceRow.RES_NAME = resourceName;
                resourceRow.RES_INITIALS = resourceName.Substring(0, 1) +
                    (resourceName.IndexOf(" ") &amp;gt; 0 
                     ? resourceName.Substring(resourceName.IndexOf(" ") + 1, 1) 
                     : "");
                resourceRow.RES_TYPE = (int)resourceType;
                resourceDs.Resources.AddResourcesRow(resourceRow);
                resourceSvc.CreateResources(resourceDs, false, true);
                return resourceRow.RES_UID;
            }
        }

        private static PSLibrary.Filter GetResourceAssignmentFilter(Guid[] resources)
        {
            SvcResource.ResourceAssignmentDataSet resourceAssignmentDs = 
                new SvcResource.ResourceAssignmentDataSet();
            PSLibrary.Filter resourceFilter = new PSLibrary.Filter();

            resourceFilter.FilterTableName = resourceAssignmentDs.ResourceAssignment.TableName;
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceFilter.FilterTableName, 
                resourceAssignmentDs.ResourceAssignment.RES_UIDColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceFilter.FilterTableName,
                resourceAssignmentDs.ResourceAssignment.RES_NAMEColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceFilter.FilterTableName, 
                resourceAssignmentDs.ResourceAssignment.TASK_UIDColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceFilter.FilterTableName, 
                resourceAssignmentDs.ResourceAssignment.TASK_NAMEColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceFilter.FilterTableName, 
                resourceAssignmentDs.ResourceAssignment.ASSN_UIDColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceFilter.FilterTableName, 
                resourceAssignmentDs.ResourceAssignment.ASSN_START_DATEColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceFilter.FilterTableName, 
                resourceAssignmentDs.ResourceAssignment.ASSN_FINISH_DATEColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));

            //List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt; resourceFieldOps = new List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt;();
            PSLibrary.Filter.IOperator[] fos = new PSLibrary.Filter.IOperator[resources.Length];

            for (int i = 0; i &amp;lt; resources.Length; i++)
            {
                fos[i] = new PSLibrary.Filter.FieldOperator(
                    PSLibrary.Filter.FieldOperationType.Equal, 
                    resourceAssignmentDs.ResourceAssignment.RES_UIDColumn.ColumnName, 
                    resources[i]);
            }

            PSLibrary.Filter.LogicalOperator lo = 
                new Microsoft.Office.Project.Server.Library.Filter.LogicalOperator(
                    PSLibrary.Filter.LogicalOperationType.Or, fos);

            resourceFilter.Criteria = lo;
            return resourceFilter;
        }
        // Writes all table contents to the console in a relatively readable way.
        private static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
        {
            Console.ForegroundColor = ConsoleColor.DarkGreen;
            foreach (System.Data.DataTable table in theTables)
            {

                int[] columnWidths = new int[table.Columns.Count];
                int tableWidth = 0;
                string dataString;
                Console.WriteLine("Table: " + table.TableName);

                // Write out the column names and get their spacing.
                StringBuilder tableRow = new StringBuilder();
                for (int i = 0; i &amp;lt; table.Columns.Count; i++)
                {
                    columnWidths[i] = GetColumnWidth(table.Columns[i]);
                    tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

                    tableWidth += columnWidths[i];
                }
                // Add a space so it won't wrap.
                tableWidth += 1;
                // Make the console as wide as the widest table.
                Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth 
                    ? Console.BufferWidth 
                    : tableWidth);
                tableRow.Append("\r\n");
                Console.Write(tableRow.ToString());

                // Write the data.
                foreach (DataRow row in table.Rows)
                {
                    tableRow = new StringBuilder();
                    for (int i = 0; i &amp;lt; table.Columns.Count; i++)
                    {
                        dataString = row[i].ToString();

                        // Truncate output if it is wider than the desired column width.
                        if (dataString.Length &amp;gt;= columnWidths[i])
                        {
                            dataString = dataString.Substring(0, columnWidths[i] - 1);
                        }
                        // Add the output to the stringbuilder and pad right to fill
                        // up to the column width.
                        tableRow.Append(dataString.PadRight(columnWidths[i]));
                    }
                    tableRow.Append("\r\n");
                    Console.Write(tableRow.ToString());
                }
                Console.Write("\r\n".PadLeft(tableWidth, '-'));
            }
            Console.ResetColor();
        }
        // Helper function for WriteTablesToConsole.
        private static int GetColumnWidth(DataColumn column)
        {
            // Note: may not handle byte[]data types well.
            const int MAX_COL_WIDTH = 40;
            int dataWidth = 0;

            // Return 12 for numbers, 30 for dates, and string width for strings.
            switch (column.DataType.UnderlyingSystemType.ToString())
            {
                case "System.Boolean":
                case "System.Byte":
                case "System.Byte[]":
                case "System.Char":
                case "System.Decimal":
                case "System.Double":
                case "System.Int16":
                case "System.Int32":
                case "System.Int64":
                case "System.SByte":
                case "System.Single":
                case "System.UInt16":
                case "System.UInt32":
                case "System.UInt64":
                    dataWidth = 12;
                    break;
                case "System.DateTime":
                case "System.TimeSpan":
                    dataWidth = 30;
                    break;
                case "System.Guid":
                    dataWidth = 37;
                    break;
                case "System.String":
                    // If it has a maxlength, use it
                    if (column.MaxLength &amp;gt; 0)
                    {
                        dataWidth = column.MaxLength;
                    }
                    else
                    {
                        // Otherwise use the max col width
                        dataWidth = MAX_COL_WIDTH;
                    }
                    break;
                default:
                    dataWidth = column.ColumnName.Length;
                    break;
            }
            // Truncate if over the maximum length.
            if (dataWidth &amp;gt; MAX_COL_WIDTH)
            {
                dataWidth = MAX_COL_WIDTH;
            }
            // Always be at least as wide as the colum name.
            return (column.ColumnName.Length &amp;gt; (dataWidth) 
                ? column.ColumnName.Length + 1 
                : dataWidth);
        }
        // Create a sample project for use in this example.
        static private Guid CreateSampleProject(SvcProject.Project projectSvc, 
            SvcQueueSystem.QueueSystem q)
        {
            SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();
            Guid jobId;

            // Create the project
            SvcProject.ProjectDataSet.ProjectRow projectRow = 
                projectDs.Project.NewProjectRow();
            Guid projectId = Guid.NewGuid();

            projectRow.PROJ_UID = projectId;
            projectRow.PROJ_NAME = "Its a wonderful project at " 
                + DateTime.Now.ToShortDateString().Replace("/", "") 
                + " " + DateTime.Now.ToShortTimeString().Replace(":", "") + " " 
                + DateTime.Now.ToShortTimeString().Replace(":", "") + " " 
                + DateTime.Now.Millisecond.ToString();
            projectRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
            projectDs.Project.AddProjectRow(projectRow);

            // Add some tasks.
            SvcProject.ProjectDataSet.TaskRow taskOne = projectDs.Task.NewTaskRow();
            taskOne.PROJ_UID = projectId;
            taskOne.TASK_UID = Guid.NewGuid();
            // Task Duration format must be specified.
            taskOne.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
            taskOne.TASK_DUR = 4800;  // 8 hours in duration units (minute/10).
            taskOne.TASK_NAME = "Task One";
            taskOne.TASK_START_DATE = System.DateTime.Now.AddDays(1);
            projectDs.Task.AddTaskRow(taskOne);

            SvcProject.ProjectDataSet.TaskRow taskTwo = projectDs.Task.NewTaskRow();
            taskTwo.PROJ_UID = projectId;
            taskTwo.TASK_UID = Guid.NewGuid();
            // Task Duration format must be specified.
            taskTwo.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
            taskTwo.TASK_DUR = 4800;  // 8 hours in duration units (minute/10).
            taskTwo.TASK_NAME = "Task Two";
            projectDs.Task.AddTaskRow(taskTwo);

            // Make task two dependent on task one
            SvcProject.ProjectDataSet.DependencyRow dependency = 
                projectDs.Dependency.NewDependencyRow();
            dependency.LINK_UID = Guid.NewGuid();
            dependency.PROJ_UID = projectId;
            dependency.LINK_PRED_UID = taskOne.TASK_UID;
            dependency.LINK_SUCC_UID = taskTwo.TASK_UID;
            dependency.LINK_TYPE = 1;  //Finish to Start
            dependency.LINK_LAG_FMT = (int)PSLibrary.Task.DurationFormat.Hour;
            dependency.LINK_LAG = 0;
            projectDs.Dependency.AddDependencyRow(dependency);

            // Add a summary task.
            SvcProject.ProjectDataSet.TaskRow taskOthers = projectDs.Task.NewTaskRow();
            taskOthers.PROJ_UID = projectId;
            taskOthers.TASK_UID = Guid.NewGuid();
            taskOthers.TASK_NAME = "Other Tasks";
            projectDs.Task.AddTaskRow(taskOthers);

            // Add some sub-tasks.

            SvcProject.ProjectDataSet.TaskRow taskThree = projectDs.Task.NewTaskRow();
            taskThree.PROJ_UID = projectId;
            taskThree.TASK_UID = Guid.NewGuid();
            taskThree.TASK_NAME = "Task Three";

            //Task Duration format must be specified
            taskThree.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
            taskThree.TASK_DUR = 4800; // 8 hours in duration units (minute/10).
            taskThree.TASK_PARENT_UID = taskOthers.TASK_UID;
            taskThree.TASK_OUTLINE_LEVEL = 2;
            projectDs.Task.AddTaskRow(taskThree);

            SvcProject.ProjectDataSet.TaskRow taskFour = projectDs.Task.NewTaskRow();
            taskFour.PROJ_UID = projectId;
            taskFour.TASK_UID = Guid.NewGuid();
            //Task Duration format must be specified
            taskFour.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
            taskFour.TASK_DUR = 4800;  // 8 hours in duration units (minute/10).
            taskFour.TASK_NAME = "Task Four";
            taskFour.TASK_PARENT_UID = taskOthers.TASK_UID;
            taskFour.TASK_OUTLINE_LEVEL = 2;
            projectDs.Task.AddTaskRow(taskFour);


            // Make task four dependent on task three
            dependency = projectDs.Dependency.NewDependencyRow();
            dependency.LINK_UID = Guid.NewGuid();
            dependency.PROJ_UID = projectId;
            dependency.LINK_PRED_UID = taskThree.TASK_UID;
            dependency.LINK_SUCC_UID = taskFour.TASK_UID;
            dependency.LINK_TYPE = 1;  // Finish to Start.
            dependency.LINK_LAG_FMT = (int)PSLibrary.Task.DurationFormat.Hour;
            dependency.LINK_LAG = 0;
            projectDs.Dependency.AddDependencyRow(dependency);

            // Make others task dependent on task two
            dependency = projectDs.Dependency.NewDependencyRow();
            dependency.LINK_UID = Guid.NewGuid();
            dependency.PROJ_UID = projectId;
            dependency.LINK_PRED_UID = taskTwo.TASK_UID;
            dependency.LINK_SUCC_UID = taskOthers.TASK_UID;
            dependency.LINK_TYPE = 1;//Finish to Start
            dependency.LINK_LAG_FMT = (int)PSLibrary.Task.DurationFormat.Hour;
            dependency.LINK_LAG = 0;
            projectDs.Dependency.AddDependencyRow(dependency);

            // Add Some Resources.
            SvcProject.ProjectDataSet.ProjectResourceRow resourceOne = projectDs.ProjectResource.NewProjectResourceRow();
            resourceOne.PROJ_UID = projectId;
            resourceOne.RES_UID = Guid.NewGuid();
            resourceOne.RES_NAME = "Brynja Sigrídur Blomsterberg";
            resourceOne.RES_INITIALS = "BSB";
            projectDs.ProjectResource.AddProjectResourceRow(resourceOne);
            CreateAssignment(projectDs, taskOne.TASK_UID, resourceOne.RES_UID);
            CreateAssignment(projectDs, taskTwo.TASK_UID, resourceOne.RES_UID);

            SvcProject.ProjectDataSet.ProjectResourceRow resourceTwo = 
                projectDs.ProjectResource.NewProjectResourceRow();
            resourceTwo.PROJ_UID = projectId;
            resourceTwo.RES_UID = Guid.NewGuid();
            resourceTwo.RES_NAME = "Ioannis Xylaras";
            resourceTwo.RES_INITIALS = "IX";
            projectDs.ProjectResource.AddProjectResourceRow(resourceTwo);
            CreateAssignment(projectDs, taskOne.TASK_UID, resourceTwo.RES_UID);
            CreateAssignment(projectDs, taskTwo.TASK_UID, resourceTwo.RES_UID);
            CreateAssignment(projectDs, taskThree.TASK_UID, resourceTwo.RES_UID);
            CreateAssignment(projectDs, taskFour.TASK_UID, resourceTwo.RES_UID);

            // Save the project to the database.
            jobId = Guid.NewGuid();
            projectSvc.QueueCreateProject(jobId, projectDs, false);
            WaitForQueue(q, jobId);
            return projectRow.PROJ_UID;
        }
        // Helper function for CreateSampleProject, to make simple assignments.
        private static void CreateAssignment(SvcProject.ProjectDataSet projectDs, 
            Guid taskGuid, Guid resourceGuid)
        {
            SvcProject.ProjectDataSet.AssignmentRow assnRow = 
                projectDs.Assignment.NewAssignmentRow();
            assnRow.PROJ_UID = projectDs.Project[0].PROJ_UID;
            assnRow.ASSN_UID = Guid.NewGuid();
            assnRow.TASK_UID = taskGuid;
            assnRow.RES_UID = resourceGuid;
            projectDs.Assignment.AddAssignmentRow(assnRow);
        }
        // Wait for the job to finish.
        // Output job status to the console.
        static private void WaitForQueue(SvcQueueSystem.QueueSystem q, Guid jobId)
        {
            SvcQueueSystem.JobState jobState;
            const int QUEUE_WAIT_TIME = 1; // One second.
            bool jobDone = false;
            string xmlError = string.Empty;
            int wait = 0;

            //Wait for the project to get through the queue
            // - get the estimated wait time in seconds.
            wait = q.GetJobWaitTime(jobId);

            Console.Write("Waiting on queue. Estimate: {0} seconds.\r\n ", wait);

            // Wait until the queue job is done.

            do
            {
                // Get the job state.
                jobState = q.GetJobCompletionState(jobId, out xmlError);

                if (jobState == SvcQueueSystem.JobState.Success)
                {
                    jobDone = true;
                }
                else
                {
                    if (jobState == SvcQueueSystem.JobState.Unknown
                        || jobState == SvcQueueSystem.JobState.Failed
                        || jobState == SvcQueueSystem.JobState.FailedNotBlocking
                        || jobState == SvcQueueSystem.JobState.CorrelationBlocked
                        || jobState == SvcQueueSystem.JobState.Canceled)
                    {
                        // If the job failed, error out.
                        throw (new ApplicationException("Queue request failed " 
                            + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
                    }
                    else
                    {
                        // Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                        Console.Write("~");
                        Thread.Sleep(QUEUE_WAIT_TIME * 1000);
                    }
                }
            }
            while (!jobDone);

            Console.Write("\r\n");
        }

        private static PSLibrary.Filter GetResourceFilter(Guid[] resources)
        {
            SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();
            PSLibrary.Filter resourceFilter = new PSLibrary.Filter();

            resourceFilter.FilterTableName = resourceDs.Resources.TableName;
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
                resourceDs.Resources.RES_UIDColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
                resourceDs.Resources.RES_NAMEColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
                resourceDs.Resources.RES_INITIALSColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
                resourceDs.Resources.RES_TYPEColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
                resourceDs.Resources.RES_CODEColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));
            resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, 
                resourceDs.Resources.RES_TIMESHEET_MGR_UIDColumn.ColumnName, 
                PSLibrary.Filter.SortOrderTypeEnum.None));

            PSLibrary.Filter.IOperator[] fos = new PSLibrary.Filter.IOperator[resources.Length];

            for (int i = 0; i &amp;lt; resources.Length; i++)
            {
                fos[i] = new PSLibrary.Filter.FieldOperator(
                    PSLibrary.Filter.FieldOperationType.Equal, 
                    resourceDs.Resources.RES_UIDColumn.ColumnName, resources[i]);
            }

            PSLibrary.Filter.LogicalOperator lo = 
                new Microsoft.Office.Project.Server.Library.Filter.LogicalOperator(
                    PSLibrary.Filter.LogicalOperationType.Or, fos);

            resourceFilter.Criteria = lo;
            return resourceFilter;
        }
        #endregion
    }
}

</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadResourceAuthorization">
      <MemberSignature Language="C#" Value="public WebSvcResource.ResourceAuthorizationDataSet ReadResourceAuthorization (Guid resourceUid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcResource.ResourceAuthorizationDataSet ReadResourceAuthorization(valuetype System.Guid resourceUid) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.ReadResourceAuthorization(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadResourceAuthorization (resourceUid As Guid) As ResourceAuthorizationDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcResource::ResourceAuthorizationDataSet ^ ReadResourceAuthorization(Guid resourceUid);" />
      <MemberSignature Language="F#" Value="member this.ReadResourceAuthorization : Guid -&gt; WebSvcResource.ResourceAuthorizationDataSet" Usage="resource.ReadResourceAuthorization resourceUid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/ReadResourceAuthorization", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcResource.ResourceAuthorizationDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceUid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="resourceUid">The unique identifier of the resource to read.</param>
        <summary>Gets the specified resource's authorization information.</summary>
        <returns>The <b>ResourceAuthorizationDataSet</b> contains permissions, groups, and other authorization information.</returns>
        <remarks>
          <para>The permissions returned are only those assigned directly to the resource. Any permissions assigned to groups of which the resource is a member are not included. </para>
          <para>For more information about the permissions returned by <b>ReadResourceAuthorization</b> method, see <see cref="T:WebSvcSecurity.PermissionDataSet" />.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageUsersAndGroups" />
              </term>
              <description>Allows a user to manage resources, users and groups. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>This example updates the permssions of the current user and reads the permissions for the current user.</para>
          <para>This sample creates a custom permission. Before you can run this sample twice, you need to remove the permission it creates. To manually delete resources, go to the Resource Center section of your Project Web App site, select your account from the select, and choose Edit Details from the Actions menu. Go to the Global Permissions section and clear the check box next to the New Project permission and click on Save.</para>
          <para>Please see Prerequisites for Reference Code Samples for critical information on running this code sample.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using PSLibrary=Microsoft.Office.Project.Server.Library;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Windows.Forms;

namespace Microsoft.SDK.Project.Samples.SetResourceAuthorization
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";


            // Set up the Web service objects
            SvcResource.Resource resourceSvc = new SvcResource.Resource();

            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.Credentials = CredentialCache.DefaultCredentials;

            // Update your own permissions
            Guid resourceUid = resourceSvc.GetCurrentUserUid();
            // Read the current permissions
            SvcResource.ResourceAuthorizationDataSet authDS = resourceSvc.ReadResourceAuthorization(resourceUid);
            Console.WriteLine("Before: ");
            WriteTablesToConsole(authDS.Tables);

            // add the custom permission
            SvcResource.ResourceAuthorizationDataSet.GlobalPermissionsRow globalPermissionsRow = authDS.GlobalPermissions.NewGlobalPermissionsRow();
            globalPermissionsRow.RES_UID = resourceUid;
            globalPermissionsRow.WSEC_ALLOW = true;
            globalPermissionsRow.WSEC_DENY  = false;
            globalPermissionsRow.WSEC_FEA_ACT_UID = PSLibrary.PSSecurityGlobalPermission.NewProject;
            authDS.GlobalPermissions.AddGlobalPermissionsRow(globalPermissionsRow);

            resourceSvc.SetResourceAuthorization(authDS);
            // Read the permissions again to see the results
            authDS = resourceSvc.ReadResourceAuthorization(resourceUid);
            Console.WriteLine("After: ");
            WriteTablesToConsole(authDS.Tables);
         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }
      // Writes all table contents to the console in a
      // relatively readable way
      private static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // add a space so it won't wrap
            tableWidth += 1;
            // make the console as wide as the widest table
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  dataString = row[i].ToString();
                  // truncate output if it is wider than 
                  // the desired column width
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // Helper function for WriteTablesToConsole
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: may not handle byte[]data types well
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         //return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise use the max col width
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // truncate if over the max length
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // always be at least as wide as the colum name
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadResourceAvailability">
      <MemberSignature Language="C#" Value="public System.Data.DataSet ReadResourceAvailability (Guid[] resUIDs, DateTime startDate, DateTime endDate, short timeScale, bool includeProposedBookings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet ReadResourceAvailability(valuetype System.Guid[] resUIDs, valuetype System.DateTime startDate, valuetype System.DateTime endDate, int16 timeScale, bool includeProposedBookings) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.ReadResourceAvailability(System.Guid[],System.DateTime,System.DateTime,System.Int16,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadResourceAvailability (resUIDs As Guid(), startDate As DateTime, endDate As DateTime, timeScale As Short, includeProposedBookings As Boolean) As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ ReadResourceAvailability(cli::array &lt;Guid&gt; ^ resUIDs, DateTime startDate, DateTime endDate, short timeScale, bool includeProposedBookings);" />
      <MemberSignature Language="F#" Value="member this.ReadResourceAvailability : Guid[] * DateTime * DateTime * int16 * bool -&gt; System.Data.DataSet" Usage="resource.ReadResourceAvailability (resUIDs, startDate, endDate, timeScale, includeProposedBookings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/ReadResourceAvailability", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resUIDs" Type="System.Guid[]" />
        <Parameter Name="startDate" Type="System.DateTime" />
        <Parameter Name="endDate" Type="System.DateTime" />
        <Parameter Name="timeScale" Type="System.Int16" />
        <Parameter Name="includeProposedBookings" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="resUIDs">Array of resource GUIDs.</param>
        <param name="startDate">Beginning of the period.</param>
        <param name="endDate">End of the period.</param>
        <param name="timeScale">Desired scale of the TimephasedData table, in the <see cref="T:Microsoft.Office.Project.Server.Library.TimeScaleClass.TimeScale" /> enumeration.</param>
        <param name="includeProposedBookings">Include assignments for which the resource is only tentatively scheduled.</param>
        <summary>Returns a dataset of resource availability in a timephased data structure.</summary>
        <returns>Dataset with a table of dates and a table of timephased data.</returns>
        <remarks>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ViewResourceAvailability" />
              </term>
              <description>Allows a user to view resource allocation data. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The example uses the <b>SvcResource</b> namespace in the ProjectServerServices.dll proxy assembly. The <b>ConfigClientEndpoints</b> method uses an app.config file for setting the WCF binding, behavior, and endpoint. For information about creating a PSI proxy assembly and an app.config file, see Prerequisites for WCF-Based Code Samples.</para>
          <para>The <b>ReadResourceAvailability</b> method returns the dataset <b>resourceDS</b>. The contents of the dataset are written to <b>ResourceAvailability.xml</b>.A sample of the <b>TimephasedData</b> structure from the actual output is shown below:</para>
          <para>
            <b>Note</b>: The <b>ReadResourceAvailabilityForGrid</b> method is similar to the <b>ReadResourceAvailability</b> method, except the ReadResourceAvailabilityForGrid method does not return the resource GUID or project GUID in the <b>DataSet</b>.   <b>ReadResourceAvailabilityForGrid</b> is used only in Project Web App for displaying data in the JS Grid</para>
          <code>&amp;lt;TimephasedData&amp;gt;
    &lt;span class="label"&gt;&amp;lt;AssignmentUID&amp;gt;&lt;/span&gt;b2e5a49e-8cd7-42b3-97d8-4b9829f19a8f&amp;lt;/AssignmentUID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;ProjectName&amp;gt;&lt;/span&gt;Capacity&amp;lt;/ProjectName&amp;gt;
    &lt;span class="label"&gt;&amp;lt;ResourceName&amp;gt;&lt;/span&gt;Fourth Coffee&amp;lt;/ResourceName&amp;gt;
    &lt;span class="label"&gt;&amp;lt;RowType&amp;gt;&lt;/span&gt;0&amp;lt;/RowType&amp;gt;
    &lt;span class="label"&gt;&amp;lt;ProjUID&amp;gt;&lt;/span&gt;00000000-0000-0000-0000-000000000000&amp;lt;/ProjUID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;ResUID&amp;gt;&lt;/span&gt;2a4ba1a7-1d96-4086-8fa5-6dea243ed6b5&amp;lt;/ResUID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;BookingType&amp;gt;&lt;/span&gt;0&amp;lt;/BookingType&amp;gt;
    &lt;span class="label"&gt;&amp;lt;Interval0&amp;gt;&lt;/span&gt;72000&amp;lt;/Interval0&amp;gt;
    &lt;span class="label"&gt;&amp;lt;Interval1&amp;gt;&lt;/span&gt;96000&amp;lt;/Interval1&amp;gt;
    &lt;span class="label"&gt;&amp;lt;Interval2&amp;gt;&lt;/span&gt;110400&amp;lt;/Interval2&amp;gt;
    &lt;span class="label"&gt;&amp;lt;Interval3&amp;gt;&lt;/span&gt;105600&amp;lt;/Interval3&amp;gt;
    &lt;span class="label"&gt;&amp;lt;Interval4&amp;gt;&lt;/span&gt;100800&amp;lt;/Interval4&amp;gt;
    &lt;span class="label"&gt;&amp;lt;Interval5&amp;gt;&lt;/span&gt;19200&amp;lt;/Interval5&amp;gt;
  &amp;lt;/TimephasedData&amp;gt;</code>
          <para>The complete code is given below:</para>
          <code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.ServiceModel;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.Resources
{
    class Resources
    {
        private static SvcResource.ResourceClient resourceClient;
        private const string RES_ENDPOINT = "basicHttp_Resource";
        private const string OUTPUT_FILES = @"C:\Projects\Samples\Output\";
        private static string outFilePathResourcesAvailabilityGrid;
        private static string outFilePathResourceAvailability;

        static void Main(string[] args)
        {
            Guid[] resourceID = new Guid[2];
            resourceID[0] = new Guid("2a4ba1a7-1d96-4086-8fa5-6dea243ed6b5");
            resourceID[1] = new Guid("f6c846fa-b21b-49eb-9921-fe6bdec60242");
            DateTime startDate = new DateTime(2010, 1, 10);
            DateTime finishDate = new DateTime(2010, 6, 6);

            // Configure the end points.
            ConfigClientEndpoints(RES_ENDPOINT);
            
            // If directory does not exist,create it.
            if (!Directory.Exists(OUTPUT_FILES))
            {
                Directory.CreateDirectory(OUTPUT_FILES);
            }

            // Assign the path where the output XML file will be saved.
            outFilePathResourcesAvailabilityGrid = OUTPUT_FILES + "ResourcesAvailabilityGrid.xml";
            outFilePathResourceAvailability = OUTPUT_FILES + "ResourceAvailability.xml";

            // Read the resource availability.
            System.Data.DataSet resourceGridDS = resourceClient.ReadResourceAvailabilityForGrid(
                resourceID, startDate, finishDate, (short)PSLibrary.Resource.TimeScale.Months, true);
           
            // Write the contents of the DataSet to an XML file.
            resourceGridDS.WriteXml(outFilePathResourcesAvailabilityGrid);

            Console.WriteLine("\nSee XML output of the DataSet at {0}",
                   outFilePathResourcesAvailabilityGrid);

            // Read the resource availability for grid.
            System.Data.DataSet resourceDS = resourceClient.ReadResourceAvailability(
                resourceID, startDate, finishDate, (short)PSLibrary.Resource.TimeScale.Months, true);

            // Write the DataSet contents to an XML file.
            resourceDS.WriteXml(outFilePathResourceAvailability);
            Console.WriteLine("\nSee XML output of Resource Dataset at {0}", 
                outFilePathResourceAvailability);
            Console.ReadKey();
        }
        // Configure the custom field client end points.
        public static void ConfigClientEndpoints(string endpt)
        {
            resourceClient = new SvcResource.ResourceClient(endpt);
        }
    }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadResourceAvailabilityForGrid">
      <MemberSignature Language="C#" Value="public System.Data.DataSet ReadResourceAvailabilityForGrid (Guid[] resUIDs, DateTime startDate, DateTime endDate, short timeScale, bool includeProposedBookings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet ReadResourceAvailabilityForGrid(valuetype System.Guid[] resUIDs, valuetype System.DateTime startDate, valuetype System.DateTime endDate, int16 timeScale, bool includeProposedBookings) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.ReadResourceAvailabilityForGrid(System.Guid[],System.DateTime,System.DateTime,System.Int16,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadResourceAvailabilityForGrid (resUIDs As Guid(), startDate As DateTime, endDate As DateTime, timeScale As Short, includeProposedBookings As Boolean) As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ ReadResourceAvailabilityForGrid(cli::array &lt;Guid&gt; ^ resUIDs, DateTime startDate, DateTime endDate, short timeScale, bool includeProposedBookings);" />
      <MemberSignature Language="F#" Value="member this.ReadResourceAvailabilityForGrid : Guid[] * DateTime * DateTime * int16 * bool -&gt; System.Data.DataSet" Usage="resource.ReadResourceAvailabilityForGrid (resUIDs, startDate, endDate, timeScale, includeProposedBookings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/ReadResourceAvailabilityForGrid", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resUIDs" Type="System.Guid[]" />
        <Parameter Name="startDate" Type="System.DateTime" />
        <Parameter Name="endDate" Type="System.DateTime" />
        <Parameter Name="timeScale" Type="System.Int16" />
        <Parameter Name="includeProposedBookings" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="resUIDs">An array of resource GUIDs.</param>
        <param name="startDate">Beginning of period.</param>
        <param name="endDate">End of period.</param>
        <param name="timeScale">Desired scale of the TimephasedData table, in the <see cref="T:Microsoft.Office.Project.Server.Library.TimeScaleClass.TimeScale" /> enumeration.</param>
        <param name="includeProposedBookings">Include assignments for which the resource is only tentatively scheduled.</param>
        <summary>This member is reserved for internal use and is not intended to be used directly from your code. Returns a dataset of resource availability in a timephased data structure for the JS Grid control.</summary>
        <returns>Dataset with a table of dates and a table of timephased data.</returns>
        <remarks>
          <para>The <b>ReadResourceAvailabilityForGrid</b> method is used internally with the JS Grid control. To get resource availability data, use the <see cref="M:WebSvcResource.Resource.ReadResourceAvailability(System.Guid[],System.DateTime,System.DateTime,System.Int16,System.Boolean)" /> method.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ViewResourceAvailability" />
              </term>
              <description>Allows a user to view resource allocation data. Global permission.</description>
            </item>
          </list>
          <para />
          <para />
        </remarks>
        <example>
          <para>The example uses the <b>SvcResource</b> namespace in the ProjectServerServices.dll proxy assembly. The <b>ConfigClientEndpoints</b> method uses an app.config file for setting the WCF binding, behavior, and endpoint. For information about creating a PSI proxy assembly and an app.config file, see Prerequisites for WCF-Based Code Samples.</para>
          <para>The <b>ReadResourceAvailabilityForGrid</b> method returns the dataset <b>resourceGridDS</b>. The contents of the dataset are written to <b>ResourceAvailabilityGrid.xml</b>.A sample of the <b>TimephasedData</b> structure from the actual output is shown below:</para>
          <para>
            <b>Note</b>: The <b>ReadResourceAvailabilityForGrid</b> method is similar to the <b>ReadResourceAvailability</b> method, except the ReadResourceAvailabilityForGrid method does not return the resource GUID or project GUID in the <b>DataSet</b>.   <b>ReadResourceAvailabilityForGrid</b> is used only in Project Web App for displaying data in the JS Grid</para>
          <code>&amp;lt;TimephasedData&amp;gt;
&lt;span class="label"&gt;&amp;lt;AssignmentUID&amp;gt;&lt;/span&gt;2ba3b898-3fa7-421b-8643-56f0088e7cae&amp;lt;/AssignmentUID&amp;gt;
&lt;span class="label"&gt;&amp;lt;ProjectName&amp;gt;&lt;/span&gt;Capacity&amp;lt;/ProjectName&amp;gt;
&lt;span class="label"&gt;&amp;lt;ResourceName&amp;gt;&lt;/span&gt;Fourth Coffee &amp;lt;/ResourceName&amp;gt;
&lt;span class="label"&gt;&amp;lt;RowType&amp;gt;&lt;/span&gt;0&amp;lt;/RowType&amp;gt;
&lt;span class="label"&gt;&amp;lt;Interval0&amp;gt;&lt;/span&gt;72000&amp;lt;/Interval0&amp;gt;
&lt;span class="label"&gt;&amp;lt;Interval1&amp;gt;&lt;/span&gt;96000&amp;lt;/Interval1&amp;gt;
&lt;span class="label"&gt;&amp;lt;Interval2&amp;gt;&lt;/span&gt;110400&amp;lt;/Interval2&amp;gt;
&lt;span class="label"&gt;&amp;lt;Interval3&amp;gt;&lt;/span&gt;105600&amp;lt;/Interval3&amp;gt;
&lt;span class="label"&gt;&amp;lt;Interval4&amp;gt;&lt;/span&gt;100800&amp;lt;/Interval4&amp;gt;
&lt;span class="label"&gt;&amp;lt;Interval5&amp;gt;&lt;/span&gt;19200&amp;lt;/Interval5&amp;gt;
&amp;lt;/TimephasedData&amp;gt;</code>
          <para>The complete sample code is given below:</para>
          <code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.ServiceModel;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.Resources
{
    class Resources
    {
        private static SvcResource.ResourceClient resourceClient;

        private const string RES_ENDPOINT = "basicHttp_Resource";
        private const string OUTPUT_FILES = @"C:\Projects\Samples\Output\";
        private static string outFilePathResourcesAvailabilityGrid;
        private static string outFilePathResourceAvailability;

        static void Main(string[] args)
        {
            Guid[] resourceID = new Guid[2];
            resourceID[0] = new Guid("2a4ba1a7-1d96-4086-8fa5-6dea243ed6b5");
            resourceID[1] = new Guid("f6c846fa-b21b-49eb-9921-fe6bdec60242");
            DateTime startDate = new DateTime(2010, 1, 10);
            DateTime finishDate = new DateTime(2010, 6, 6);

            // Configure the end points.
            ConfigClientEndpoints(RES_ENDPOINT);
            
            // If directory does not exist,create it.
            if (!Directory.Exists(OUTPUT_FILES))
            {
                Directory.CreateDirectory(OUTPUT_FILES);
            }

            // Assign the path where the output XML file will be saved.
            outFilePathResourcesAvailabilityGrid = OUTPUT_FILES + "ResourcesAvailabilityGrid.xml";
            outFilePathResourceAvailability = OUTPUT_FILES + "ResourceAvailability.xml";

            // Read the resource availability.
            System.Data.DataSet resourceGridDS = resourceClient.ReadResourceAvailabilityForGrid(
                resourceID, startDate, finishDate, (short)PSLibrary.Resource.TimeScale.Months, true);
           
            // Write the contents of the DataSet to an XML file.
            resourceGridDS.WriteXml(outFilePathResourcesAvailabilityGrid);

            Console.WriteLine("\nSee XML output of the DataSet at {0}",
                   outFilePathResourcesAvailabilityGrid);

            // Read the resource availability for grid.
            System.Data.DataSet resourceDS = resourceClient.ReadResourceAvailability(
                resourceID, startDate, finishDate, (short)PSLibrary.Resource.TimeScale.Months, true);

            // Write the DataSet contents to an XML file.
            resourceDS.WriteXml(outFilePathResourceAvailability);
            Console.WriteLine("\nSee XML output of Resource Dataset at {0}", 
                outFilePathResourceAvailability);
            Console.ReadKey();
        }

        // Configure the custom field client end points.
        public static void ConfigClientEndpoints(string endpt)
        {
            resourceClient = new SvcResource.ResourceClient(endpt);
        }
    }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadResourceListByDepartment">
      <MemberSignature Language="C#" Value="public WebSvcResource.ResourceDataSet ReadResourceListByDepartment (Nullable&lt;Guid&gt; departmentUid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcResource.ResourceDataSet ReadResourceListByDepartment(valuetype System.Nullable`1&lt;valuetype System.Guid&gt; departmentUid) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.ReadResourceListByDepartment(System.Nullable{System.Guid})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadResourceListByDepartment (departmentUid As Nullable(Of Guid)) As ResourceDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcResource::ResourceDataSet ^ ReadResourceListByDepartment(Nullable&lt;Guid&gt; departmentUid);" />
      <MemberSignature Language="F#" Value="member this.ReadResourceListByDepartment : Nullable&lt;Guid&gt; -&gt; WebSvcResource.ResourceDataSet" Usage="resource.ReadResourceListByDepartment departmentUid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/ReadResourceListByDepartment", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcResource.ResourceDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="departmentUid" Type="System.Nullable&lt;System.Guid&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>System.Xml.Serialization.XmlElement(IsNullable=true)</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="departmentUid">To be added.</param>
        <summary>Returns unique identifiers and resources names within a given Department for which a user has permissions.</summary>
        <returns>Returns <see cref="T:WebSvcResource.ResourceDataSet" />.</returns>
        <remarks>
          <para />
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.LogOn" />
              </term>
              <description>Allows a user to log on to Project Server. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadResources">
      <MemberSignature Language="C#" Value="public WebSvcResource.ResourceDataSet ReadResources (string xmlFilter, bool autoCheckOut);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcResource.ResourceDataSet ReadResources(string xmlFilter, bool autoCheckOut) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.ReadResources(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadResources (xmlFilter As String, autoCheckOut As Boolean) As ResourceDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcResource::ResourceDataSet ^ ReadResources(System::String ^ xmlFilter, bool autoCheckOut);" />
      <MemberSignature Language="F#" Value="member this.ReadResources : string * bool -&gt; WebSvcResource.ResourceDataSet" Usage="resource.ReadResources (xmlFilter, autoCheckOut)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/ReadResources", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcResource.ResourceDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlFilter" Type="System.String" />
        <Parameter Name="autoCheckOut" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="xmlFilter">Filter XML string as returned by <see cref="T:Microsoft.Office.Project.Server.Library.Filter" />. <b>String.Empty</b> returns information about all resources.</param>
        <param name="autoCheckOut">Automatically check out the resources for modification.</param>
        <summary>Gets filtered information about enterprise resources or users.</summary>
        <returns>A <see cref="T:WebSvcResource.ResourceDataSet" /> populated with enterprise resource information.</returns>
        <remarks>
          <para>The <b>ReadResources</b> method populates related data in the <see cref="P:WebSvcResource.ResourceDataSet.CalendarExceptions" />, <see cref="P:WebSvcResource.ResourceDataSet.ResourceAvailabilities" />, <see cref="P:WebSvcResource.ResourceDataSet.ResourceCustomFields" /> and <see cref="P:WebSvcResource.ResourceDataSet.ResourceRates" /> properties, in addition to the <see cref="P:WebSvcResource.ResourceDataSet.Resources" /> property. The <see cref="M:WebSvcResource.Resource.ReadUserList(WebSvcResource.ResourceActiveFilter)" /> method can have better performance, but provides only the resource GUIDs and names.</para>
          <para>
            <b>Note</b>: The <paramref name="xmlFilter" /> parameter works with the <b>Criteria</b> operators to filter rows only in the primary <b>ResourcesDataTable</b>. For example, you cannot use <paramref name="xmlFilter" /> with the <b>ReadResources</b> method to filter rows in the <b>CalendarExceptionsDataTable</b>. If you try to filter rows in a secondary <b>DataTable</b>, the PSI returns a <b>FilterInvalid</b> exception.</para>
          <para>With the exception of the secondary <b>ResourceCustomFieldsDataTable</b>, however, you can use the <b>Fields.Add</b> method to filter columns in the other secondary datatables of the <b>ResourceDataSet</b>. For more information, see How to: Use a Filter Parameter with PSI Methods.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageUsersAndGroups" />
              </term>
              <description>Allows a user to manage all enterprise users, resources and groups. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.ViewEnterpriseResourceData" />
              </term>
              <description>Allows a user to view enterprise users, resources and groups used in specific projects. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example retrieves enterprise resources or creates several resources if they do not exist, reads the resource using a resource filter, checks out each resource if available, updates the <b>RES_CODE</b> property of available resources, and checks the resources back in. It reports the before state, updates made, and the after state of the resources.</para>
          <para>Please see Prerequisites for Reference Code Samples for critical information on running this code sample.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.CheckInResources
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";

            SvcResource.ResourceDataSet resourceDs;
            PSLibrary.Filter resourceFilter;
            string filterXml;

            // Set up the Web service objects
            SvcResource.Resource resourceSvc = new SvcResource.Resource();

            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.Credentials = CredentialCache.DefaultCredentials;

            // Get the resources
            Console.WriteLine("Getting/Creating resources");
            Guid[] resources = EnsureEnterpriseResources(resourceSvc);

            // Read the resources so we can see what it looked like before.
            resourceFilter = GetResourceFilter(resources);
            filterXml = resourceFilter.GetXml();

            resourceDs = resourceSvc.ReadResources(filterXml, false);
            WriteTablesToConsole(resourceDs.Tables);

            // Check out resources so they can be modified
            Guid me = resourceSvc.GetCurrentUserUid();
            bool checkedOut =false;
            Random rand = new Random();
            // Modify the resources
            foreach(SvcResource.ResourceDataSet.ResourcesRow resourceRow in resourceDs.Resources)
            {
               Console.WriteLine("Check out " + resourceRow.RES_NAME);
               if (resourceRow.IsRES_CHECKOUTBYNull())
               {
                  resourceSvc.CheckOutResources(new Guid[] { resourceRow.RES_UID });
                  checkedOut=true;
               }
               else
               {
                  if (resourceRow.RES_CHECKOUTBY == me)
                  {
                     checkedOut = true;
                  }
                  else
                  {
                     checkedOut = false;
                     Console.WriteLine("\tCan't check out this resource, skip updating this one.");
                  }
               }
               if (checkedOut)
               {
                  SvcResource.ResourceDataSet updateDs = resourceSvc.ReadResource(resourceRow.RES_UID);
                  updateDs.Resources[0].RES_CODE = "A" + rand.Next(1000,9999) ;
                  Console.WriteLine("Update RES_CODE to " + updateDs.Resources[0].RES_CODE);
                  resourceSvc.UpdateResources(updateDs, false, false);
                  Console.WriteLine("Check in " + resourceRow.RES_NAME);
                  resourceSvc.CheckInResources(new Guid[] { resourceRow.RES_UID },false);
               }
               Console.ForegroundColor=ConsoleColor.Yellow;
               Console.WriteLine("".PadRight(30,'-'));
               Console.ResetColor();
            }

            // retrieve the data from the server for display
            resourceDs = resourceSvc.ReadResources(filterXml, false);
            WriteTablesToConsole(resourceDs.Tables);

         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }

      private static void WriteResourceState(SvcResource.ResourceDataSet resourceDs)
      {
         foreach (SvcResource.ResourceDataSet.ResourcesRow row in resourceDs.Resources.Rows)
         {
            // If the resource type is greater than the inactive offset, it is inactive.
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.Write(row.RES_NAME);
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.Write(" is ");
            if (row.RES_TYPE &amp;gt; (int)PSLibrary.Resource.Type.INACTIVATED_OFFSET)
            {
               Console.ForegroundColor = ConsoleColor.Red;
               Console.Write("Inactive\r\n");
            }
            else
            {
               Console.ForegroundColor = ConsoleColor.DarkGreen;
               Console.Write("Active\r\n");
            }
            Console.ResetColor();
         }
      }
      private static Guid[] EnsureEnterpriseResources(SvcResource.Resource resourceSvc)
      {
         string[] resourceNames = new string[] { "Lertchai Treetawatchaiwong", 
                                                 "Bricks", 
                                                 "Conference Room A",
                                                 "Rental"};
         PSLibrary.Resource.Type[] resourceTypes = new PSLibrary.Resource.Type[] { PSLibrary.Resource.Type.WorkResource, PSLibrary.Resource.Type.MaterialResource, PSLibrary.Resource.Type.WorkResource, PSLibrary.Resource.Type.CostResources };
         Guid[] resources = new Guid[resourceNames.Length];
         for (int i = 0; i &amp;lt; resourceNames.Length; i++)
         {
            resources[i] = EnsureEnterpriseResource(resourceSvc, resourceNames[i], resourceTypes[i]);
         }
         return resources;
      }
      private static Guid EnsureEnterpriseResource(SvcResource.Resource resourceSvc, string resourceName, PSLibrary.Resource.Type resourceType)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, resourceName);
         resourceFilter.Criteria = existingResource;
         string filterXml = resourceFilter.GetXml();
         resourceDs = resourceSvc.ReadResources(filterXml, false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs.Resources[0].RES_UID;
         }
         else
         {
            resourceDs = new SvcResource.ResourceDataSet();
            SvcResource.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
            resourceRow.RES_UID = Guid.NewGuid();
            resourceRow.RES_NAME = resourceName;
            resourceRow.RES_INITIALS = resourceName.Substring(0, 1) +
                              (resourceName.IndexOf(" ") &amp;gt; 0 ? resourceName.Substring(resourceName.IndexOf(" ") + 1, 1) : "");
            resourceRow.RES_TYPE = (int)resourceType;
            resourceDs.Resources.AddResourcesRow(resourceRow);
            resourceSvc.CreateResources(resourceDs, false, true);
            return resourceRow.RES_UID;
         }
      }

      private static PSLibrary.Filter GetResourceFilter(Guid[] resources)
      {
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();
         PSLibrary.Filter resourceFilter = new PSLibrary.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CODEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_ACCRUE_ATColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_BOOKING_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CAN_LEVELColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CHECKOUTBYColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_CHECKOUTDATEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_COST_CENTERColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_DEF_ASSN_OWNERColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_EXTERNAL_IDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_GROUPColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HAS_NOTESColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HIRE_DATEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HYPERLINK_ADDRESSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HYPERLINK_FRIENDLY_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_HYPERLINK_SUB_ADDRESSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_IDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_IS_TEAMColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_IS_WINDOWS_USERColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_MATERIAL_LABELColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         //resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NOTESColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_PHONETICSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_RTF_NOTESColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TERMINATION_DATEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TIMESHEET_MGR_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));


         //List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt; resourceFieldOps = new List&amp;lt;PSLibrary.Filter.FieldOperator&amp;gt;();
         PSLibrary.Filter.IOperator[] fos = new PSLibrary.Filter.IOperator[resources.Length];
         for (int i = 0; i &amp;lt; resources.Length; i++)
         {
            fos[i] = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_UIDColumn.ColumnName, resources[i]);
         }

         PSLibrary.Filter.LogicalOperator lo = new Microsoft.Office.Project.Server.Library.Filter.LogicalOperator(PSLibrary.Filter.LogicalOperationType.Or, fos);

         resourceFilter.Criteria = lo;
         return resourceFilter;
      }
      // Write all contents of a table collection to the console
      private static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // add a space so it won't wrap
            tableWidth += 1;
            // make the console as wide as the widest table
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  dataString = row[i].ToString();
                  // truncate output if it is wider than 
                  // the desired column width
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // Helper function for WriteTablesToConsole
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: may not handle byte[]data types well
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         //return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise use the max col width
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // truncate if over the max length
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // always be at least as wide as the colum name
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadUserList">
      <MemberSignature Language="C#" Value="public WebSvcResource.ResourceDataSet ReadUserList (WebSvcResource.ResourceActiveFilter filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcResource.ResourceDataSet ReadUserList(valuetype WebSvcResource.ResourceActiveFilter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.ReadUserList(WebSvcResource.ResourceActiveFilter)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadUserList (filter As ResourceActiveFilter) As ResourceDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcResource::ResourceDataSet ^ ReadUserList(WebSvcResource::ResourceActiveFilter filter);" />
      <MemberSignature Language="F#" Value="member this.ReadUserList : WebSvcResource.ResourceActiveFilter -&gt; WebSvcResource.ResourceDataSet" Usage="resource.ReadUserList filter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/ReadUserList", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcResource.ResourceDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="WebSvcResource.ResourceActiveFilter" />
      </Parameters>
      <Docs>
        <param name="filter">
          <see cref="T:WebSvcResource.ResourceActiveFilter" /> enum filtering to <b>Active</b>, <b>Inactive</b>, or <b>All</b> users.</param>
        <summary>Gets a list of all active and disabled Project Server users. The list includes the resource GUID (RES_UID) and name (RES_NAME).</summary>
        <returns>A <see cref="T:WebSvcResource.ResourceDataSet" /> populated with only the resource GUID (RES_UID) and name (RES_NAME) of the selected users.</returns>
        <remarks>
          <para>
            <see cref="M:WebSvcResource.Resource.ReadResources(System.String,System.Boolean)" /> returns more robust resource data and does not require <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageSecurity" /> permissions.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageUsersAndGroups" />
              </term>
              <description>Allows a user to manage all enterprise users, resources and groups. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageSecurity" />
              </term>
              <description>Allows a user to manage security. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>This example retrieves enterprise resources, creating several if they are not present, reads the resources and writes them to the console.</para>
          <para>Please see Prerequisites for Reference Code Samples for critical information on running this code sample.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.ReadUserList
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";

            // Set up the Web service objects
            SvcResource.Resource resourceSvc = new SvcResource.Resource();
            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.UseDefaultCredentials = true;

            // Read any users on the system
            Console.WriteLine("Reading in the users");
            SvcResource.ResourceDataSet resourceDs= resourceSvc.ReadUserList(SvcResource.ResourceActiveFilter.All);

            // Write the project tables to the console
            Console.WriteLine("And here it is:");
            WriteTablesToConsole(resourceDs.Tables);
         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }

      // Write all contents of a table collection to the console
      private static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // add a space so it won't wrap
            tableWidth += 1;
            // make the console as wide as the widest table
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  dataString = row[i].ToString();
                  // truncate output if it is wider than 
                  // the desired column width
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // Helper function for WriteTablesToConsole
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: may not handle byte[]data types well
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         //return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise use the max col width
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // truncate if over the max length
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // always be at least as wide as the colum name
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="SetResourceAuthorization">
      <MemberSignature Language="C#" Value="public void SetResourceAuthorization (WebSvcResource.ResourceAuthorizationDataSet users);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceAuthorization(class WebSvcResource.ResourceAuthorizationDataSet users) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.SetResourceAuthorization(WebSvcResource.ResourceAuthorizationDataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceAuthorization (users As ResourceAuthorizationDataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResourceAuthorization(WebSvcResource::ResourceAuthorizationDataSet ^ users);" />
      <MemberSignature Language="F#" Value="member this.SetResourceAuthorization : WebSvcResource.ResourceAuthorizationDataSet -&gt; unit" Usage="resource.SetResourceAuthorization users" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/SetResourceAuthorization", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="users" Type="WebSvcResource.ResourceAuthorizationDataSet" />
      </Parameters>
      <Docs>
        <param name="users">A <see cref="T:WebSvcResource.ResourceDataSet" /> containing the authorization data.</param>
        <summary>Sets authorization values for one or more resources.</summary>
        <remarks>
          <para>
            <b>SetResourceAuthorization</b> sets information about a resource such as the user logon account with the e-mail address.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageUsersAndGroups" />
              </term>
              <description>Allows a user to manage resources, users and groups. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>This example updates the permssions of the current user and reads the permissions for the current user.</para>
          <para>This sample creates a custom permission. Before you can run this sample twice, you need to remove the permission it creates. To manually delete resources, go to the Resource Center section of your Project Web App site, select your account from the select, and choose Edit Details from the Actions menu. Go to the Global Permissions section and clear the check box next to the New Project permission and click on Save.</para>
          <para>Please see Prerequisites for Reference Code Samples for critical information on running this code sample.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using PSLibrary=Microsoft.Office.Project.Server.Library;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Windows.Forms;

namespace Microsoft.SDK.Project.Samples.SetResourceAuthorization
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";


            // Set up the Web service objects
            SvcResource.Resource resourceSvc = new SvcResource.Resource();

            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.Credentials = CredentialCache.DefaultCredentials;

            // Update your own permissions
            Guid resourceUid = resourceSvc.GetCurrentUserUid();
            // Read the current permissions
            SvcResource.ResourceAuthorizationDataSet authDS = resourceSvc.ReadResourceAuthorization(resourceUid);
            Console.WriteLine("Before: ");
            WriteTablesToConsole(authDS.Tables);

            // add the custom permission
            SvcResource.ResourceAuthorizationDataSet.GlobalPermissionsRow globalPermissionsRow = authDS.GlobalPermissions.NewGlobalPermissionsRow();
            globalPermissionsRow.RES_UID = resourceUid;
            globalPermissionsRow.WSEC_ALLOW = true;
            globalPermissionsRow.WSEC_DENY  = false;
            globalPermissionsRow.WSEC_FEA_ACT_UID = PSLibrary.PSSecurityGlobalPermission.NewProject;
            authDS.GlobalPermissions.AddGlobalPermissionsRow(globalPermissionsRow);

            resourceSvc.SetResourceAuthorization(authDS);
            // Read the permissions again to see the results
            authDS = resourceSvc.ReadResourceAuthorization(resourceUid);
            Console.WriteLine("After: ");
            WriteTablesToConsole(authDS.Tables);
         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }
      // Writes all table contents to the console in a
      // relatively readable way
      private static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // add a space so it won't wrap
            tableWidth += 1;
            // make the console as wide as the widest table
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  dataString = row[i].ToString();
                  // truncate output if it is wider than 
                  // the desired column width
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // Helper function for WriteTablesToConsole
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: may not handle byte[]data types well
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         //return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise use the max col width
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // truncate if over the max length
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // always be at least as wide as the colum name
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="UpdateDelegations">
      <MemberSignature Language="C#" Value="public void UpdateDelegations (WebSvcResource.UserDelegationDataSet ds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateDelegations(class WebSvcResource.UserDelegationDataSet ds) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.UpdateDelegations(WebSvcResource.UserDelegationDataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateDelegations (ds As UserDelegationDataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateDelegations(WebSvcResource::UserDelegationDataSet ^ ds);" />
      <MemberSignature Language="F#" Value="member this.UpdateDelegations : WebSvcResource.UserDelegationDataSet -&gt; unit" Usage="resource.UpdateDelegations ds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/UpdateDelegations", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ds" Type="WebSvcResource.UserDelegationDataSet" />
      </Parameters>
      <Docs>
        <param name="ds">To be added.</param>
        <summary>Updates delegation information used to manage resources.</summary>
        <remarks>
          <para />
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageMyDelegations" />
              </term>
              <description>Allows a user to manage his or her own user delegations.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageMyResourceDelegations" />
              </term>
              <description>Allows a user to manage his or her own resource delegations.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateResources">
      <MemberSignature Language="C#" Value="public WebSvcResource.ResourceDataSet UpdateResources (WebSvcResource.ResourceDataSet rds, bool validateOnly, bool autoCheckIn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcResource.ResourceDataSet UpdateResources(class WebSvcResource.ResourceDataSet rds, bool validateOnly, bool autoCheckIn) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcResource.Resource.UpdateResources(WebSvcResource.ResourceDataSet,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpdateResources (rds As ResourceDataSet, validateOnly As Boolean, autoCheckIn As Boolean) As ResourceDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcResource::ResourceDataSet ^ UpdateResources(WebSvcResource::ResourceDataSet ^ rds, bool validateOnly, bool autoCheckIn);" />
      <MemberSignature Language="F#" Value="member this.UpdateResources : WebSvcResource.ResourceDataSet * bool * bool -&gt; WebSvcResource.ResourceDataSet" Usage="resource.UpdateResources (rds, validateOnly, autoCheckIn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Resource/UpdateResources", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Resource/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcResource.ResourceDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rds" Type="WebSvcResource.ResourceDataSet" />
        <Parameter Name="validateOnly" Type="System.Boolean" />
        <Parameter Name="autoCheckIn" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rds">A <see cref="T:WebSvcResource.ResourceDataSet" /> containing the updated resource data.</param>
        <param name="validateOnly">If <b>true</b>, only validates the data and does not create the new resources.</param>
        <param name="autoCheckIn">If <b>true</b>, automatically checks in the resource data.</param>
        <summary>Updates, deletes, or creates one or more resources.</summary>
        <returns>The returned <b>ResourceDataSet</b> contains the changes made.</returns>
        <remarks>
          <para>
            <b>UpdateResources</b> deletes a resource if the <b>ResourceDataSet</b> parameter does not contain information for an existing resource, creates a resource if the resource does not exist in the enterprise resource pool, or updates existing resources with new data.</para>
          <para>Each resource to be modified or deleted needs to be checked out to the current authenticated user before calling <b>UpdateResources</b>.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageUsersAndGroups" />
              </term>
              <description>Allows a user to manage all enterprise users, resources and groups. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.NewResource" />
              </term>
              <description>Allows a user to create a new resource. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageActiveDirectorySettings" />
              </term>
              <description>Allows a user to manage user information. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.EditEnterpriseResourceData" />
              </term>
              <description>Allows a user to edit or delete this resource. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example gets a list of all existing enterprise resources, checks out the first resource, updates the name of the resource, and then saves the change to the server and checks in the resource.</para>
          <para>Please see Prerequisites for Reference Code Samples for critical information on running this code sample.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Windows.Forms;
using System.Web.Services.Protocols;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.Office.Project.Samples.UpdateResources
{
   class Program
   {
       static void Main(string[] args)
      { 
         const string PROJECT_SERVER_URI    = "http://ServerName/ProjectServerName/";
         const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
         
         try
         {
            // Set up the resource object and dataset
            SvcResource.Resource resourceSvc = new SvcResource.Resource();
            SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();            
            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.Credentials = CredentialCache.DefaultCredentials;

            // Read read all the resources
            resourceDs = resourceSvc.ReadResources(string.Empty, false);

            // Check out the first resource for updating.
            //  - This assumes the resource is checked in.
            //  - An error occurs if the resource is already checked out.
            resourceSvc.CheckOutResources(new Guid[] { resourceDs.Resources[0].RES_UID });

            // Update the resource name of the first row.
            Console.WriteLine ("Modifying resource " + resourceDs.Resources[0].RES_ID + " (" + resourceDs.Resources[0].RES_NAME + ")");
            resourceDs.Resources[0].RES_NAME += " Modified at: " + DateTime.Now.ToShortTimeString();

            // Send the update to the server and automatically check in the changed row
            resourceSvc.UpdateResources(resourceDs, false, true);
         }
         catch (System.Web.Services.Protocols.SoapException ex)
         {
            string errMess = "";
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();

            for (int j = 0; j &amp;lt; errors.Length; j++)
               errMess = errMess + errors[j].ErrId.ToString() + "\n";
            errMess = errMess + "\n" + ex.Message.ToString();

            MessageBox.Show(errMess, "Error", MessageBoxButtons.OK,
               MessageBoxIcon.Error);
         }
         catch (WebException ex)
         {
            string message = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            MessageBox.Show(message, "Project Creation Error",
               MessageBoxButtons.OK, MessageBoxIcon.Error);
         }
         catch (Exception ex)
         {
            MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK,
         MessageBoxIcon.Error);
         }
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>