<Type Name="Driver" FullName="WebSvcDriver.Driver">
  <TypeSignature Language="C#" Value="public class Driver : System.Web.Services.Protocols.SoapHttpClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Driver extends System.Web.Services.Protocols.SoapHttpClientProtocol" />
  <TypeSignature Language="DocId" Value="T:WebSvcDriver.Driver" />
  <TypeSignature Language="VB.NET" Value="Public Class Driver&#xA;Inherits SoapHttpClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class Driver : System::Web::Services::Protocols::SoapHttpClientProtocol" />
  <TypeSignature Language="F#" Value="type Driver = class&#xA;    inherit SoapHttpClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>ProjectServerServices</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.SoapHttpClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Web.Services.WebServiceBinding(Name="DriverSoap", Namespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides methods that manage business drivers for analysis of project priorities and strategic business rule definitions.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Driver ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcDriver.Driver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Driver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a <b>Driver</b> object from the ASMX-based <b>Driver</b> web service.</summary>
        <remarks>
          <para>To create an object that is equivalent to <b>Driver</b> by using the Windows Communication Foundation (WCF) API, use one of the <b>DriverClient</b> constructors.</para>
          <para />
        </remarks>
        <example>
          <para>In the following statement, <b>DriverWebSvc</b> is an arbitrary namespace for the ASMX-based <b>Driver</b> web service.</para>
          <code>private static DriverWebSvc.Driver driver = new DriverWebSvc.Driver();</code>
          <para>In the following statement, <b>SvcDriver</b> is an arbitrary namespace for the WCF-based <b>Driver</b> service. The <paramref name="endpt" /> parameter is a <b>String</b> value that specifies the name of the client endpoint address in the app.config file (or in the web.config file for web applications).</para>
          <code>private static SvcDriver.DriverClient driverClient = new SvcDriver.DriverClient(endpt);</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateDriver">
      <MemberSignature Language="C#" Value="public void CreateDriver (WebSvcDriver.DriverDataSet dsDriver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateDriver(class WebSvcDriver.DriverDataSet dsDriver) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcDriver.Driver.CreateDriver(WebSvcDriver.DriverDataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateDriver (dsDriver As DriverDataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateDriver(WebSvcDriver::DriverDataSet ^ dsDriver);" />
      <MemberSignature Language="F#" Value="member this.CreateDriver : WebSvcDriver.DriverDataSet -&gt; unit" Usage="driver.CreateDriver dsDriver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Driver/CreateDriver", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dsDriver" Type="WebSvcDriver.DriverDataSet" />
      </Parameters>
      <Docs>
        <param name="dsDriver">Contains one row of driver data in the <b>DriverDataTable</b>, <b>DriverImpactStatementsDataTable</b>, and optionally the <b>DriverDepartmentsDataTable</b> instances.</param>
        <summary>Creates a business strategy driver that can be associated with departments and project impacts.</summary>
        <remarks>
          <para>
            <b>Note</b>: The <b>CreateDriver</b> method cannot create multiple drivers at one time.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageDrivers" />
              </term>
              <description>Allows a user to create drivers for project portfolio analyses. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The example uses the <b>SvcDriver</b> namespace in the ProjectServerServices.dll proxy assembly. The <b>ConfigClientEndpoints</b> method uses an app.config file for setting the WCF binding, behavior, and endpoint. For information about creating a PSI proxy assembly and an app.config file, see Prerequisites for WCF-Based Code Samples.</para>
          <para>The <b>CreateDrivers</b> method calls the <b>CreateDriver</b> method three times, to create three drivers and their impact statements. It adds a <b>DriverRow</b> object and a <b>DriverImpactStatementsRow</b> object to the <b>DriverDataSet</b> each time. The contents of the <b>drvInfoDS</b> are written to <b>Drivers.xml</b>. Following is a sample of a driver and its impact statements.</para>
          <code>&amp;lt;?xml version="1.0" standalone="yes"?&amp;gt;
&amp;lt;DriverDataSet xmlns="http://schemas.microsoft.com/office/project/server/webservices/DriverDataSet/"&amp;gt;
&amp;lt;Driver&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;e0be5f7d-8c04-4875-be84-04124a6b1206&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_NAME&amp;gt;&lt;/span&gt;Driver-e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_DESCRIPTION&amp;gt;&lt;/span&gt;testDriver-e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER_DESCRIPTION&amp;gt;
&amp;lt;/Driver&amp;gt;
&amp;lt;Driver&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;d143b447-4cc3-4f9e-a532-91afdb1db1bd&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_NAME&amp;gt;&lt;/span&gt;Driver-d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_DESCRIPTION&amp;gt;&lt;/span&gt;testDriver-d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER_DESCRIPTION&amp;gt;
&amp;lt;/Driver&amp;gt;
&amp;lt;Driver&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;ff0ba75b-a410-4620-bbfe-375a1b1fb6f3&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_NAME&amp;gt;&lt;/span&gt;Driver-ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_DESCRIPTION&amp;gt;&lt;/span&gt;testDriver-ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER_DESCRIPTION&amp;gt;
&amp;lt;/Driver&amp;gt;
&amp;lt;DriverImpactStatements&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;e0be5f7d-8c04-4875-be84-04124a6b1206&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PROJECT_IMPACT_CF_UID&amp;gt;&lt;/span&gt;1728d080-ba74-4d86-a29a-27e4318001c4
&amp;lt;/PROJECT_IMPACT_CF_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;53c910b9-f205-4d77-a093-058858f9f297
&amp;lt;/LT_STRUCT_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DESCRIPTION&amp;gt;&lt;/span&gt;PROJECT_IMPACT_NONE_VALUE_TXT-e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DESCRIPTION&amp;gt;
&amp;lt;/DriverImpactStatements&amp;gt;
&amp;lt;DriverImpactStatements&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;e0be5f7d-8c04-4875-be84-04124a6b1206&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PROJECT_IMPACT_CF_UID&amp;gt;&lt;/span&gt;1728d080-ba74-4d86-a29a-27e4318001c4
&amp;lt;/PROJECT_IMPACT_CF_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;779271c4-894d-4385-9e33-1251a9e80541
&amp;lt;/LT_STRUCT_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DESCRIPTION&amp;gt;&lt;/span&gt;PROJECT_IMPACT_LOW_VALUE_TXT-e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DESCRIPTION&amp;gt;
&amp;lt;/DriverImpactStatements&amp;gt;
&amp;lt;DriverImpactStatements&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;e0be5f7d-8c04-4875-be84-04124a6b1206&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PROJECT_IMPACT_CF_UID&amp;gt;&lt;/span&gt;1728d080-ba74-4d86-a29a-27e4318001c4
&amp;lt;/PROJECT_IMPACT_CF_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;877999ee-97f7-4048-9052-aef6c161039c
&amp;lt;/LT_STRUCT_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DESCRIPTION&amp;gt;&lt;/span&gt;PROJECT_IMPACT_MODERATE_VALUE_TXT-e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DESCRIPTION&amp;gt;
&amp;lt;/DriverImpactStatements&amp;gt;
&amp;lt;DriverImpactStatements&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;e0be5f7d-8c04-4875-be84-04124a6b1206&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PROJECT_IMPACT_CF_UID&amp;gt;&lt;/span&gt;1728d080-ba74-4d86-a29a-27e4318001c4
&amp;lt;/PROJECT_IMPACT_CF_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;426f8d32-6961-4b4b-91ab-705f0200f45e&amp;lt;/LT_STRUCT_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DESCRIPTION&amp;gt;&lt;/span&gt;PROJECT_IMPACT_STRONG_VALUE_TXT-e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DESCRIPTION&amp;gt;
&amp;lt;/DriverImpactStatements&amp;gt;
&amp;lt;DriverImpactStatements&amp;gt;
&amp;lt;DRIVER_UID&amp;gt;e0be5f7d-8c04-4875-be84-04124a6b1206&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PROJECT_IMPACT_CF_UID&amp;gt;&lt;/span&gt;1728d080-ba74-4d86-a29a-27e4318001c4
&amp;lt;/PROJECT_IMPACT_CF_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;628b9396-d788-4f0f-a62f-242a20091cab&amp;lt;/LT_STRUCT_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DESCRIPTION&amp;gt;&lt;/span&gt;PROJECT_IMPACT_EXTREME_VALUE_TXT-e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DESCRIPTION&amp;gt;
&amp;lt;/DriverImpactStatements&amp;gt;
&amp;lt;DriverImpactStatements&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;d143b447-4cc3-4f9e-a532-91afdb1db1bd&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PROJECT_IMPACT_CF_UID&amp;gt;&lt;/span&gt;1728d080-ba74-4d86-a29a-27e4318001c4
&amp;lt;/PROJECT_IMPACT_CF_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;53c910b9-f205-4d77-a093-058858f9f297&amp;lt;/LT_STRUCT_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DESCRIPTION&amp;gt;&lt;/span&gt;PROJECT_IMPACT_NONE_VALUE_TXT-d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DESCRIPTION&amp;gt;
&amp;lt;/DriverImpactStatements&amp;gt;
&amp;lt;DriverImpactStatements&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;d143b447-4cc3-4f9e-a532-91afdb1db1bd&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PROJECT_IMPACT_CF_UID&amp;gt;&lt;/span&gt;1728d080-ba74-4d86-a29a-27e4318001c4
&amp;lt;/PROJECT_IMPACT_CF_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;779271c4-894d-4385-9e33-1251a9e80541&amp;lt;/LT_STRUCT_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DESCRIPTION&amp;gt;&lt;/span&gt;PROJECT_IMPACT_LOW_VALUE_TXT-d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DESCRIPTION&amp;gt;
&amp;lt;/DriverImpactStatements&amp;gt;
&amp;lt;DriverImpactStatements&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;d143b447-4cc3-4f9e-a532-91afdb1db1bd&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PROJECT_IMPACT_CF_UID&amp;gt;&lt;/span&gt;1728d080-ba74-4d86-a29a-27e4318001c4
&amp;lt;/PROJECT_IMPACT_CF_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;877999ee-97f7-4048-9052-aef6c161039c&amp;lt;/LT_STRUCT_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DESCRIPTION&amp;gt;&lt;/span&gt;PROJECT_IMPACT_MODERATE_VALUE_TXT-d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DESCRIPTION&amp;gt;
&amp;lt;/DriverImpactStatements&amp;gt;
&amp;lt;DriverImpactStatements&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;d143b447-4cc3-4f9e-a532-91afdb1db1bd&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PROJECT_IMPACT_CF_UID&amp;gt;&lt;/span&gt;1728d080-ba74-4d86-a29a-27e4318001c4
&amp;lt;/PROJECT_IMPACT_CF_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;426f8d32-6961-4b4b-91ab-705f0200f45e&amp;lt;/LT_STRUCT_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DESCRIPTION&amp;gt;&lt;/span&gt;PROJECT_IMPACT_STRONG_VALUE_TXT-d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DESCRIPTION&amp;gt;
&amp;lt;/DriverImpactStatements&amp;gt;
&amp;lt;DriverImpactStatements&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;d143b447-4cc3-4f9e-a532-91afdb1db1bd&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PROJECT_IMPACT_CF_UID&amp;gt;&lt;/span&gt;1728d080-ba74-4d86-a29a-27e4318001c4
&amp;lt;/PROJECT_IMPACT_CF_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;628b9396-d788-4f0f-a62f-242a20091cab&amp;lt;/LT_STRUCT_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DESCRIPTION&amp;gt;&lt;/span&gt;PROJECT_IMPACT_EXTREME_VALUE_TXT-d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DESCRIPTION&amp;gt;
&amp;lt;/DriverImpactStatements&amp;gt;
&amp;lt;DriverImpactStatements&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;ff0ba75b-a410-4620-bbfe-375a1b1fb6f3&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PROJECT_IMPACT_CF_UID&amp;gt;&lt;/span&gt;1728d080-ba74-4d86-a29a-27e4318001c4
&amp;lt;/PROJECT_IMPACT_CF_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;53c910b9-f205-4d77-a093-058858f9f297&amp;lt;/LT_STRUCT_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DESCRIPTION&amp;gt;&lt;/span&gt;PROJECT_IMPACT_NONE_VALUE_TXT-ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DESCRIPTION&amp;gt;
&amp;lt;/DriverImpactStatements&amp;gt;
&amp;lt;DriverImpactStatements&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;ff0ba75b-a410-4620-bbfe-375a1b1fb6f3&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PROJECT_IMPACT_CF_UID&amp;gt;&lt;/span&gt;1728d080-ba74-4d86-a29a-27e4318001c4
&amp;lt;/PROJECT_IMPACT_CF_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;779271c4-894d-4385-9e33-1251a9e80541&amp;lt;/LT_STRUCT_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DESCRIPTION&amp;gt;&lt;/span&gt;PROJECT_IMPACT_LOW_VALUE_TXT-ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DESCRIPTION&amp;gt;
&amp;lt;/DriverImpactStatements&amp;gt;
&amp;lt;DriverImpactStatements&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;ff0ba75b-a410-4620-bbfe-375a1b1fb6f3&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PROJECT_IMPACT_CF_UID&amp;gt;&lt;/span&gt;1728d080-ba74-4d86-a29a-27e4318001c4
&amp;lt;/PROJECT_IMPACT_CF_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;877999ee-97f7-4048-9052-aef6c161039c&amp;lt;/LT_STRUCT_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DESCRIPTION&amp;gt;&lt;/span&gt;PROJECT_IMPACT_MODERATE_VALUE_TXT-ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DESCRIPTION&amp;gt;
&amp;lt;/DriverImpactStatements&amp;gt;
&amp;lt;DriverImpactStatements&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;ff0ba75b-a410-4620-bbfe-375a1b1fb6f3&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PROJECT_IMPACT_CF_UID&amp;gt;&lt;/span&gt;1728d080-ba74-4d86-a29a-27e4318001c4
&amp;lt;/PROJECT_IMPACT_CF_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;426f8d32-6961-4b4b-91ab-705f0200f45e&amp;lt;/LT_STRUCT_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DESCRIPTION&amp;gt;&lt;/span&gt;PROJECT_IMPACT_STRONG_VALUE_TXT-ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DESCRIPTION&amp;gt;
&amp;lt;/DriverImpactStatements&amp;gt;
&amp;lt;DriverImpactStatements&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;ff0ba75b-a410-4620-bbfe-375a1b1fb6f3&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PROJECT_IMPACT_CF_UID&amp;gt;&lt;/span&gt;1728d080-ba74-4d86-a29a-27e4318001c4
&amp;lt;/PROJECT_IMPACT_CF_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;628b9396-d788-4f0f-a62f-242a20091cab&amp;lt;/LT_STRUCT_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DESCRIPTION&amp;gt;&lt;/span&gt;PROJECT_IMPACT_EXTREME_VALUE_TXT-ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DESCRIPTION&amp;gt;
&amp;lt;/DriverImpactStatements&amp;gt;
&amp;lt;/DriverDataSet&amp;gt;
</code>
          <para>Following is the complete sample code.</para>
          <code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.ServiceModel;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.Drivers
{
    class Driver
    {
        private static SvcDriver.DriverClient driverClient;
        private const string DRIVER_ENDPOINT = "basicHttp_Driver";
        private const string OUTPUT_FILES = @"C:\Projects\Samples\Output\";
        private static string outFilePathDriverImpactStmt;
        private static string outFilePathDriverList;
        private static string outFilePathPrioritizationInfo;
        private static string outFilePathPrioritizationRow;
        private static string OutFilePathDrivers;
        private Dictionary&amp;lt;Guid, SortedList&amp;lt;int, SortedList&amp;lt;Guid, object&amp;gt;&amp;gt;&amp;gt; 
            lookupTableValues = 
            new Dictionary&amp;lt;Guid, SortedList&amp;lt;int, SortedList&amp;lt;Guid, object&amp;gt;&amp;gt;&amp;gt;();

        static void Main(string[] args)
        {
            // Configure the endpoints.
            ConfigClientEndpoints(DRIVER_ENDPOINT);

            // If output directory does not exist, create it.
            if (!Directory.Exists(OUTPUT_FILES))
            {
                Directory.CreateDirectory(OUTPUT_FILES);
            }

            outFilePathDriverImpactStmt = OUTPUT_FILES 
                + "DriverImpactStatements.xml";
            outFilePathDriverList = OUTPUT_FILES 
                + "DriverList.xml";
            outFilePathPrioritizationInfo = OUTPUT_FILES 
                + "PrioritizationInfo.xml";
            outFilePathPrioritizationRow = OUTPUT_FILES 
                + "CreatePrioritization.xml";
            OutFilePathDrivers = OUTPUT_FILES + "Drivers.xml";

            // Create the Driver dataset.
            SvcDriver.DriverDataSet driverInfoDS = 
                new SvcDriver.DriverDataSet(); ;

            // Create the drivers.
            driverInfoDS = CreateDrivers();
            driverInfoDS.WriteXml(OutFilePathDrivers);

            // Get the first driver and update its impact statements.
            Guid DRV_UID = 
                new Guid(driverInfoDS.Driver.Rows[0][0].ToString());

            // Update driver impact statements.
            UpdateImpactStatement(DRV_UID);

            // Read the list of drivers.
            SvcDriver.DriverDataSet driverListDS = 
                driverClient.ReadDriverList();
            driverListDS.WriteXml(outFilePathDriverList);
            Console.WriteLine("\nSee XML output of the Updated DataSet at {0}",
            outFilePathDriverList);

            // Create prioritization.
            PrioritizationInfo priInfo = CreateNewPrioritization();
            
            // Create a guids list and add the prioritization GUID to it.
            List&amp;lt;Guid&amp;gt; guids = new List&amp;lt;Guid&amp;gt;();
            guids.Add(priInfo.UniqueId);

            // Read prioritization.
            SvcDriver.DriverPrioritizationDataSet prioritizationDS = 
                driverClient.ReadPrioritization(priInfo.UniqueId);

            // Look-up-table values for comparison (hard-coded here).
            Guid[] lookUpTableValues = new Guid[2];

            // The lookup table value is greater.
            lookUpTableValues[0] = new Guid("3E0D4FFF-52A6-4235-9B2D-8FB26D74A139");
            // The lookup table value is less.
            lookUpTableValues[1] = 
                new Guid("9CECF611-8F36-4CA2-89E4-640537848513");

            // Add drivers to prioritization.
            prioritizationDS = UpdatePrioritizationInfo(
                driverInfoDS, priInfo, prioritizationDS, lookUpTableValues);

            // Read updated prioritization information.
            SvcDriver.DriverPrioritizationDataSet updatedPrioritizationDS = 
                driverClient.ReadPrioritization(priInfo.UniqueId);
            updatedPrioritizationDS.WriteXml(outFilePathPrioritizationInfo);
            Console.WriteLine(
                "\nSee XML output of the Updated Prioritization at {0}",
                outFilePathPrioritizationInfo);

            // Delete prioritization.
            driverClient.DeletePrioritizations(guids.ToArray());
            Console.WriteLine(" Prioritization {0} deleted", priInfo.UniqueId);
            guids.Clear();

            // Delete drivers.
            foreach (SvcDriver.DriverDataSet.DriverRow drvRow in
                driverInfoDS.Driver.Rows)
            {
                guids.Add(drvRow.DRIVER_UID);
            }
            driverClient.DeleteDrivers(guids.ToArray());
            Console.WriteLine("Deleted drivers");
            Console.ReadKey();
        }

        // Update a prioritization.
        private static SvcDriver.DriverPrioritizationDataSet
            UpdatePrioritizationInfo(
            SvcDriver.DriverDataSet driverInfoDS,
            PrioritizationInfo priInfo,
            SvcDriver.DriverPrioritizationDataSet prioritizationDS,
            Guid[] lookUpTableValues)
        {
            // Add a prioritization row.
            foreach (SvcDriver.DriverDataSet.DriverRow dRow in
                driverInfoDS.Driver.Rows)
            {
                SvcDriver.DriverPrioritizationDataSet.PrioritizationEntriesDataTable
                    prioEntries = prioritizationDS.PrioritizationEntries;
                SvcDriver.DriverPrioritizationDataSet.PrioritizationEntriesRow
                    prioritizationEntriesRow =
                    prioEntries.NewPrioritizationEntriesRow();
                prioritizationEntriesRow.PRIORITIZATION_UID =
                    priInfo.UniqueId;
                prioritizationEntriesRow.DRIVER_UID = dRow.DRIVER_UID;
                prioritizationEntriesRow.DRIVER_DESCRIPTION =
                    dRow.DRIVER_DESCRIPTION;
                prioEntries.AddPrioritizationEntriesRow(
                    prioritizationEntriesRow);
            }

            // Add driver-to-driver relations.
            for (int i = 0; i &amp;lt; driverInfoDS.Driver.Rows.Count - 1; i++)
            {
                for (int j = i + 1; j &amp;lt; driverInfoDS.Driver.Rows.Count; j++)
                {
                    SvcDriver.DriverPrioritizationDataSet.DriverRelationsRow
                        driverRelationsRow =
                        prioritizationDS.DriverRelations.NewDriverRelationsRow();
                    driverRelationsRow.PRIORITIZATION_UID = priInfo.UniqueId;
                    driverRelationsRow.DRIVER1_UID =
                        new Guid(driverInfoDS.Driver.Rows[i][0].ToString());
                    driverRelationsRow.DRIVER2_UID =
                        new Guid(driverInfoDS.Driver.Rows[j][0].ToString());
                    driverRelationsRow.LT_STRUCT_UID = lookUpTableValues[i];

                    prioritizationDS.DriverRelations.AddDriverRelationsRow(
                        driverRelationsRow);

                    // Also save the complement values.
                    Guid complementCodeValue =
                        PSLibrary.LookupTables.GetRelativeImportanceComplement(
                        lookUpTableValues[i]);
                    if (complementCodeValue != Guid.Empty)
                    {
                        driverRelationsRow =
                            prioritizationDS.DriverRelations.NewDriverRelationsRow();
                        driverRelationsRow.PRIORITIZATION_UID = priInfo.UniqueId;
                        driverRelationsRow.DRIVER1_UID =
                            new Guid(driverInfoDS.Driver.Rows[j][0].ToString());
                        driverRelationsRow.DRIVER2_UID =
                            new Guid(driverInfoDS.Driver.Rows[i][0].ToString());
                        driverRelationsRow.LT_STRUCT_UID = complementCodeValue;
                        prioritizationDS.DriverRelations.AddDriverRelationsRow(
                            driverRelationsRow);
                    }
                }
            }

            try
            {
                Console.WriteLine("Updating the DataSet....");
                prioritizationDS =
                    driverClient.UpdatePrioritization(prioritizationDS);
                Console.WriteLine(" DataSet updated successfully!");
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return prioritizationDS;
        }
        
        // Create a new prioritization.
        private static PrioritizationInfo CreateNewPrioritization()
        {
                SvcDriver.DriverPrioritizationDataSet driverPrioritizationDS =
                    new SvcDriver.DriverPrioritizationDataSet();
                PrioritizationInfo priInfo = new PrioritizationInfo();
                priInfo.UniqueId = Guid.NewGuid();
                priInfo.Name = "Prioritization-" + priInfo.UniqueId;
                priInfo.Description = "Test pri";
            try
            {
                SvcDriver.DriverPrioritizationDataSet.PrioritizationRow 
                    prioritizationRow =
                    driverPrioritizationDS.Prioritization.NewPrioritizationRow();
                prioritizationRow.PRIORITIZATION_UID = priInfo.UniqueId;
                prioritizationRow.PRIORITIZATION_NAME = priInfo.Name;
                prioritizationRow.PRIORITIZATION_DESCRIPTION = 
                    priInfo.Description;
                prioritizationRow.RELATIVE_IMPORTANCE_CF_UID = 
                    PSLibrary.CustomField.RELATIVE_IMPORTANCE_MD_PROP_UID;
                prioritizationRow.PRIORITIZATION_IS_MANUAL = false;

                driverPrioritizationDS.Prioritization.AddPrioritizationRow(
                    prioritizationRow);
                Console.WriteLine("Prioritization: Adding driver prioritization"
                    + priInfo.Name);
                driverClient.CreatePrioritization(driverPrioritizationDS);
                Console.WriteLine("Prioritization: Creation done");
                driverPrioritizationDS.WriteXml(outFilePathPrioritizationRow);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return priInfo;
        }

        // Configure the custom field client endpoints.
        public static void ConfigClientEndpoints(string endpt)
        {
            driverClient = new SvcDriver.DriverClient(endpt);
        }

        // Create drivers with impact statements.
        private static SvcDriver.DriverDataSet CreateDrivers()
        {
            DriverInfo drvInfo = new DriverInfo();
            SvcDriver.DriverDataSet updatedDriverDS = 
                new SvcDriver.DriverDataSet();
            try
            {
                // Creates three drivers and the impact statements for each.
                for (int i = 0; i &amp;lt; 3; i++)
                {
                    SvcDriver.DriverDataSet drvDS =
                        new SvcDriver.DriverDataSet();
                    drvInfo.UniqueId = Guid.NewGuid();
                    drvInfo.Name = "Driver-" + drvInfo.UniqueId;
                    drvInfo.Description = "test" + drvInfo.Name;
                    drvInfo.StatementNone = "PROJECT_IMPACT_NONE_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementLow = "PROJECT_IMPACT_LOW_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementModerate = "PROJECT_IMPACT_MODERATE_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementStrong = "PROJECT_IMPACT_STRONG_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementExtreme = "PROJECT_IMPACT_EXTREME_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;

                    SvcDriver.DriverDataSet.DriverRow drvRow = 
                        drvDS.Driver.NewDriverRow();
                    drvRow.DRIVER_UID = drvInfo.UniqueId;
                    drvRow.DRIVER_NAME = drvInfo.Name;
                    drvRow.DRIVER_DESCRIPTION = drvInfo.Description;
                    drvDS.Driver.AddDriverRow(drvRow);

                    SvcDriver.DriverDataSet.DriverImpactStatementsDataTable
                    drvImpStmts = drvDS.DriverImpactStatements;

                    SvcDriver.DriverDataSet.DriverImpactStatementsRow 
                        stmtRow = drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_NONE_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementNone;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_LOW_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementLow;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_MODERATE_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementModerate;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_STRONG_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementStrong;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_EXTREME_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementExtreme;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    Console.WriteLine("Adding driver " + drvInfo.Name);
                    driverClient.CreateDriver(
                        (SvcDriver.DriverDataSet)drvDS);
                    Console.WriteLine("Drivers {0} created successfully!", i);
                    updatedDriverDS.Merge(drvDS);
                }
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return updatedDriverDS;
        }

        // Update the driver impact statements.
        private static void UpdateImpactStatement(Guid DriverGuid)
        {
            try
            {
                Guid LT_UID = 
                    new Guid("779271C4-894D-4385-9E33-1251A9E80541");
                Guid IMPACT_UID = 
                    new Guid("1728D080-BA74-4D86-A29A-27E4318001C4");
                SvcDriver.DriverDataSet drvInfoDS = 
                    driverClient.ReadDriver(DriverGuid);
                SvcDriver.DriverDataSet.DriverImpactStatementsRow impactRow;
                SvcDriver.DriverDataSet.DriverImpactStatementsDataTable 
                    drvImpactStmts = drvInfoDS.DriverImpactStatements;
                impactRow = 
                  drvImpactStmts.FindByDRIVER_UIDPROJECT_IMPACT_CF_UIDLT_STRUCT_UID(
                  DriverGuid, IMPACT_UID, LT_UID);
                impactRow.DESCRIPTION = "new desc";
                driverClient.UpdateDriver(drvInfoDS);
                drvInfoDS.DriverImpactStatements.WriteXml(
                    outFilePathDriverImpactStmt);
                Console.WriteLine(
                    "\nSee XML output of the Updated DataSet at {0}",
                outFilePathDriverImpactStmt);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
        }
    }

    // This class contains the driver information.
    public class DriverInfo
    {
        private Guid driverGuid = new Guid();

        public Guid UniqueId
        {
            get { return this.driverGuid; }
            set { this.driverGuid = value; }
        }

        private string driverName = string.Empty;

        public string Name
        {
            get { return this.driverName; }
            set { this.driverName = value; }
        }

        private string driverDescription = string.Empty;

        public string Description
        {
            get { return this.driverDescription; }
            set { this.driverDescription = value; }
        }

        public static int DriverType
        {
            get { return (int)PSLibrary.Optimizer.OptimizerEntities.Driver; }
        }

        private string statementNone = string.Empty;

        public string StatementNone
        {
            get { return this.statementNone; }
            set { this.statementNone = value; }
        }

        private string statementLow = string.Empty;

        public string StatementLow
        {
            get { return this.statementLow; }
            set { this.statementLow = value; }
        }

        private string statementModerate = string.Empty;

        public string StatementModerate
        {
            get { return this.statementModerate; }
            set { this.statementModerate = value; }
        }

        private string statementStrong = string.Empty;

        public string StatementStrong
        {
            get { return this.statementStrong; }
            set { this.statementStrong = value; }
        }

        private string statementExtreme = string.Empty;

        public string StatementExtreme
        {
            get { return this.statementExtreme; }
            set { this.statementExtreme = value; }
        }
    }

    // This class contains the prioritization information.
    class PrioritizationInfo
    {
        private Guid prioritizationGuid = Guid.NewGuid();

        public Guid UniqueId
        {
            get { return this.prioritizationGuid; }
            set { this.prioritizationGuid = value; }
        }
        private string prioritizationName = string.Empty;

        public string Name
        {
            get { return this.prioritizationName; }
            set { this.prioritizationName = value; }
        }

        private string prioritizationDescription = string.Empty;

        public string Description
        {
            get { return this.prioritizationDescription; }
            set { this.prioritizationDescription = value; }
        }
    }
}

</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreatePrioritization">
      <MemberSignature Language="C#" Value="public WebSvcDriver.DriverPrioritizationDataSet CreatePrioritization (WebSvcDriver.DriverPrioritizationDataSet driverPrioritizationDataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcDriver.DriverPrioritizationDataSet CreatePrioritization(class WebSvcDriver.DriverPrioritizationDataSet driverPrioritizationDataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcDriver.Driver.CreatePrioritization(WebSvcDriver.DriverPrioritizationDataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcDriver::DriverPrioritizationDataSet ^ CreatePrioritization(WebSvcDriver::DriverPrioritizationDataSet ^ driverPrioritizationDataSet);" />
      <MemberSignature Language="F#" Value="member this.CreatePrioritization : WebSvcDriver.DriverPrioritizationDataSet -&gt; WebSvcDriver.DriverPrioritizationDataSet" Usage="driver.CreatePrioritization driverPrioritizationDataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Driver/CreatePrioritization", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcDriver.DriverPrioritizationDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="driverPrioritizationDataSet" Type="WebSvcDriver.DriverPrioritizationDataSet" />
      </Parameters>
      <Docs>
        <param name="driverPrioritizationDataSet">Contains the one <b>PrioritizationRow</b> object in the <b>PrioritizationDataTable</b>.</param>
        <summary>Sets a priority level (<b>None</b>, <b>Low</b>, <b>Moderate</b>, or <b>Strong</b>) for a business strategy driver and project impacts.</summary>
        <returns>Contains the prioritization data.</returns>
        <remarks>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManagePrioritizations" />
              </term>
              <description>Allows a user to create or edit prioritizations for project portfolio analyses. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The example uses the <b>SvcDriver</b> namespace in the ProjectServerServices.dll proxy assembly. The <b>ConfigClientEndpoints</b> method uses an app.config file for setting the WCF binding, behavior, and endpoint. For information about creating a PSI proxy assembly and an app.config file, see Prerequisites for WCF-Based Code Samples.</para>
          <para>The <b>CreatePrioritization</b> method adds a <b>PrioritizationRow</b> object to the <b>driverPrioritizationDS</b>. The example application writes contents of the dataset to the CreatePrioritization.xml file, as follows:</para>
          <code>&amp;lt;?xml version="1.0" standalone="yes"?&amp;gt;
&amp;lt;DriverPrioritizationDataSet xmlns=
"http://schemas.microsoft.com/office/project/server/webservices/DriverPrioritizationDataSet/"&amp;gt;
&amp;lt;Prioritization&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_NAME&amp;gt;&lt;/span&gt;Prioritization-d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_DESCRIPTION&amp;gt;&lt;/span&gt;Test pri&amp;lt;/PRIORITIZATION_DESCRIPTION&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_IS_MANUAL&amp;gt;&lt;/span&gt;false&amp;lt;/PRIORITIZATION_IS_MANUAL&amp;gt;
&lt;span class="label"&gt;&amp;lt;RELATIVE_IMPORTANCE_CF_UID&amp;gt;&lt;/span&gt;2cd29b66-4cca-4c3e-8421-1e54c6d06dca
&amp;lt;/RELATIVE_IMPORTANCE_CF_UID&amp;gt;
&amp;lt;CONSISTENCY_RATIO&amp;gt;1&amp;lt;/CONSISTENCY_RATIO&amp;gt;
&amp;lt;/Prioritization&amp;gt;
&amp;lt;/DriverPrioritizationDataSet&amp;gt;
</code>
          <para>Following is the complete sample code.</para>
          <code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.ServiceModel;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.Drivers
{
    class Driver
    {
        private static SvcDriver.DriverClient driverClient;
        private const string DRIVER_ENDPOINT = "basicHttp_Driver";
        private const string OUTPUT_FILES = @"C:\Projects\Samples\Output\";
        private static string outFilePathDriverImpactStmt;
        private static string outFilePathDriverList;
        private static string outFilePathPrioritizationInfo;
        private static string outFilePathPrioritizationRow;
        private static string OutFilePathDrivers;
        private Dictionary&amp;lt;Guid, SortedList&amp;lt;int, SortedList&amp;lt;Guid, object&amp;gt;&amp;gt;&amp;gt; 
            lookupTableValues = 
            new Dictionary&amp;lt;Guid, SortedList&amp;lt;int, SortedList&amp;lt;Guid, object&amp;gt;&amp;gt;&amp;gt;();

        static void Main(string[] args)
        {
            // Configure the endpoints.
            ConfigClientEndpoints(DRIVER_ENDPOINT);

            // If output directory does not exist, create it.
            if (!Directory.Exists(OUTPUT_FILES))
            {
                Directory.CreateDirectory(OUTPUT_FILES);
            }

            outFilePathDriverImpactStmt = OUTPUT_FILES 
                + "DriverImpactStatements.xml";
            outFilePathDriverList = OUTPUT_FILES 
                + "DriverList.xml";
            outFilePathPrioritizationInfo = OUTPUT_FILES 
                + "PrioritizationInfo.xml";
            outFilePathPrioritizationRow = OUTPUT_FILES 
                + "CreatePrioritization.xml";
            OutFilePathDrivers = OUTPUT_FILES + "Drivers.xml";

            // Create the Driver dataset.
            SvcDriver.DriverDataSet driverInfoDS = 
                new SvcDriver.DriverDataSet(); ;

            // Create the drivers.
            driverInfoDS = CreateDrivers();
            driverInfoDS.WriteXml(OutFilePathDrivers);

            // Get the first driver and update its impact statements.
            Guid DRV_UID = 
                new Guid(driverInfoDS.Driver.Rows[0][0].ToString());

            // Update driver impact statements.
            UpdateImpactStatement(DRV_UID);

            // Read the list of drivers.
            SvcDriver.DriverDataSet driverListDS = 
                driverClient.ReadDriverList();
            driverListDS.WriteXml(outFilePathDriverList);
            Console.WriteLine("\nSee XML output of the Updated DataSet at {0}",
            outFilePathDriverList);

            // Create prioritization.
            PrioritizationInfo priInfo = CreateNewPrioritization();
            
            // Create a guids list and add the prioritization GUID to it.
            List&amp;lt;Guid&amp;gt; guids = new List&amp;lt;Guid&amp;gt;();
            guids.Add(priInfo.UniqueId);

            // Read prioritization.
            SvcDriver.DriverPrioritizationDataSet prioritizationDS = 
                driverClient.ReadPrioritization(priInfo.UniqueId);

            // Look-up-table values for comparison (hard-coded here).
            Guid[] lookUpTableValues = new Guid[2];

            // The lookup table value is greater.
            lookUpTableValues[0] = new Guid("3E0D4FFF-52A6-4235-9B2D-8FB26D74A139");
            // The lookup table value is less.
            lookUpTableValues[1] = 
                new Guid("9CECF611-8F36-4CA2-89E4-640537848513");

            // Add drivers to prioritization.
            prioritizationDS = UpdatePrioritizationInfo(
                driverInfoDS, priInfo, prioritizationDS, lookUpTableValues);

            // Read updated prioritization information.
            SvcDriver.DriverPrioritizationDataSet updatedPrioritizationDS = 
                driverClient.ReadPrioritization(priInfo.UniqueId);
            updatedPrioritizationDS.WriteXml(outFilePathPrioritizationInfo);
            Console.WriteLine(
                "\nSee XML output of the Updated Prioritization at {0}",
                outFilePathPrioritizationInfo);

            // Delete prioritization.
            driverClient.DeletePrioritizations(guids.ToArray());
            Console.WriteLine(" Prioritization {0} deleted", priInfo.UniqueId);
            guids.Clear();

            // Delete drivers.
            foreach (SvcDriver.DriverDataSet.DriverRow drvRow in
                driverInfoDS.Driver.Rows)
            {
                guids.Add(drvRow.DRIVER_UID);
            }
            driverClient.DeleteDrivers(guids.ToArray());
            Console.WriteLine("Deleted drivers");
            Console.ReadKey();
        }

        // Update a prioritization.
        private static SvcDriver.DriverPrioritizationDataSet
            UpdatePrioritizationInfo(
            SvcDriver.DriverDataSet driverInfoDS,
            PrioritizationInfo priInfo,
            SvcDriver.DriverPrioritizationDataSet prioritizationDS,
            Guid[] lookUpTableValues)
        {
            // Add a prioritization row.
            foreach (SvcDriver.DriverDataSet.DriverRow dRow in
                driverInfoDS.Driver.Rows)
            {
                SvcDriver.DriverPrioritizationDataSet.PrioritizationEntriesDataTable
                    prioEntries = prioritizationDS.PrioritizationEntries;
                SvcDriver.DriverPrioritizationDataSet.PrioritizationEntriesRow
                    prioritizationEntriesRow =
                    prioEntries.NewPrioritizationEntriesRow();
                prioritizationEntriesRow.PRIORITIZATION_UID =
                    priInfo.UniqueId;
                prioritizationEntriesRow.DRIVER_UID = dRow.DRIVER_UID;
                prioritizationEntriesRow.DRIVER_DESCRIPTION =
                    dRow.DRIVER_DESCRIPTION;
                prioEntries.AddPrioritizationEntriesRow(
                    prioritizationEntriesRow);
            }

            // Add driver-to-driver relations.
            for (int i = 0; i &amp;lt; driverInfoDS.Driver.Rows.Count - 1; i++)
            {
                for (int j = i + 1; j &amp;lt; driverInfoDS.Driver.Rows.Count; j++)
                {
                    SvcDriver.DriverPrioritizationDataSet.DriverRelationsRow
                        driverRelationsRow =
                        prioritizationDS.DriverRelations.NewDriverRelationsRow();
                    driverRelationsRow.PRIORITIZATION_UID = priInfo.UniqueId;
                    driverRelationsRow.DRIVER1_UID =
                        new Guid(driverInfoDS.Driver.Rows[i][0].ToString());
                    driverRelationsRow.DRIVER2_UID =
                        new Guid(driverInfoDS.Driver.Rows[j][0].ToString());
                    driverRelationsRow.LT_STRUCT_UID = lookUpTableValues[i];

                    prioritizationDS.DriverRelations.AddDriverRelationsRow(
                        driverRelationsRow);

                    // Also save the complement values.
                    Guid complementCodeValue =
                        PSLibrary.LookupTables.GetRelativeImportanceComplement(
                        lookUpTableValues[i]);
                    if (complementCodeValue != Guid.Empty)
                    {
                        driverRelationsRow =
                            prioritizationDS.DriverRelations.NewDriverRelationsRow();
                        driverRelationsRow.PRIORITIZATION_UID = priInfo.UniqueId;
                        driverRelationsRow.DRIVER1_UID =
                            new Guid(driverInfoDS.Driver.Rows[j][0].ToString());
                        driverRelationsRow.DRIVER2_UID =
                            new Guid(driverInfoDS.Driver.Rows[i][0].ToString());
                        driverRelationsRow.LT_STRUCT_UID = complementCodeValue;
                        prioritizationDS.DriverRelations.AddDriverRelationsRow(
                            driverRelationsRow);
                    }
                }
            }

            try
            {
                Console.WriteLine("Updating the DataSet....");
                prioritizationDS =
                    driverClient.UpdatePrioritization(prioritizationDS);
                Console.WriteLine(" DataSet updated successfully!");
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return prioritizationDS;
        }
        
        // Create a new prioritization.
        private static PrioritizationInfo CreateNewPrioritization()
        {
                SvcDriver.DriverPrioritizationDataSet driverPrioritizationDS =
                    new SvcDriver.DriverPrioritizationDataSet();
                PrioritizationInfo priInfo = new PrioritizationInfo();
                priInfo.UniqueId = Guid.NewGuid();
                priInfo.Name = "Prioritization-" + priInfo.UniqueId;
                priInfo.Description = "Test pri";
            try
            {
                SvcDriver.DriverPrioritizationDataSet.PrioritizationRow 
                    prioritizationRow =
                    driverPrioritizationDS.Prioritization.NewPrioritizationRow();
                prioritizationRow.PRIORITIZATION_UID = priInfo.UniqueId;
                prioritizationRow.PRIORITIZATION_NAME = priInfo.Name;
                prioritizationRow.PRIORITIZATION_DESCRIPTION = 
                    priInfo.Description;
                prioritizationRow.RELATIVE_IMPORTANCE_CF_UID = 
                    PSLibrary.CustomField.RELATIVE_IMPORTANCE_MD_PROP_UID;
                prioritizationRow.PRIORITIZATION_IS_MANUAL = false;

                driverPrioritizationDS.Prioritization.AddPrioritizationRow(
                    prioritizationRow);
                Console.WriteLine("Prioritization: Adding driver prioritization"
                    + priInfo.Name);
                driverClient.CreatePrioritization(driverPrioritizationDS);
                Console.WriteLine("Prioritization: Creation done");
                driverPrioritizationDS.WriteXml(outFilePathPrioritizationRow);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return priInfo;
        }

        // Configure the custom field client endpoints.
        public static void ConfigClientEndpoints(string endpt)
        {
            driverClient = new SvcDriver.DriverClient(endpt);
        }

        // Create drivers with impact statements.
        private static SvcDriver.DriverDataSet CreateDrivers()
        {
            DriverInfo drvInfo = new DriverInfo();
            SvcDriver.DriverDataSet updatedDriverDS = 
                new SvcDriver.DriverDataSet();
            try
            {
                // Creates three drivers and the impact statements for each.
                for (int i = 0; i &amp;lt; 3; i++)
                {
                    SvcDriver.DriverDataSet drvDS =
                        new SvcDriver.DriverDataSet();
                    drvInfo.UniqueId = Guid.NewGuid();
                    drvInfo.Name = "Driver-" + drvInfo.UniqueId;
                    drvInfo.Description = "test" + drvInfo.Name;
                    drvInfo.StatementNone = "PROJECT_IMPACT_NONE_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementLow = "PROJECT_IMPACT_LOW_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementModerate = "PROJECT_IMPACT_MODERATE_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementStrong = "PROJECT_IMPACT_STRONG_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementExtreme = "PROJECT_IMPACT_EXTREME_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;

                    SvcDriver.DriverDataSet.DriverRow drvRow = 
                        drvDS.Driver.NewDriverRow();
                    drvRow.DRIVER_UID = drvInfo.UniqueId;
                    drvRow.DRIVER_NAME = drvInfo.Name;
                    drvRow.DRIVER_DESCRIPTION = drvInfo.Description;
                    drvDS.Driver.AddDriverRow(drvRow);

                    SvcDriver.DriverDataSet.DriverImpactStatementsDataTable
                    drvImpStmts = drvDS.DriverImpactStatements;

                    SvcDriver.DriverDataSet.DriverImpactStatementsRow 
                        stmtRow = drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_NONE_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementNone;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_LOW_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementLow;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_MODERATE_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementModerate;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_STRONG_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementStrong;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_EXTREME_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementExtreme;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    Console.WriteLine("Adding driver " + drvInfo.Name);
                    driverClient.CreateDriver(
                        (SvcDriver.DriverDataSet)drvDS);
                    Console.WriteLine("Drivers {0} created successfully!", i);
                    updatedDriverDS.Merge(drvDS);
                }
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return updatedDriverDS;
        }

        // Update the driver impact statements.
        private static void UpdateImpactStatement(Guid DriverGuid)
        {
            try
            {
                Guid LT_UID = 
                    new Guid("779271C4-894D-4385-9E33-1251A9E80541");
                Guid IMPACT_UID = 
                    new Guid("1728D080-BA74-4D86-A29A-27E4318001C4");
                SvcDriver.DriverDataSet drvInfoDS = 
                    driverClient.ReadDriver(DriverGuid);
                SvcDriver.DriverDataSet.DriverImpactStatementsRow impactRow;
                SvcDriver.DriverDataSet.DriverImpactStatementsDataTable 
                    drvImpactStmts = drvInfoDS.DriverImpactStatements;
                impactRow = 
                  drvImpactStmts.FindByDRIVER_UIDPROJECT_IMPACT_CF_UIDLT_STRUCT_UID(
                  DriverGuid, IMPACT_UID, LT_UID);
                impactRow.DESCRIPTION = "new desc";
                driverClient.UpdateDriver(drvInfoDS);
                drvInfoDS.DriverImpactStatements.WriteXml(
                    outFilePathDriverImpactStmt);
                Console.WriteLine(
                    "\nSee XML output of the Updated DataSet at {0}",
                outFilePathDriverImpactStmt);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
        }
    }

    // This class contains the driver information.
    public class DriverInfo
    {
        private Guid driverGuid = new Guid();

        public Guid UniqueId
        {
            get { return this.driverGuid; }
            set { this.driverGuid = value; }
        }

        private string driverName = string.Empty;

        public string Name
        {
            get { return this.driverName; }
            set { this.driverName = value; }
        }

        private string driverDescription = string.Empty;

        public string Description
        {
            get { return this.driverDescription; }
            set { this.driverDescription = value; }
        }

        public static int DriverType
        {
            get { return (int)PSLibrary.Optimizer.OptimizerEntities.Driver; }
        }

        private string statementNone = string.Empty;

        public string StatementNone
        {
            get { return this.statementNone; }
            set { this.statementNone = value; }
        }

        private string statementLow = string.Empty;

        public string StatementLow
        {
            get { return this.statementLow; }
            set { this.statementLow = value; }
        }

        private string statementModerate = string.Empty;

        public string StatementModerate
        {
            get { return this.statementModerate; }
            set { this.statementModerate = value; }
        }

        private string statementStrong = string.Empty;

        public string StatementStrong
        {
            get { return this.statementStrong; }
            set { this.statementStrong = value; }
        }

        private string statementExtreme = string.Empty;

        public string StatementExtreme
        {
            get { return this.statementExtreme; }
            set { this.statementExtreme = value; }
        }
    }

    // This class contains the prioritization information.
    class PrioritizationInfo
    {
        private Guid prioritizationGuid = Guid.NewGuid();

        public Guid UniqueId
        {
            get { return this.prioritizationGuid; }
            set { this.prioritizationGuid = value; }
        }
        private string prioritizationName = string.Empty;

        public string Name
        {
            get { return this.prioritizationName; }
            set { this.prioritizationName = value; }
        }

        private string prioritizationDescription = string.Empty;

        public string Description
        {
            get { return this.prioritizationDescription; }
            set { this.prioritizationDescription = value; }
        }
    }
}

</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteDrivers">
      <MemberSignature Language="C#" Value="public void DeleteDrivers (Guid[] driverUids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteDrivers(valuetype System.Guid[] driverUids) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcDriver.Driver.DeleteDrivers(System.Guid[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDrivers (driverUids As Guid())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDrivers(cli::array &lt;Guid&gt; ^ driverUids);" />
      <MemberSignature Language="F#" Value="member this.DeleteDrivers : Guid[] -&gt; unit" Usage="driver.DeleteDrivers driverUids" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Driver/DeleteDrivers", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="driverUids" Type="System.Guid[]" />
      </Parameters>
      <Docs>
        <param name="driverUids">GUIDs of the drivers to delete.</param>
        <summary>Deletes one or more business strategy drivers.</summary>
        <remarks>
          <para>
            <b>Note</b>: If the drivers are added to prioritizations, the associated prioritizations must be deleted first, by calling <see cref="M:WebSvcDriver.Driver.DeletePrioritizations(System.Guid[])" />.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageDrivers" />
              </term>
              <description>Allows a user to create drivers for project portfolio analyses. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The example uses the <b>SvcDriver</b> namespace in the ProjectServerServices.dll proxy assembly. The <b>ConfigClientEndpoints</b> method uses an app.config file for setting the WCF binding, behavior, and endpoint. For information about creating a PSI proxy assembly and an app.config file, see Prerequisites for WCF-Based Code Samples.</para>
          <para> The <b>DeleteDrivers</b> method deletes the specified array of <b>Driver</b> objects. Following is the complete sample code.</para>
          <code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.ServiceModel;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.Drivers
{
    class Driver
    {
        private static SvcDriver.DriverClient driverClient;
        private const string DRIVER_ENDPOINT = "basicHttp_Driver";
        private const string OUTPUT_FILES = @"C:\Projects\Samples\Output\";
        private static string outFilePathDriverImpactStmt;
        private static string outFilePathDriverList;
        private static string outFilePathPrioritizationInfo;
        private static string outFilePathPrioritizationRow;
        private static string OutFilePathDrivers;
        private Dictionary&amp;lt;Guid, SortedList&amp;lt;int, SortedList&amp;lt;Guid, object&amp;gt;&amp;gt;&amp;gt; 
            lookupTableValues = 
            new Dictionary&amp;lt;Guid, SortedList&amp;lt;int, SortedList&amp;lt;Guid, object&amp;gt;&amp;gt;&amp;gt;();

        static void Main(string[] args)
        {
            // Configure the endpoints.
            ConfigClientEndpoints(DRIVER_ENDPOINT);

            // If output directory does not exist, create it.
            if (!Directory.Exists(OUTPUT_FILES))
            {
                Directory.CreateDirectory(OUTPUT_FILES);
            }

            outFilePathDriverImpactStmt = OUTPUT_FILES 
                + "DriverImpactStatements.xml";
            outFilePathDriverList = OUTPUT_FILES 
                + "DriverList.xml";
            outFilePathPrioritizationInfo = OUTPUT_FILES 
                + "PrioritizationInfo.xml";
            outFilePathPrioritizationRow = OUTPUT_FILES 
                + "CreatePrioritization.xml";
            OutFilePathDrivers = OUTPUT_FILES + "Drivers.xml";

            // Create the Driver dataset.
            SvcDriver.DriverDataSet driverInfoDS = 
                new SvcDriver.DriverDataSet(); ;

            // Create the Drivers.
            driverInfoDS = CreateDrivers();
            driverInfoDS.WriteXml(OutFilePathDrivers);

            // Get the first driver and update its impact statements.
            Guid DRV_UID = 
                new Guid(driverInfoDS.Driver.Rows[0][0].ToString());

            // Update driver impact statements.
            UpdateImpactStatement(DRV_UID);

            // Read the list of drivers.
            SvcDriver.DriverDataSet driverListDS = 
                driverClient.ReadDriverList();
            driverListDS.WriteXml(outFilePathDriverList);
            Console.WriteLine("\nSee XML output of the Updated DataSet at {0}",
            outFilePathDriverList);

            // Create prioritization.
            PrioritizationInfo priInfo = CreateNewPrioritization();
            
            // Create a guids list and add the prioritization GUID to it.
            List&amp;lt;Guid&amp;gt; guids = new List&amp;lt;Guid&amp;gt;();
            guids.Add(priInfo.UniqueId);

            // Read prioritization.
            SvcDriver.DriverPrioritizationDataSet prioritizationDS = 
                driverClient.ReadPrioritization(priInfo.UniqueId);

            // Look-up-table values for comparison (hard-coded here).
            Guid[] lookUpTableValues = new Guid[2];

            // The lookup table value is greater.
            lookUpTableValues[0] = new Guid("3E0D4FFF-52A6-4235-9B2D-8FB26D74A139");
            // The lookup table value is less.
            lookUpTableValues[1] = 
                new Guid("9CECF611-8F36-4CA2-89E4-640537848513");

            // The lookup table value is greater.
            lookUpTableValues[0] = new Guid("3E0D4FFF-52A6-4235-9B2D-8FB26D74A139");
            // The lookup table value is less.
            lookUpTableValues[1] = 
                new Guid("9CECF611-8F36-4CA2-89E4-640537848513");

            // Add drivers to prioritization.
            prioritizationDS = UpdatePrioritizationInfo(
                driverInfoDS, priInfo, prioritizationDS, lookUpTableValues);

            // Read updated prioritization information.
            SvcDriver.DriverPrioritizationDataSet updatedPrioritizationDS = 
                driverClient.ReadPrioritization(priInfo.UniqueId);
            updatedPrioritizationDS.WriteXml(outFilePathPrioritizationInfo);
            Console.WriteLine(
                "\nSee XML output of the Updated Prioritization at {0}",
                outFilePathPrioritizationInfo);

            // Delete prioritization.
            driverClient.DeletePrioritizations(guids.ToArray());
            Console.WriteLine(" Prioritization {0} deleted", priInfo.UniqueId);
            guids.Clear();

            // Delete drivers.
            foreach (SvcDriver.DriverDataSet.DriverRow drvRow in
                driverInfoDS.Driver.Rows)
            {
                guids.Add(drvRow.DRIVER_UID);
            }
            driverClient.DeleteDrivers(guids.ToArray());
            Console.WriteLine("Deleted drivers");
            Console.ReadKey();
        }

        // Update a prioritization.
        private static SvcDriver.DriverPrioritizationDataSet
            UpdatePrioritizationInfo(
            SvcDriver.DriverDataSet driverInfoDS,
            PrioritizationInfo priInfo,
            SvcDriver.DriverPrioritizationDataSet prioritizationDS,
            Guid[] lookUpTableValues)
        {
            // Add a prioritization row.
            foreach (SvcDriver.DriverDataSet.DriverRow dRow in
                driverInfoDS.Driver.Rows)
            {
                SvcDriver.DriverPrioritizationDataSet.PrioritizationEntriesDataTable
                    prioEntries = prioritizationDS.PrioritizationEntries;
                SvcDriver.DriverPrioritizationDataSet.PrioritizationEntriesRow
                    prioritizationEntriesRow =
                    prioEntries.NewPrioritizationEntriesRow();
                prioritizationEntriesRow.PRIORITIZATION_UID =
                    priInfo.UniqueId;
                prioritizationEntriesRow.DRIVER_UID = dRow.DRIVER_UID;
                prioritizationEntriesRow.DRIVER_DESCRIPTION =
                    dRow.DRIVER_DESCRIPTION;
                prioEntries.AddPrioritizationEntriesRow(
                    prioritizationEntriesRow);
            }

            // Add driver-to-driver relations.
            for (int i = 0; i &amp;lt; driverInfoDS.Driver.Rows.Count - 1; i++)
            {
                for (int j = i + 1; j &amp;lt; driverInfoDS.Driver.Rows.Count; j++)
                {
                    SvcDriver.DriverPrioritizationDataSet.DriverRelationsRow
                        driverRelationsRow =
                        prioritizationDS.DriverRelations.NewDriverRelationsRow();
                    driverRelationsRow.PRIORITIZATION_UID = priInfo.UniqueId;
                    driverRelationsRow.DRIVER1_UID =
                        new Guid(driverInfoDS.Driver.Rows[i][0].ToString());
                    driverRelationsRow.DRIVER2_UID =
                        new Guid(driverInfoDS.Driver.Rows[j][0].ToString());
                    driverRelationsRow.LT_STRUCT_UID = lookUpTableValues[i];

                    prioritizationDS.DriverRelations.AddDriverRelationsRow(
                        driverRelationsRow);

                    // Also save the complement values.
                    Guid complementCodeValue =
                        PSLibrary.LookupTables.GetRelativeImportanceComplement(
                        lookUpTableValues[i]);
                    if (complementCodeValue != Guid.Empty)
                    {
                        driverRelationsRow =
                            prioritizationDS.DriverRelations.NewDriverRelationsRow();
                        driverRelationsRow.PRIORITIZATION_UID = priInfo.UniqueId;
                        driverRelationsRow.DRIVER1_UID =
                            new Guid(driverInfoDS.Driver.Rows[j][0].ToString());
                        driverRelationsRow.DRIVER2_UID =
                            new Guid(driverInfoDS.Driver.Rows[i][0].ToString());
                        driverRelationsRow.LT_STRUCT_UID = complementCodeValue;
                        prioritizationDS.DriverRelations.AddDriverRelationsRow(
                            driverRelationsRow);
                    }
                }
            }

            try
            {
                Console.WriteLine("Updating the DataSet....");
                prioritizationDS =
                    driverClient.UpdatePrioritization(prioritizationDS);
                Console.WriteLine(" DataSet updated successfully!");
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return prioritizationDS;
        }
        
        // Create a new prioritization.
        private static PrioritizationInfo CreateNewPrioritization()
        {
                SvcDriver.DriverPrioritizationDataSet driverPrioritizationDS =
                    new SvcDriver.DriverPrioritizationDataSet();
                PrioritizationInfo priInfo = new PrioritizationInfo();
                priInfo.UniqueId = Guid.NewGuid();
                priInfo.Name = "Prioritization-" + priInfo.UniqueId;
                priInfo.Description = "Test pri";
            try
            {
                SvcDriver.DriverPrioritizationDataSet.PrioritizationRow 
                    prioritizationRow =
                    driverPrioritizationDS.Prioritization.NewPrioritizationRow();
                prioritizationRow.PRIORITIZATION_UID = priInfo.UniqueId;
                prioritizationRow.PRIORITIZATION_NAME = priInfo.Name;
                prioritizationRow.PRIORITIZATION_DESCRIPTION = 
                    priInfo.Description;
                prioritizationRow.RELATIVE_IMPORTANCE_CF_UID = 
                    PSLibrary.CustomField.RELATIVE_IMPORTANCE_MD_PROP_UID;
                prioritizationRow.PRIORITIZATION_IS_MANUAL = false;

                driverPrioritizationDS.Prioritization.AddPrioritizationRow(
                    prioritizationRow);
                Console.WriteLine("Prioritization: Adding driver prioritization"
                    + priInfo.Name);
                driverClient.CreatePrioritization(driverPrioritizationDS);
                Console.WriteLine("Prioritization: Creation done");
                driverPrioritizationDS.WriteXml(outFilePathPrioritizationRow);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return priInfo;
        }

        // Configure the custom field client endpoints.
        public static void ConfigClientEndpoints(string endpt)
        {
            driverClient = new SvcDriver.DriverClient(endpt);
        }

        // Create drivers with impact statements.
        private static SvcDriver.DriverDataSet CreateDrivers()
        {
            DriverInfo drvInfo = new DriverInfo();
            SvcDriver.DriverDataSet updatedDriverDS = 
                new SvcDriver.DriverDataSet();
            try
            {
                // Creates three drivers and the impact statements for each.
                for (int i = 0; i &amp;lt; 3; i++)
                {
                    SvcDriver.DriverDataSet drvDS =
                        new SvcDriver.DriverDataSet();
                    drvInfo.UniqueId = Guid.NewGuid();
                    drvInfo.Name = "Driver-" + drvInfo.UniqueId;
                    drvInfo.Description = "test" + drvInfo.Name;
                    drvInfo.StatementNone = "PROJECT_IMPACT_NONE_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementLow = "PROJECT_IMPACT_LOW_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementModerate = "PROJECT_IMPACT_MODERATE_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementStrong = "PROJECT_IMPACT_STRONG_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementExtreme = "PROJECT_IMPACT_EXTREME_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;

                    SvcDriver.DriverDataSet.DriverRow drvRow = 
                        drvDS.Driver.NewDriverRow();
                    drvRow.DRIVER_UID = drvInfo.UniqueId;
                    drvRow.DRIVER_NAME = drvInfo.Name;
                    drvRow.DRIVER_DESCRIPTION = drvInfo.Description;
                    drvDS.Driver.AddDriverRow(drvRow);

                    SvcDriver.DriverDataSet.DriverImpactStatementsDataTable
                    drvImpStmts = drvDS.DriverImpactStatements;

                    SvcDriver.DriverDataSet.DriverImpactStatementsRow 
                        stmtRow = drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_NONE_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementNone;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_LOW_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementLow;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_MODERATE_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementModerate;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_STRONG_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementStrong;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_EXTREME_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementExtreme;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    Console.WriteLine("Adding driver " + drvInfo.Name);
                    driverClient.CreateDriver(
                        (SvcDriver.DriverDataSet)drvDS);
                    Console.WriteLine("Drivers {0} created successfully!", i);
                    updatedDriverDS.Merge(drvDS);
                }
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return updatedDriverDS;
        }

        // Update the driver impact statements.
        private static void UpdateImpactStatement(Guid DriverGuid)
        {
            try
            {
                Guid LT_UID = 
                    new Guid("779271C4-894D-4385-9E33-1251A9E80541");
                Guid IMPACT_UID = 
                    new Guid("1728D080-BA74-4D86-A29A-27E4318001C4");
                SvcDriver.DriverDataSet drvInfoDS = 
                    driverClient.ReadDriver(DriverGuid);
                SvcDriver.DriverDataSet.DriverImpactStatementsRow impactRow;
                SvcDriver.DriverDataSet.DriverImpactStatementsDataTable 
                    drvImpactStmts = drvInfoDS.DriverImpactStatements;
                impactRow = 
                  drvImpactStmts.FindByDRIVER_UIDPROJECT_IMPACT_CF_UIDLT_STRUCT_UID(
                  DriverGuid, IMPACT_UID, LT_UID);
                impactRow.DESCRIPTION = "new desc";
                driverClient.UpdateDriver(drvInfoDS);
                drvInfoDS.DriverImpactStatements.WriteXml(
                    outFilePathDriverImpactStmt);
                Console.WriteLine(
                    "\nSee XML output of the Updated DataSet at {0}",
                outFilePathDriverImpactStmt);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
        }
    }

    // This class contains the driver information.
    public class DriverInfo
    {
        private Guid driverGuid = new Guid();

        public Guid UniqueId
        {
            get { return this.driverGuid; }
            set { this.driverGuid = value; }
        }

        private string driverName = string.Empty;

        public string Name
        {
            get { return this.driverName; }
            set { this.driverName = value; }
        }

        private string driverDescription = string.Empty;

        public string Description
        {
            get { return this.driverDescription; }
            set { this.driverDescription = value; }
        }

        public static int DriverType
        {
            get { return (int)PSLibrary.Optimizer.OptimizerEntities.Driver; }
        }

        private string statementNone = string.Empty;

        public string StatementNone
        {
            get { return this.statementNone; }
            set { this.statementNone = value; }
        }

        private string statementLow = string.Empty;

        public string StatementLow
        {
            get { return this.statementLow; }
            set { this.statementLow = value; }
        }

        private string statementModerate = string.Empty;

        public string StatementModerate
        {
            get { return this.statementModerate; }
            set { this.statementModerate = value; }
        }

        private string statementStrong = string.Empty;

        public string StatementStrong
        {
            get { return this.statementStrong; }
            set { this.statementStrong = value; }
        }

        private string statementExtreme = string.Empty;

        public string StatementExtreme
        {
            get { return this.statementExtreme; }
            set { this.statementExtreme = value; }
        }
    }

    // This class contains the prioritization information.
    class PrioritizationInfo
    {
        private Guid prioritizationGuid = Guid.NewGuid();

        public Guid UniqueId
        {
            get { return this.prioritizationGuid; }
            set { this.prioritizationGuid = value; }
        }
        private string prioritizationName = string.Empty;

        public string Name
        {
            get { return this.prioritizationName; }
            set { this.prioritizationName = value; }
        }

        private string prioritizationDescription = string.Empty;

        public string Description
        {
            get { return this.prioritizationDescription; }
            set { this.prioritizationDescription = value; }
        }
    }
}

</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeletePrioritizations">
      <MemberSignature Language="C#" Value="public void DeletePrioritizations (Guid[] prioritizationUids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeletePrioritizations(valuetype System.Guid[] prioritizationUids) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcDriver.Driver.DeletePrioritizations(System.Guid[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeletePrioritizations (prioritizationUids As Guid())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeletePrioritizations(cli::array &lt;Guid&gt; ^ prioritizationUids);" />
      <MemberSignature Language="F#" Value="member this.DeletePrioritizations : Guid[] -&gt; unit" Usage="driver.DeletePrioritizations prioritizationUids" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Driver/DeletePrioritizations", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prioritizationUids" Type="System.Guid[]" />
      </Parameters>
      <Docs>
        <param name="prioritizationUids">GUIDs of the prioritizations to delete.</param>
        <summary>Deletes one or more prioritizations for a business strategy driver.</summary>
        <remarks>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManagePrioritizations" />
              </term>
              <description>Allows a user to create or edit prioritizations for project portfolio analyses. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The example uses the <b>SvcDriver</b> namespace in the ProjectServerServices.dll proxy assembly. The <b>ConfigClientEndpoints</b> method uses an app.config file for setting the WCF binding, behavior, and endpoint. For information about creating a PSI proxy assembly and an app.config file, see Prerequisites for WCF-Based Code Samples.</para>
          <para>The <b>DeletePrioritizations</b> method deletes the specified array of <b>PrioritizationInfo</b> objects. Following is the sample code.</para>
          <code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.ServiceModel;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.Drivers
{
    class Driver
    {
        private static SvcDriver.DriverClient driverClient;
        private const string DRIVER_ENDPOINT = "basicHttp_Driver";
        private const string OUTPUT_FILES = @"C:\Projects\Samples\Output\";
        private static string outFilePathDriverImpactStmt;
        private static string outFilePathDriverList;
        private static string outFilePathPrioritizationInfo;
        private static string outFilePathPrioritizationRow;
        private static string OutFilePathDrivers;
        private Dictionary&amp;lt;Guid, SortedList&amp;lt;int, SortedList&amp;lt;Guid, object&amp;gt;&amp;gt;&amp;gt; 
            lookupTableValues = 
            new Dictionary&amp;lt;Guid, SortedList&amp;lt;int, SortedList&amp;lt;Guid, object&amp;gt;&amp;gt;&amp;gt;();

        static void Main(string[] args)
        {
            // Configure the endpoints.
            ConfigClientEndpoints(DRIVER_ENDPOINT);

            // If output directory does not exist, create it.
            if (!Directory.Exists(OUTPUT_FILES))
            {
                Directory.CreateDirectory(OUTPUT_FILES);
            }

            outFilePathDriverImpactStmt = OUTPUT_FILES 
                + "DriverImpactStatements.xml";
            outFilePathDriverList = OUTPUT_FILES 
                + "DriverList.xml";
            outFilePathPrioritizationInfo = OUTPUT_FILES 
                + "PrioritizationInfo.xml";
            outFilePathPrioritizationRow = OUTPUT_FILES 
                + "CreatePrioritization.xml";
            OutFilePathDrivers = OUTPUT_FILES + "Drivers.xml";

            // Create the Driver dataset.
            SvcDriver.DriverDataSet driverInfoDS = 
                new SvcDriver.DriverDataSet(); ;

            // Create the drivers.
            driverInfoDS = CreateDrivers();
            driverInfoDS.WriteXml(OutFilePathDrivers);

            // Get the first driver and update its impact statements.
            Guid DRV_UID = 
                new Guid(driverInfoDS.Driver.Rows[0][0].ToString());

            // Update driver impact statements.
            UpdateImpactStatement(DRV_UID);

            // Read the list of drivers.
            SvcDriver.DriverDataSet driverListDS = 
                driverClient.ReadDriverList();
            driverListDS.WriteXml(outFilePathDriverList);
            Console.WriteLine("\nSee XML output of the Updated DataSet at {0}",
            outFilePathDriverList);

            // Create prioritization.
            PrioritizationInfo priInfo = CreateNewPrioritization();
            
            // Create a guids list and add the prioritization GUID to it.
            List&amp;lt;Guid&amp;gt; guids = new List&amp;lt;Guid&amp;gt;();
            guids.Add(priInfo.UniqueId);

            // Read Prioritization.
            SvcDriver.DriverPrioritizationDataSet prioritizationDS = 
                driverClient.ReadPrioritization(priInfo.UniqueId);

            // Look-up-table values for comparison (hard-coded here).
            Guid[] lookUpTableValues = new Guid[2];

            // The lookup table value is greater.
            lookUpTableValues[0] = new Guid("3E0D4FFF-52A6-4235-9B2D-8FB26D74A139");
            // The lookup table value is less.
            lookUpTableValues[1] = 
                new Guid("9CECF611-8F36-4CA2-89E4-640537848513");

            // Add drivers to prioritization.
            prioritizationDS = UpdatePrioritizationInfo(
                driverInfoDS, priInfo, prioritizationDS, lookUpTableValues);

            // Read updated prioritization information.
            SvcDriver.DriverPrioritizationDataSet updatedPrioritizationDS = 
                driverClient.ReadPrioritization(priInfo.UniqueId);
            updatedPrioritizationDS.WriteXml(outFilePathPrioritizationInfo);
            Console.WriteLine(
                "\nSee XML output of the Updated Prioritization at {0}",
                outFilePathPrioritizationInfo);

            // Delete prioritization.
            driverClient.DeletePrioritizations(guids.ToArray());
            Console.WriteLine(" Prioritization {0} deleted", priInfo.UniqueId);
            guids.Clear();

            // Delete drivers.
            foreach (SvcDriver.DriverDataSet.DriverRow drvRow in
                driverInfoDS.Driver.Rows)
            {
                guids.Add(drvRow.DRIVER_UID);
            }
            driverClient.DeleteDrivers(guids.ToArray());
            Console.WriteLine("Deleted drivers");
            Console.ReadKey();
        }

        // Update a prioritization.
        private static SvcDriver.DriverPrioritizationDataSet
            UpdatePrioritizationInfo(
            SvcDriver.DriverDataSet driverInfoDS,
            PrioritizationInfo priInfo,
            SvcDriver.DriverPrioritizationDataSet prioritizationDS,
            Guid[] lookUpTableValues)
        {
            // Add a prioritization row.
            foreach (SvcDriver.DriverDataSet.DriverRow dRow in
                driverInfoDS.Driver.Rows)
            {
                SvcDriver.DriverPrioritizationDataSet.PrioritizationEntriesDataTable
                    prioEntries = prioritizationDS.PrioritizationEntries;
                SvcDriver.DriverPrioritizationDataSet.PrioritizationEntriesRow
                    prioritizationEntriesRow =
                    prioEntries.NewPrioritizationEntriesRow();
                prioritizationEntriesRow.PRIORITIZATION_UID =
                    priInfo.UniqueId;
                prioritizationEntriesRow.DRIVER_UID = dRow.DRIVER_UID;
                prioritizationEntriesRow.DRIVER_DESCRIPTION =
                    dRow.DRIVER_DESCRIPTION;
                prioEntries.AddPrioritizationEntriesRow(
                    prioritizationEntriesRow);
            }

            // Add driver-to-driver relations.
            for (int i = 0; i &amp;lt; driverInfoDS.Driver.Rows.Count - 1; i++)
            {
                for (int j = i + 1; j &amp;lt; driverInfoDS.Driver.Rows.Count; j++)
                {
                    SvcDriver.DriverPrioritizationDataSet.DriverRelationsRow
                        driverRelationsRow =
                        prioritizationDS.DriverRelations.NewDriverRelationsRow();
                    driverRelationsRow.PRIORITIZATION_UID = priInfo.UniqueId;
                    driverRelationsRow.DRIVER1_UID =
                        new Guid(driverInfoDS.Driver.Rows[i][0].ToString());
                    driverRelationsRow.DRIVER2_UID =
                        new Guid(driverInfoDS.Driver.Rows[j][0].ToString());
                    driverRelationsRow.LT_STRUCT_UID = lookUpTableValues[i];

                    prioritizationDS.DriverRelations.AddDriverRelationsRow(
                        driverRelationsRow);

                    // Also save the complement values.
                    Guid complementCodeValue =
                        PSLibrary.LookupTables.GetRelativeImportanceComplement(
                        lookUpTableValues[i]);
                    if (complementCodeValue != Guid.Empty)
                    {
                        driverRelationsRow =
                            prioritizationDS.DriverRelations.NewDriverRelationsRow();
                        driverRelationsRow.PRIORITIZATION_UID = priInfo.UniqueId;
                        driverRelationsRow.DRIVER1_UID =
                            new Guid(driverInfoDS.Driver.Rows[j][0].ToString());
                        driverRelationsRow.DRIVER2_UID =
                            new Guid(driverInfoDS.Driver.Rows[i][0].ToString());
                        driverRelationsRow.LT_STRUCT_UID = complementCodeValue;
                        prioritizationDS.DriverRelations.AddDriverRelationsRow(
                            driverRelationsRow);
                    }
                }
            }

            try
            {
                Console.WriteLine("Updating the DataSet....");
                prioritizationDS =
                    driverClient.UpdatePrioritization(prioritizationDS);
                Console.WriteLine(" DataSet updated successfully!");
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return prioritizationDS;
        }
        
        // Create a new prioritization.
        private static PrioritizationInfo CreateNewPrioritization()
        {
                SvcDriver.DriverPrioritizationDataSet driverPrioritizationDS =
                    new SvcDriver.DriverPrioritizationDataSet();
                PrioritizationInfo priInfo = new PrioritizationInfo();
                priInfo.UniqueId = Guid.NewGuid();
                priInfo.Name = "Prioritization-" + priInfo.UniqueId;
                priInfo.Description = "Test pri";
            try
            {
                SvcDriver.DriverPrioritizationDataSet.PrioritizationRow 
                    prioritizationRow =
                    driverPrioritizationDS.Prioritization.NewPrioritizationRow();
                prioritizationRow.PRIORITIZATION_UID = priInfo.UniqueId;
                prioritizationRow.PRIORITIZATION_NAME = priInfo.Name;
                prioritizationRow.PRIORITIZATION_DESCRIPTION = 
                    priInfo.Description;
                prioritizationRow.RELATIVE_IMPORTANCE_CF_UID = 
                    PSLibrary.CustomField.RELATIVE_IMPORTANCE_MD_PROP_UID;
                prioritizationRow.PRIORITIZATION_IS_MANUAL = false;

                driverPrioritizationDS.Prioritization.AddPrioritizationRow(
                    prioritizationRow);
                Console.WriteLine("Prioritization: Adding driver prioritization"
                    + priInfo.Name);
                driverClient.CreatePrioritization(driverPrioritizationDS);
                Console.WriteLine("Prioritization: Creation done");
                driverPrioritizationDS.WriteXml(outFilePathPrioritizationRow);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return priInfo;
        }

        // Configure the custom field client endpoints.
        public static void ConfigClientEndpoints(string endpt)
        {
            driverClient = new SvcDriver.DriverClient(endpt);
        }

        // Create drivers with impact statements.
        private static SvcDriver.DriverDataSet CreateDrivers()
        {
            DriverInfo drvInfo = new DriverInfo();
            SvcDriver.DriverDataSet updatedDriverDS = 
                new SvcDriver.DriverDataSet();
            try
            {
                // Creates three drivers and the impact statements for each.
                for (int i = 0; i &amp;lt; 3; i++)
                {
                    SvcDriver.DriverDataSet drvDS =
                        new SvcDriver.DriverDataSet();
                    drvInfo.UniqueId = Guid.NewGuid();
                    drvInfo.Name = "Driver-" + drvInfo.UniqueId;
                    drvInfo.Description = "test" + drvInfo.Name;
                    drvInfo.StatementNone = "PROJECT_IMPACT_NONE_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementLow = "PROJECT_IMPACT_LOW_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementModerate = "PROJECT_IMPACT_MODERATE_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementStrong = "PROJECT_IMPACT_STRONG_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementExtreme = "PROJECT_IMPACT_EXTREME_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;

                    SvcDriver.DriverDataSet.DriverRow drvRow = 
                        drvDS.Driver.NewDriverRow();
                    drvRow.DRIVER_UID = drvInfo.UniqueId;
                    drvRow.DRIVER_NAME = drvInfo.Name;
                    drvRow.DRIVER_DESCRIPTION = drvInfo.Description;
                    drvDS.Driver.AddDriverRow(drvRow);

                    SvcDriver.DriverDataSet.DriverImpactStatementsDataTable
                    drvImpStmts = drvDS.DriverImpactStatements;

                    SvcDriver.DriverDataSet.DriverImpactStatementsRow 
                        stmtRow = drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_NONE_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementNone;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_LOW_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementLow;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_MODERATE_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementModerate;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_STRONG_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementStrong;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_EXTREME_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementExtreme;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    Console.WriteLine("Adding driver " + drvInfo.Name);
                    driverClient.CreateDriver(
                        (SvcDriver.DriverDataSet)drvDS);
                    Console.WriteLine("Drivers {0} created successfully!", i);
                    updatedDriverDS.Merge(drvDS);
                }
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return updatedDriverDS;
        }

        // Update the driver impact statements.
        private static void UpdateImpactStatement(Guid DriverGuid)
        {
            try
            {
                Guid LT_UID = 
                    new Guid("779271C4-894D-4385-9E33-1251A9E80541");
                Guid IMPACT_UID = 
                    new Guid("1728D080-BA74-4D86-A29A-27E4318001C4");
                SvcDriver.DriverDataSet drvInfoDS = 
                    driverClient.ReadDriver(DriverGuid);
                SvcDriver.DriverDataSet.DriverImpactStatementsRow impactRow;
                SvcDriver.DriverDataSet.DriverImpactStatementsDataTable 
                    drvImpactStmts = drvInfoDS.DriverImpactStatements;
                impactRow = 
                  drvImpactStmts.FindByDRIVER_UIDPROJECT_IMPACT_CF_UIDLT_STRUCT_UID(
                  DriverGuid, IMPACT_UID, LT_UID);
                impactRow.DESCRIPTION = "new desc";
                driverClient.UpdateDriver(drvInfoDS);
                drvInfoDS.DriverImpactStatements.WriteXml(
                    outFilePathDriverImpactStmt);
                Console.WriteLine(
                    "\nSee XML output of the Updated DataSet at {0}",
                outFilePathDriverImpactStmt);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
        }
    }

    // This class contains the driver information.
    public class DriverInfo
    {
        private Guid driverGuid = new Guid();

        public Guid UniqueId
        {
            get { return this.driverGuid; }
            set { this.driverGuid = value; }
        }

        private string driverName = string.Empty;

        public string Name
        {
            get { return this.driverName; }
            set { this.driverName = value; }
        }

        private string driverDescription = string.Empty;

        public string Description
        {
            get { return this.driverDescription; }
            set { this.driverDescription = value; }
        }

        public static int DriverType
        {
            get { return (int)PSLibrary.Optimizer.OptimizerEntities.Driver; }
        }

        private string statementNone = string.Empty;

        public string StatementNone
        {
            get { return this.statementNone; }
            set { this.statementNone = value; }
        }

        private string statementLow = string.Empty;

        public string StatementLow
        {
            get { return this.statementLow; }
            set { this.statementLow = value; }
        }

        private string statementModerate = string.Empty;

        public string StatementModerate
        {
            get { return this.statementModerate; }
            set { this.statementModerate = value; }
        }

        private string statementStrong = string.Empty;

        public string StatementStrong
        {
            get { return this.statementStrong; }
            set { this.statementStrong = value; }
        }

        private string statementExtreme = string.Empty;

        public string StatementExtreme
        {
            get { return this.statementExtreme; }
            set { this.statementExtreme = value; }
        }
    }

    // This class contains the prioritization information.
    class PrioritizationInfo
    {
        private Guid prioritizationGuid = Guid.NewGuid();

        public Guid UniqueId
        {
            get { return this.prioritizationGuid; }
            set { this.prioritizationGuid = value; }
        }
        private string prioritizationName = string.Empty;

        public string Name
        {
            get { return this.prioritizationName; }
            set { this.prioritizationName = value; }
        }

        private string prioritizationDescription = string.Empty;

        public string Description
        {
            get { return this.prioritizationDescription; }
            set { this.prioritizationDescription = value; }
        }
    }
}

</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadDriver">
      <MemberSignature Language="C#" Value="public WebSvcDriver.DriverDataSet ReadDriver (Guid driverUid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcDriver.DriverDataSet ReadDriver(valuetype System.Guid driverUid) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcDriver.Driver.ReadDriver(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadDriver (driverUid As Guid) As DriverDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcDriver::DriverDataSet ^ ReadDriver(Guid driverUid);" />
      <MemberSignature Language="F#" Value="member this.ReadDriver : Guid -&gt; WebSvcDriver.DriverDataSet" Usage="driver.ReadDriver driverUid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Driver/ReadDriver", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcDriver.DriverDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="driverUid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="driverUid">GUID of the driver.</param>
        <summary>Reads the data for the specified business strategy driver.</summary>
        <returns>Contains the driver information, including any associated departments and impact statements.</returns>
        <remarks>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManagePrioritizations" />
              </term>
              <description>Allows a user to create or edit prioritizations for project portfolio analyses. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageDrivers" />
              </term>
              <description>Allows a user to create drivers for project portfolio analyses. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The example uses the <b>SvcDriver</b> namespace in the ProjectServerServices.dll proxy assembly. The <b>ConfigClientEndpoints</b> method uses an app.config file for setting the WCF binding, behavior, and endpoint. For information about creating a PSI proxy assembly and an app.config file, see Prerequisites for WCF-Based Code Samples.</para>
          <para>The <b>ReadDriver</b> method returns a <b>drvInfoDS</b> object for a specified <b>DriverGUID</b>. This information is then used to modify the driver impact statements. Following is the complete sample code.</para>
          <code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.ServiceModel;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.Drivers
{
    class Driver
    {
        private static SvcDriver.DriverClient driverClient;
        private const string DRIVER_ENDPOINT = "basicHttp_Driver";
        private const string OUTPUT_FILES = @"C:\Projects\Samples\Output\";
        private static string outFilePathDriverImpactStmt;
        private static string outFilePathDriverList;
        private static string outFilePathPrioritizationInfo;
        private static string outFilePathPrioritizationRow;
        private static string OutFilePathDrivers;
        private Dictionary&amp;lt;Guid, SortedList&amp;lt;int, SortedList&amp;lt;Guid, object&amp;gt;&amp;gt;&amp;gt; 
            lookupTableValues = 
            new Dictionary&amp;lt;Guid, SortedList&amp;lt;int, SortedList&amp;lt;Guid, object&amp;gt;&amp;gt;&amp;gt;();

        static void Main(string[] args)
        {
            // Configure the endpoints.
            ConfigClientEndpoints(DRIVER_ENDPOINT);

            // If output directory does not exist, create it.
            if (!Directory.Exists(OUTPUT_FILES))
            {
                Directory.CreateDirectory(OUTPUT_FILES);
            }

            outFilePathDriverImpactStmt = OUTPUT_FILES 
                + "DriverImpactStatements.xml";
            outFilePathDriverList = OUTPUT_FILES 
                + "DriverList.xml";
            outFilePathPrioritizationInfo = OUTPUT_FILES 
                + "PrioritizationInfo.xml";
            outFilePathPrioritizationRow = OUTPUT_FILES 
                + "CreatePrioritization.xml";
            OutFilePathDrivers = OUTPUT_FILES + "Drivers.xml";

            // Create the Driver dataset.
            SvcDriver.DriverDataSet driverInfoDS = 
                new SvcDriver.DriverDataSet(); ;

            // Create the Drivers.
            driverInfoDS = CreateDrivers();
            driverInfoDS.WriteXml(OutFilePathDrivers);

            // Get the first driver and update its impact statements.
            Guid DRV_UID = 
                new Guid(driverInfoDS.Driver.Rows[0][0].ToString());

            // Update driver impact statements.
            UpdateImpactStatement(DRV_UID);

            // Read the list of drivers.
            SvcDriver.DriverDataSet driverListDS = 
                driverClient.ReadDriverList();
            driverListDS.WriteXml(outFilePathDriverList);
            Console.WriteLine("\nSee XML output of the Updated DataSet at {0}",
            outFilePathDriverList);

            // Create prioritization.
            PrioritizationInfo priInfo = CreateNewPrioritization();
            
            // Create a guids list and add the prioritization GUID to it.
            List&amp;lt;Guid&amp;gt; guids = new List&amp;lt;Guid&amp;gt;();
            guids.Add(priInfo.UniqueId);

            // Read prioritization.
            SvcDriver.DriverPrioritizationDataSet prioritizationDS = 
                driverClient.ReadPrioritization(priInfo.UniqueId);

            // Look-up-table values for comparison (hard-coded here).
            Guid[] lookUpTableValues = new Guid[2];

            // The lookup table value is greater.
            lookUpTableValues[0] = new Guid("3E0D4FFF-52A6-4235-9B2D-8FB26D74A139");
            // The lookup table value is less.
            lookUpTableValues[1] = 
                new Guid("9CECF611-8F36-4CA2-89E4-640537848513");

            // Add drivers to prioritization.
            prioritizationDS = UpdatePrioritizationInfo(
                driverInfoDS, priInfo, prioritizationDS, lookUpTableValues);

            // Read updated prioritization information.
            SvcDriver.DriverPrioritizationDataSet updatedPrioritizationDS = 
                driverClient.ReadPrioritization(priInfo.UniqueId);
            updatedPrioritizationDS.WriteXml(outFilePathPrioritizationInfo);
            Console.WriteLine(
                "\nSee XML output of the Updated Prioritization at {0}",
                outFilePathPrioritizationInfo);

            // Delete prioritization.
            driverClient.DeletePrioritizations(guids.ToArray());
            Console.WriteLine(" Prioritization {0} deleted", priInfo.UniqueId);
            guids.Clear();

            // Delete drivers.
            foreach (SvcDriver.DriverDataSet.DriverRow drvRow in
                driverInfoDS.Driver.Rows)
            {
                guids.Add(drvRow.DRIVER_UID);
            }
            driverClient.DeleteDrivers(guids.ToArray());
            Console.WriteLine("Deleted drivers");
            Console.ReadKey();
        }

        // Update a prioritization.
        private static SvcDriver.DriverPrioritizationDataSet
            UpdatePrioritizationInfo(
            SvcDriver.DriverDataSet driverInfoDS,
            PrioritizationInfo priInfo,
            SvcDriver.DriverPrioritizationDataSet prioritizationDS,
            Guid[] lookUpTableValues)
        {
            // Add a prioritization row.
            foreach (SvcDriver.DriverDataSet.DriverRow dRow in
                driverInfoDS.Driver.Rows)
            {
                SvcDriver.DriverPrioritizationDataSet.PrioritizationEntriesDataTable
                    prioEntries = prioritizationDS.PrioritizationEntries;
                SvcDriver.DriverPrioritizationDataSet.PrioritizationEntriesRow
                    prioritizationEntriesRow =
                    prioEntries.NewPrioritizationEntriesRow();
                prioritizationEntriesRow.PRIORITIZATION_UID =
                    priInfo.UniqueId;
                prioritizationEntriesRow.DRIVER_UID = dRow.DRIVER_UID;
                prioritizationEntriesRow.DRIVER_DESCRIPTION =
                    dRow.DRIVER_DESCRIPTION;
                prioEntries.AddPrioritizationEntriesRow(
                    prioritizationEntriesRow);
            }

            // Add driver-to-driver relations.
            for (int i = 0; i &amp;lt; driverInfoDS.Driver.Rows.Count - 1; i++)
            {
                for (int j = i + 1; j &amp;lt; driverInfoDS.Driver.Rows.Count; j++)
                {
                    SvcDriver.DriverPrioritizationDataSet.DriverRelationsRow
                        driverRelationsRow =
                        prioritizationDS.DriverRelations.NewDriverRelationsRow();
                    driverRelationsRow.PRIORITIZATION_UID = priInfo.UniqueId;
                    driverRelationsRow.DRIVER1_UID =
                        new Guid(driverInfoDS.Driver.Rows[i][0].ToString());
                    driverRelationsRow.DRIVER2_UID =
                        new Guid(driverInfoDS.Driver.Rows[j][0].ToString());
                    driverRelationsRow.LT_STRUCT_UID = lookUpTableValues[i];

                    prioritizationDS.DriverRelations.AddDriverRelationsRow(
                        driverRelationsRow);

                    // Also save the complement values.
                    Guid complementCodeValue =
                        PSLibrary.LookupTables.GetRelativeImportanceComplement(
                        lookUpTableValues[i]);
                    if (complementCodeValue != Guid.Empty)
                    {
                        driverRelationsRow =
                            prioritizationDS.DriverRelations.NewDriverRelationsRow();
                        driverRelationsRow.PRIORITIZATION_UID = priInfo.UniqueId;
                        driverRelationsRow.DRIVER1_UID =
                            new Guid(driverInfoDS.Driver.Rows[j][0].ToString());
                        driverRelationsRow.DRIVER2_UID =
                            new Guid(driverInfoDS.Driver.Rows[i][0].ToString());
                        driverRelationsRow.LT_STRUCT_UID = complementCodeValue;
                        prioritizationDS.DriverRelations.AddDriverRelationsRow(
                            driverRelationsRow);
                    }
                }
            }

            try
            {
                Console.WriteLine("Updating the DataSet....");
                prioritizationDS =
                    driverClient.UpdatePrioritization(prioritizationDS);
                Console.WriteLine(" DataSet updated successfully!");
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return prioritizationDS;
        }
        
        // Create a new prioritization.
        private static PrioritizationInfo CreateNewPrioritization()
        {
                SvcDriver.DriverPrioritizationDataSet driverPrioritizationDS =
                    new SvcDriver.DriverPrioritizationDataSet();
                PrioritizationInfo priInfo = new PrioritizationInfo();
                priInfo.UniqueId = Guid.NewGuid();
                priInfo.Name = "Prioritization-" + priInfo.UniqueId;
                priInfo.Description = "Test pri";
            try
            {
                SvcDriver.DriverPrioritizationDataSet.PrioritizationRow 
                    prioritizationRow =
                    driverPrioritizationDS.Prioritization.NewPrioritizationRow();
                prioritizationRow.PRIORITIZATION_UID = priInfo.UniqueId;
                prioritizationRow.PRIORITIZATION_NAME = priInfo.Name;
                prioritizationRow.PRIORITIZATION_DESCRIPTION = 
                    priInfo.Description;
                prioritizationRow.RELATIVE_IMPORTANCE_CF_UID = 
                    PSLibrary.CustomField.RELATIVE_IMPORTANCE_MD_PROP_UID;
                prioritizationRow.PRIORITIZATION_IS_MANUAL = false;

                driverPrioritizationDS.Prioritization.AddPrioritizationRow(
                    prioritizationRow);
                Console.WriteLine("Prioritization: Adding driver prioritization"
                    + priInfo.Name);
                driverClient.CreatePrioritization(driverPrioritizationDS);
                Console.WriteLine("Prioritization: Creation done");
                driverPrioritizationDS.WriteXml(outFilePathPrioritizationRow);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return priInfo;
        }

        // Configure the custom field client endpoints.
        public static void ConfigClientEndpoints(string endpt)
        {
            driverClient = new SvcDriver.DriverClient(endpt);
        }

        // Create drivers with impact statements.
        private static SvcDriver.DriverDataSet CreateDrivers()
        {
            DriverInfo drvInfo = new DriverInfo();
            SvcDriver.DriverDataSet updatedDriverDS = 
                new SvcDriver.DriverDataSet();
            try
            {
                // Creates three drivers and the impact statements for each.
                for (int i = 0; i &amp;lt; 3; i++)
                {
                    SvcDriver.DriverDataSet drvDS =
                        new SvcDriver.DriverDataSet();
                    drvInfo.UniqueId = Guid.NewGuid();
                    drvInfo.Name = "Driver-" + drvInfo.UniqueId;
                    drvInfo.Description = "test" + drvInfo.Name;
                    drvInfo.StatementNone = "PROJECT_IMPACT_NONE_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementLow = "PROJECT_IMPACT_LOW_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementModerate = "PROJECT_IMPACT_MODERATE_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementStrong = "PROJECT_IMPACT_STRONG_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementExtreme = "PROJECT_IMPACT_EXTREME_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;

                    SvcDriver.DriverDataSet.DriverRow drvRow = 
                        drvDS.Driver.NewDriverRow();
                    drvRow.DRIVER_UID = drvInfo.UniqueId;
                    drvRow.DRIVER_NAME = drvInfo.Name;
                    drvRow.DRIVER_DESCRIPTION = drvInfo.Description;
                    drvDS.Driver.AddDriverRow(drvRow);

                    SvcDriver.DriverDataSet.DriverImpactStatementsDataTable
                    drvImpStmts = drvDS.DriverImpactStatements;

                    SvcDriver.DriverDataSet.DriverImpactStatementsRow 
                        stmtRow = drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_NONE_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementNone;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_LOW_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementLow;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_MODERATE_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementModerate;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_STRONG_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementStrong;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_EXTREME_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementExtreme;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    Console.WriteLine("Adding driver " + drvInfo.Name);
                    driverClient.CreateDriver(
                        (SvcDriver.DriverDataSet)drvDS);
                    Console.WriteLine("Drivers {0} created successfully!", i);
                    updatedDriverDS.Merge(drvDS);
                }
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return updatedDriverDS;
        }

        // Update the driver impact statements.
        private static void UpdateImpactStatement(Guid DriverGuid)
        {
            try
            {
                Guid LT_UID = 
                    new Guid("779271C4-894D-4385-9E33-1251A9E80541");
                Guid IMPACT_UID = 
                    new Guid("1728D080-BA74-4D86-A29A-27E4318001C4");
                SvcDriver.DriverDataSet drvInfoDS = 
                    driverClient.ReadDriver(DriverGuid);
                SvcDriver.DriverDataSet.DriverImpactStatementsRow impactRow;
                SvcDriver.DriverDataSet.DriverImpactStatementsDataTable 
                    drvImpactStmts = drvInfoDS.DriverImpactStatements;
                impactRow = 
                  drvImpactStmts.FindByDRIVER_UIDPROJECT_IMPACT_CF_UIDLT_STRUCT_UID(
                  DriverGuid, IMPACT_UID, LT_UID);
                impactRow.DESCRIPTION = "new desc";
                driverClient.UpdateDriver(drvInfoDS);
                drvInfoDS.DriverImpactStatements.WriteXml(
                    outFilePathDriverImpactStmt);
                Console.WriteLine(
                    "\nSee XML output of the Updated DataSet at {0}",
                outFilePathDriverImpactStmt);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
        }
    }

    // This class contains the driver information.
    public class DriverInfo
    {
        private Guid driverGuid = new Guid();

        public Guid UniqueId
        {
            get { return this.driverGuid; }
            set { this.driverGuid = value; }
        }

        private string driverName = string.Empty;

        public string Name
        {
            get { return this.driverName; }
            set { this.driverName = value; }
        }

        private string driverDescription = string.Empty;

        public string Description
        {
            get { return this.driverDescription; }
            set { this.driverDescription = value; }
        }

        public static int DriverType
        {
            get { return (int)PSLibrary.Optimizer.OptimizerEntities.Driver; }
        }

        private string statementNone = string.Empty;

        public string StatementNone
        {
            get { return this.statementNone; }
            set { this.statementNone = value; }
        }

        private string statementLow = string.Empty;

        public string StatementLow
        {
            get { return this.statementLow; }
            set { this.statementLow = value; }
        }

        private string statementModerate = string.Empty;

        public string StatementModerate
        {
            get { return this.statementModerate; }
            set { this.statementModerate = value; }
        }

        private string statementStrong = string.Empty;

        public string StatementStrong
        {
            get { return this.statementStrong; }
            set { this.statementStrong = value; }
        }

        private string statementExtreme = string.Empty;

        public string StatementExtreme
        {
            get { return this.statementExtreme; }
            set { this.statementExtreme = value; }
        }
    }

    // This class contains the prioritization information.
    class PrioritizationInfo
    {
        private Guid prioritizationGuid = Guid.NewGuid();

        public Guid UniqueId
        {
            get { return this.prioritizationGuid; }
            set { this.prioritizationGuid = value; }
        }
        private string prioritizationName = string.Empty;

        public string Name
        {
            get { return this.prioritizationName; }
            set { this.prioritizationName = value; }
        }

        private string prioritizationDescription = string.Empty;

        public string Description
        {
            get { return this.prioritizationDescription; }
            set { this.prioritizationDescription = value; }
        }
    }
}

</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadDriverList">
      <MemberSignature Language="C#" Value="public WebSvcDriver.DriverDataSet ReadDriverList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcDriver.DriverDataSet ReadDriverList() cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcDriver.Driver.ReadDriverList" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadDriverList () As DriverDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcDriver::DriverDataSet ^ ReadDriverList();" />
      <MemberSignature Language="F#" Value="member this.ReadDriverList : unit -&gt; WebSvcDriver.DriverDataSet" Usage="driver.ReadDriverList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Driver/ReadDriverList", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcDriver.DriverDataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a list of business strategy drivers.</summary>
        <returns>Contains the basic information for each driver.</returns>
        <remarks>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManagePrioritizations" />
              </term>
              <description>Allows a user to create or edit prioritizations for project portfolio analyses. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageDrivers" />
              </term>
              <description>Allows a user to create drivers for project portfolio analyses. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The example uses the <b>SvcDriver</b> namespace in the ProjectServerServices.dll proxy assembly. The <b>ConfigClientEndpoints</b> method uses an app.config file for setting the WCF binding, behavior, and endpoint. For information about creating a PSI proxy assembly and an app.config file, see Prerequisites for WCF-Based Code Samples.</para>
          <para>The <b>ReadDriverList</b> method returns a <b>DriverDataSet</b> object; the application writes the XML contents to the DriverList.xml file. Following are the contents of the DriverList.xml file.</para>
          <code>&amp;lt;?xml version="1.0" standalone="yes"?&amp;gt;
&amp;lt;DriverDataSet xmlns=
  "http://schemas.microsoft.com/office/project/server/webservices/DriverDataSet/"&amp;gt;
&amp;lt;Driver&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_NAME&amp;gt;&lt;/span&gt;Driver-e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_DESCRIPTION&amp;gt;&lt;/span&gt;testDriver-e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER_DESCRIPTION&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_IS_ACTIVE&amp;gt;&lt;/span&gt;true&amp;lt;/DRIVER_IS_ACTIVE&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_IS_USED_IN_PRIORITIZATION&amp;gt;&lt;/span&gt;false
&amp;lt;/DRIVER_IS_USED_IN_PRIORITIZATION&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_IS_USED_IN_ANALYSIS&amp;gt;&lt;/span&gt;false
&amp;lt;/DRIVER_IS_USED_IN_ANALYSIS&amp;gt;
&amp;lt;CREATED_DATE&amp;gt;2010-03-09T12:38:50.757-08:00&amp;lt;/CREATED_DATE&amp;gt;
&lt;span class="label"&gt;&amp;lt;MOD_DATE&amp;gt;&lt;/span&gt;2010-03-09T12:38:50.757-08:00&amp;lt;/MOD_DATE&amp;gt;
&lt;span class="label"&gt;&amp;lt;LAST_UPDATED_BY_RES_UID&amp;gt;&lt;/span&gt;2a4ba1a7-1d96-4086-8fa5-6dea243ed6b5
&amp;lt;/LAST_UPDATED_BY_RES_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LAST_UPDATED_BY_RES_NAME&amp;gt;&lt;/span&gt;Shana
&amp;lt;/LAST_UPDATED_BY_RES_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;CREATED_BY_RES_UID&amp;gt;&lt;/span&gt;2a4ba1a7-1d96-4086-8fa5-6dea243ed6b5
&amp;lt;/CREATED_BY_RES_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;CREATED_BY_RES_NAME&amp;gt;&lt;/span&gt;Shana&amp;lt;/CREATED_BY_RES_NAME&amp;gt;
&amp;lt;/Driver&amp;gt;
&amp;lt;Driver&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_NAME&amp;gt;&lt;/span&gt;Driver-ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_DESCRIPTION&amp;gt;&lt;/span&gt;testDriver-ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER_DESCRIPTION&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_IS_ACTIVE&amp;gt;&lt;/span&gt;true&amp;lt;/DRIVER_IS_ACTIVE&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_IS_USED_IN_PRIORITIZATION&amp;gt;&lt;/span&gt;false
&amp;lt;/DRIVER_IS_USED_IN_PRIORITIZATION&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_IS_USED_IN_ANALYSIS&amp;gt;&lt;/span&gt;false
&amp;lt;/DRIVER_IS_USED_IN_ANALYSIS&amp;gt;
&lt;span class="label"&gt;&amp;lt;CREATED_DATE&amp;gt;&lt;/span&gt;2010-03-09T12:38:51.14-08:00
&amp;lt;/CREATED_DATE&amp;gt;
&lt;span class="label"&gt;&amp;lt;MOD_DATE&amp;gt;&lt;/span&gt;2010-03-09T12:38:51.14-08:00
&amp;lt;/MOD_DATE&amp;gt;
&lt;span class="label"&gt;&amp;lt;LAST_UPDATED_BY_RES_UID&amp;gt;&lt;/span&gt;2a4ba1a7-1d96-4086-8fa5-6dea243ed6b5
&amp;lt;/LAST_UPDATED_BY_RES_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LAST_UPDATED_BY_RES_NAME&amp;gt;&lt;/span&gt;Shana
&amp;lt;/LAST_UPDATED_BY_RES_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;CREATED_BY_RES_UID&amp;gt;&lt;/span&gt;2a4ba1a7-1d96-4086-8fa5-6dea243ed6b5
&amp;lt;/CREATED_BY_RES_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;CREATED_BY_RES_NAME&amp;gt;&lt;/span&gt;Shana&amp;lt;/CREATED_BY_RES_NAME&amp;gt;
&amp;lt;/Driver&amp;gt;
&amp;lt;Driver&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_NAME&amp;gt;&lt;/span&gt;Driver-d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_DESCRIPTION&amp;gt;&lt;/span&gt;testDriver-d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER_DESCRIPTION&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_IS_ACTIVE&amp;gt;&lt;/span&gt;true&amp;lt;/DRIVER_IS_ACTIVE&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_IS_USED_IN_PRIORITIZATION&amp;gt;&lt;/span&gt;false
&amp;lt;/DRIVER_IS_USED_IN_PRIORITIZATION&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_IS_USED_IN_ANALYSIS&amp;gt;&lt;/span&gt;false
&amp;lt;/DRIVER_IS_USED_IN_ANALYSIS&amp;gt;
&lt;span class="label"&gt;&amp;lt;CREATED_DATE&amp;gt;&lt;/span&gt;2010-03-09T12:38:51.007-08:00
&amp;lt;/CREATED_DATE&amp;gt;
&lt;span class="label"&gt;&amp;lt;MOD_DATE&amp;gt;&lt;/span&gt;2010-03-09T12:38:51.007-08:00
&amp;lt;/MOD_DATE&amp;gt;
&lt;span class="label"&gt;&amp;lt;LAST_UPDATED_BY_RES_UID&amp;gt;&lt;/span&gt;2a4ba1a7-1d96-4086-8fa5-6dea243ed6b5
&amp;lt;/LAST_UPDATED_BY_RES_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LAST_UPDATED_BY_RES_NAME&amp;gt;&lt;/span&gt;Shana&amp;lt;/LAST_UPDATED_BY_RES_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;CREATED_BY_RES_UID&amp;gt;&lt;/span&gt;2a4ba1a7-1d96-4086-8fa5-6dea243ed6b5
&amp;lt;/CREATED_BY_RES_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;CREATED_BY_RES_NAME&amp;gt;&lt;/span&gt;Shana&amp;lt;/CREATED_BY_RES_NAME&amp;gt;
&amp;lt;/Driver&amp;gt;
&amp;lt;/DriverDataSet&amp;gt;
</code>
          <para>Following is the complete sample code.</para>
          <code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.ServiceModel;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.Drivers
{
    class Driver
    {
        private static SvcDriver.DriverClient driverClient;
        private const string DRIVER_ENDPOINT = "basicHttp_Driver";
        private const string OUTPUT_FILES = @"C:\Projects\Samples\Output\";
        private static string outFilePathDriverImpactStmt;
        private static string outFilePathDriverList;
        private static string outFilePathPrioritizationInfo;
        private static string outFilePathPrioritizationRow;
        private static string OutFilePathDrivers;
        private Dictionary&amp;lt;Guid, SortedList&amp;lt;int, SortedList&amp;lt;Guid, object&amp;gt;&amp;gt;&amp;gt; 
            lookupTableValues = 
            new Dictionary&amp;lt;Guid, SortedList&amp;lt;int, SortedList&amp;lt;Guid, object&amp;gt;&amp;gt;&amp;gt;();

        static void Main(string[] args)
        {
            // Configure the endpoints.
            ConfigClientEndpoints(DRIVER_ENDPOINT);

            // If output directory does not exist, create it.
            if (!Directory.Exists(OUTPUT_FILES))
            {
                Directory.CreateDirectory(OUTPUT_FILES);
            }

            outFilePathDriverImpactStmt = OUTPUT_FILES 
                + "DriverImpactStatements.xml";
            outFilePathDriverList = OUTPUT_FILES 
                + "DriverList.xml";
            outFilePathPrioritizationInfo = OUTPUT_FILES 
                + "PrioritizationInfo.xml";
            outFilePathPrioritizationRow = OUTPUT_FILES 
                + "CreatePrioritization.xml";
            OutFilePathDrivers = OUTPUT_FILES + "Drivers.xml";

            // Create the Driver dataset.
            SvcDriver.DriverDataSet driverInfoDS = 
                new SvcDriver.DriverDataSet(); ;

            // Create the drivers.
            driverInfoDS = CreateDrivers();
            driverInfoDS.WriteXml(OutFilePathDrivers);

            // Get the first driver and update its impact statements.
            Guid DRV_UID = 
                new Guid(driverInfoDS.Driver.Rows[0][0].ToString());

            // Update driver impact statements.
            UpdateImpactStatement(DRV_UID);

            // Read the list of drivers.
            SvcDriver.DriverDataSet driverListDS = 
                driverClient.ReadDriverList();
            driverListDS.WriteXml(outFilePathDriverList);
            Console.WriteLine("\nSee XML output of the Updated DataSet at {0}",
            outFilePathDriverList);

            // Create prioritization.
            PrioritizationInfo priInfo = CreateNewPrioritization();
            
            // Create a guids list and add the prioritization GUID to it.
            List&amp;lt;Guid&amp;gt; guids = new List&amp;lt;Guid&amp;gt;();
            guids.Add(priInfo.UniqueId);

            // Read prioritization.
            SvcDriver.DriverPrioritizationDataSet prioritizationDS = 
                driverClient.ReadPrioritization(priInfo.UniqueId);

            // Look-up-table values for comparison (hard-coded here).
            Guid[] lookUpTableValues = new Guid[2];

            // The lookup table value is greater.
            lookUpTableValues[0] = new Guid("3E0D4FFF-52A6-4235-9B2D-8FB26D74A139");
            // The lookup table value is less.
            lookUpTableValues[1] = 
                new Guid("9CECF611-8F36-4CA2-89E4-640537848513");

            // Add drivers to prioritization.
            prioritizationDS = UpdatePrioritizationInfo(
                driverInfoDS, priInfo, prioritizationDS, lookUpTableValues);

            // Read updated prioritization information.
            SvcDriver.DriverPrioritizationDataSet updatedPrioritizationDS = 
                driverClient.ReadPrioritization(priInfo.UniqueId);
            updatedPrioritizationDS.WriteXml(outFilePathPrioritizationInfo);
            Console.WriteLine(
                "\nSee XML output of the Updated Prioritization at {0}",
                outFilePathPrioritizationInfo);

            // Delete prioritization.
            driverClient.DeletePrioritizations(guids.ToArray());
            Console.WriteLine(" Prioritization {0} deleted", priInfo.UniqueId);
            guids.Clear();

            // Delete drivers.
            foreach (SvcDriver.DriverDataSet.DriverRow drvRow in
                driverInfoDS.Driver.Rows)
            {
                guids.Add(drvRow.DRIVER_UID);
            }
            driverClient.DeleteDrivers(guids.ToArray());
            Console.WriteLine("Deleted drivers");
            Console.ReadKey();
        }

        // Update a prioritization.
        private static SvcDriver.DriverPrioritizationDataSet
            UpdatePrioritizationInfo(
            SvcDriver.DriverDataSet driverInfoDS,
            PrioritizationInfo priInfo,
            SvcDriver.DriverPrioritizationDataSet prioritizationDS,
            Guid[] lookUpTableValues)
        {
            // Add a prioritization row.
            foreach (SvcDriver.DriverDataSet.DriverRow dRow in
                driverInfoDS.Driver.Rows)
            {
                SvcDriver.DriverPrioritizationDataSet.PrioritizationEntriesDataTable
                    prioEntries = prioritizationDS.PrioritizationEntries;
                SvcDriver.DriverPrioritizationDataSet.PrioritizationEntriesRow
                    prioritizationEntriesRow =
                    prioEntries.NewPrioritizationEntriesRow();
                prioritizationEntriesRow.PRIORITIZATION_UID =
                    priInfo.UniqueId;
                prioritizationEntriesRow.DRIVER_UID = dRow.DRIVER_UID;
                prioritizationEntriesRow.DRIVER_DESCRIPTION =
                    dRow.DRIVER_DESCRIPTION;
                prioEntries.AddPrioritizationEntriesRow(
                    prioritizationEntriesRow);
            }

            // Add driver-to-driver relations.
            for (int i = 0; i &amp;lt; driverInfoDS.Driver.Rows.Count - 1; i++)
            {
                for (int j = i + 1; j &amp;lt; driverInfoDS.Driver.Rows.Count; j++)
                {
                    SvcDriver.DriverPrioritizationDataSet.DriverRelationsRow
                        driverRelationsRow =
                        prioritizationDS.DriverRelations.NewDriverRelationsRow();
                    driverRelationsRow.PRIORITIZATION_UID = priInfo.UniqueId;
                    driverRelationsRow.DRIVER1_UID =
                        new Guid(driverInfoDS.Driver.Rows[i][0].ToString());
                    driverRelationsRow.DRIVER2_UID =
                        new Guid(driverInfoDS.Driver.Rows[j][0].ToString());
                    driverRelationsRow.LT_STRUCT_UID = lookUpTableValues[i];

                    prioritizationDS.DriverRelations.AddDriverRelationsRow(
                        driverRelationsRow);

                    // Also save the complement values.
                    Guid complementCodeValue =
                        PSLibrary.LookupTables.GetRelativeImportanceComplement(
                        lookUpTableValues[i]);
                    if (complementCodeValue != Guid.Empty)
                    {
                        driverRelationsRow =
                            prioritizationDS.DriverRelations.NewDriverRelationsRow();
                        driverRelationsRow.PRIORITIZATION_UID = priInfo.UniqueId;
                        driverRelationsRow.DRIVER1_UID =
                            new Guid(driverInfoDS.Driver.Rows[j][0].ToString());
                        driverRelationsRow.DRIVER2_UID =
                            new Guid(driverInfoDS.Driver.Rows[i][0].ToString());
                        driverRelationsRow.LT_STRUCT_UID = complementCodeValue;
                        prioritizationDS.DriverRelations.AddDriverRelationsRow(
                            driverRelationsRow);
                    }
                }
            }

            try
            {
                Console.WriteLine("Updating the DataSet....");
                prioritizationDS =
                    driverClient.UpdatePrioritization(prioritizationDS);
                Console.WriteLine(" DataSet updated successfully!");
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return prioritizationDS;
        }
        
        // Create a new prioritization.
        private static PrioritizationInfo CreateNewPrioritization()
        {
                SvcDriver.DriverPrioritizationDataSet driverPrioritizationDS =
                    new SvcDriver.DriverPrioritizationDataSet();
                PrioritizationInfo priInfo = new PrioritizationInfo();
                priInfo.UniqueId = Guid.NewGuid();
                priInfo.Name = "Prioritization-" + priInfo.UniqueId;
                priInfo.Description = "Test pri";
            try
            {
                SvcDriver.DriverPrioritizationDataSet.PrioritizationRow 
                    prioritizationRow =
                    driverPrioritizationDS.Prioritization.NewPrioritizationRow();
                prioritizationRow.PRIORITIZATION_UID = priInfo.UniqueId;
                prioritizationRow.PRIORITIZATION_NAME = priInfo.Name;
                prioritizationRow.PRIORITIZATION_DESCRIPTION = 
                    priInfo.Description;
                prioritizationRow.RELATIVE_IMPORTANCE_CF_UID = 
                    PSLibrary.CustomField.RELATIVE_IMPORTANCE_MD_PROP_UID;
                prioritizationRow.PRIORITIZATION_IS_MANUAL = false;

                driverPrioritizationDS.Prioritization.AddPrioritizationRow(
                    prioritizationRow);
                Console.WriteLine("Prioritization: Adding driver prioritization"
                    + priInfo.Name);
                driverClient.CreatePrioritization(driverPrioritizationDS);
                Console.WriteLine("Prioritization: Creation done");
                driverPrioritizationDS.WriteXml(outFilePathPrioritizationRow);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return priInfo;
        }

        // Configure the custom field client endpoints.
        public static void ConfigClientEndpoints(string endpt)
        {
            driverClient = new SvcDriver.DriverClient(endpt);
        }

        // Create drivers with impact statements.
        private static SvcDriver.DriverDataSet CreateDrivers()
        {
            DriverInfo drvInfo = new DriverInfo();
            SvcDriver.DriverDataSet updatedDriverDS = 
                new SvcDriver.DriverDataSet();
            try
            {
                // Creates three drivers and the impact statements for each.
                for (int i = 0; i &amp;lt; 3; i++)
                {
                    SvcDriver.DriverDataSet drvDS =
                        new SvcDriver.DriverDataSet();
                    drvInfo.UniqueId = Guid.NewGuid();
                    drvInfo.Name = "Driver-" + drvInfo.UniqueId;
                    drvInfo.Description = "test" + drvInfo.Name;
                    drvInfo.StatementNone = "PROJECT_IMPACT_NONE_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementLow = "PROJECT_IMPACT_LOW_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementModerate = "PROJECT_IMPACT_MODERATE_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementStrong = "PROJECT_IMPACT_STRONG_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementExtreme = "PROJECT_IMPACT_EXTREME_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;

                    SvcDriver.DriverDataSet.DriverRow drvRow = 
                        drvDS.Driver.NewDriverRow();
                    drvRow.DRIVER_UID = drvInfo.UniqueId;
                    drvRow.DRIVER_NAME = drvInfo.Name;
                    drvRow.DRIVER_DESCRIPTION = drvInfo.Description;
                    drvDS.Driver.AddDriverRow(drvRow);

                    SvcDriver.DriverDataSet.DriverImpactStatementsDataTable
                    drvImpStmts = drvDS.DriverImpactStatements;

                    SvcDriver.DriverDataSet.DriverImpactStatementsRow 
                        stmtRow = drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_NONE_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementNone;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_LOW_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementLow;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_MODERATE_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementModerate;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_STRONG_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementStrong;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_EXTREME_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementExtreme;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    Console.WriteLine("Adding driver " + drvInfo.Name);
                    driverClient.CreateDriver(
                        (SvcDriver.DriverDataSet)drvDS);
                    Console.WriteLine("Drivers {0} created successfully!", i);
                    updatedDriverDS.Merge(drvDS);
                }
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return updatedDriverDS;
        }

        // Update the driver impact statements.
        private static void UpdateImpactStatement(Guid DriverGuid)
        {
            try
            {
                Guid LT_UID = 
                    new Guid("779271C4-894D-4385-9E33-1251A9E80541");
                Guid IMPACT_UID = 
                    new Guid("1728D080-BA74-4D86-A29A-27E4318001C4");
                SvcDriver.DriverDataSet drvInfoDS = 
                    driverClient.ReadDriver(DriverGuid);
                SvcDriver.DriverDataSet.DriverImpactStatementsRow impactRow;
                SvcDriver.DriverDataSet.DriverImpactStatementsDataTable 
                    drvImpactStmts = drvInfoDS.DriverImpactStatements;
                impactRow = 
                  drvImpactStmts.FindByDRIVER_UIDPROJECT_IMPACT_CF_UIDLT_STRUCT_UID(
                  DriverGuid, IMPACT_UID, LT_UID);
                impactRow.DESCRIPTION = "new desc";
                driverClient.UpdateDriver(drvInfoDS);
                drvInfoDS.DriverImpactStatements.WriteXml(
                    outFilePathDriverImpactStmt);
                Console.WriteLine(
                    "\nSee XML output of the Updated DataSet at {0}",
                outFilePathDriverImpactStmt);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
        }
    }

    // This class contains the driver information.
    public class DriverInfo
    {
        private Guid driverGuid = new Guid();

        public Guid UniqueId
        {
            get { return this.driverGuid; }
            set { this.driverGuid = value; }
        }

        private string driverName = string.Empty;

        public string Name
        {
            get { return this.driverName; }
            set { this.driverName = value; }
        }

        private string driverDescription = string.Empty;

        public string Description
        {
            get { return this.driverDescription; }
            set { this.driverDescription = value; }
        }

        public static int DriverType
        {
            get { return (int)PSLibrary.Optimizer.OptimizerEntities.Driver; }
        }

        private string statementNone = string.Empty;

        public string StatementNone
        {
            get { return this.statementNone; }
            set { this.statementNone = value; }
        }

        private string statementLow = string.Empty;

        public string StatementLow
        {
            get { return this.statementLow; }
            set { this.statementLow = value; }
        }

        private string statementModerate = string.Empty;

        public string StatementModerate
        {
            get { return this.statementModerate; }
            set { this.statementModerate = value; }
        }

        private string statementStrong = string.Empty;

        public string StatementStrong
        {
            get { return this.statementStrong; }
            set { this.statementStrong = value; }
        }

        private string statementExtreme = string.Empty;

        public string StatementExtreme
        {
            get { return this.statementExtreme; }
            set { this.statementExtreme = value; }
        }
    }

    // This class contains the prioritization information.
    class PrioritizationInfo
    {
        private Guid prioritizationGuid = Guid.NewGuid();

        public Guid UniqueId
        {
            get { return this.prioritizationGuid; }
            set { this.prioritizationGuid = value; }
        }
        private string prioritizationName = string.Empty;

        public string Name
        {
            get { return this.prioritizationName; }
            set { this.prioritizationName = value; }
        }

        private string prioritizationDescription = string.Empty;

        public string Description
        {
            get { return this.prioritizationDescription; }
            set { this.prioritizationDescription = value; }
        }
    }
}

</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadPrioritization">
      <MemberSignature Language="C#" Value="public WebSvcDriver.DriverPrioritizationDataSet ReadPrioritization (Guid prioritizationUid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcDriver.DriverPrioritizationDataSet ReadPrioritization(valuetype System.Guid prioritizationUid) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcDriver.Driver.ReadPrioritization(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadPrioritization (prioritizationUid As Guid) As DriverPrioritizationDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcDriver::DriverPrioritizationDataSet ^ ReadPrioritization(Guid prioritizationUid);" />
      <MemberSignature Language="F#" Value="member this.ReadPrioritization : Guid -&gt; WebSvcDriver.DriverPrioritizationDataSet" Usage="driver.ReadPrioritization prioritizationUid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Driver/ReadPrioritization", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcDriver.DriverPrioritizationDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prioritizationUid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="prioritizationUid">GUID of the prioritization.</param>
        <summary>Retrieves information about the business strategy driver prioritization.</summary>
        <returns>Contains information about the associated drivers, driver relations, and the prioritization.</returns>
        <remarks>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManagePortfolioAnalyses" />
              </term>
              <description>Allows a user to create a portfolio analysis. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManagePrioritizations" />
              </term>
              <description>Allows a user to create or edit prioritizations for project portfolio analyses. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The example uses the <b>SvcDriver</b> namespace in the ProjectServerServices.dll proxy assembly. The <b>ConfigClientEndpoints</b> method uses an app.config file for setting the WCF binding, behavior, and endpoint. For information about creating a PSI proxy assembly and an app.config file, see Prerequisites for WCF-Based Code Samples.</para>
          <para> In this example, the <b>ReadPrioritization</b> method is used to read the prioritization information after it has been updated. It returns the <b>updatedPrioritizationDS</b> object. The application writes the contents to the PrioritizationInfo.xml file.  Following are the contents of the PrioritizationInfo.xml file.</para>
          <code>&amp;lt;DriverPrioritizationDataSet xmlns="http://schemas.microsoft.com/office/project/server/webservices/DriverPrioritizationDataSet/"&amp;gt;
  &amp;lt;Prioritization&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_NAME&amp;gt;&lt;/span&gt;Prioritization-d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_DESCRIPTION&amp;gt;&lt;/span&gt;Test pri
&amp;lt;/PRIORITIZATION_DESCRIPTION&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_IS_MANUAL&amp;gt;&lt;/span&gt;false
&amp;lt;/PRIORITIZATION_IS_MANUAL&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_IS_COMPLETE&amp;gt;&lt;/span&gt;true
&amp;lt;/PRIORITIZATION_IS_COMPLETE&amp;gt;
&lt;span class="label"&gt;&amp;lt;RELATIVE_IMPORTANCE_CF_UID&amp;gt;&lt;/span&gt;2cd29b66-4cca-4c3e-8421-1e54c6d06dca
&amp;lt;/RELATIVE_IMPORTANCE_CF_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;CONSISTENCY_RATIO&amp;gt;&lt;/span&gt;0.86625801935397173&amp;lt;/CONSISTENCY_RATIO&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_IS_USED_IN_ANALYSIS&amp;gt;&lt;/span&gt;false
&amp;lt;/PRIORITIZATION_IS_USED_IN_ANALYSIS&amp;gt;
&lt;span class="label"&gt;&amp;lt;CREATED_DATE&amp;gt;&lt;/span&gt;2010-03-09T12:38:52.023-08:00&amp;lt;/CREATED_DATE&amp;gt;
&lt;span class="label"&gt;&amp;lt;MOD_DATE&amp;gt;&lt;/span&gt;2010-03-09T12:38:52.49-08:00&amp;lt;/MOD_DATE&amp;gt;
&lt;span class="label"&gt;&amp;lt;LAST_UPDATED_BY_RES_UID&amp;gt;&lt;/span&gt;2a4ba1a7-1d96-4086-8fa5-6dea243ed6b5
&amp;lt;/LAST_UPDATED_BY_RES_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LAST_UPDATED_BY_RES_NAME&amp;gt;&lt;/span&gt;Shana Ramamoorthy
&amp;lt;/LAST_UPDATED_BY_RES_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;CREATED_BY_RES_UID&amp;gt;&lt;/span&gt;2a4ba1a7-1d96-4086-8fa5-6dea243ed6b5
&amp;lt;/CREATED_BY_RES_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;CREATED_BY_RES_NAME&amp;gt;&lt;/span&gt;Shana Ramamoorthy&amp;lt;/CREATED_BY_RES_NAME&amp;gt;
&amp;lt;/Prioritization&amp;gt;
&amp;lt;PrioritizationEntries&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_NAME&amp;gt;&lt;/span&gt;Driver-e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_PRIORITY&amp;gt;&lt;/span&gt;0.58367346938775511
&amp;lt;/DRIVER_PRIORITY&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_DESCRIPTION&amp;gt;&lt;/span&gt;testDriver-e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER_DESCRIPTION&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_IS_ACTIVE&amp;gt;&lt;/span&gt;true&amp;lt;/DRIVER_IS_ACTIVE&amp;gt;
&amp;lt;/PrioritizationEntries&amp;gt;
&amp;lt;PrioritizationEntries&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_NAME&amp;gt;&lt;/span&gt;Driver-ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_PRIORITY&amp;gt;&lt;/span&gt;0.28108843537414968&amp;lt;/DRIVER_PRIORITY&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_DESCRIPTION&amp;gt;&lt;/span&gt;testDriver-ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER_DESCRIPTION&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_IS_ACTIVE&amp;gt;&lt;/span&gt;true&amp;lt;/DRIVER_IS_ACTIVE&amp;gt;
&amp;lt;/PrioritizationEntries&amp;gt;
&amp;lt;PrioritizationEntries&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_NAME&amp;gt;&lt;/span&gt;Driver-d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_PRIORITY&amp;gt;&lt;/span&gt;0.13523809523809521&amp;lt;/DRIVER_PRIORITY&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_DESCRIPTION&amp;gt;&lt;/span&gt;testDriver-d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER_DESCRIPTION&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_IS_ACTIVE&amp;gt;&lt;/span&gt;true&amp;lt;/DRIVER_IS_ACTIVE&amp;gt;
&amp;lt;/PrioritizationEntries&amp;gt;
&amp;lt;DriverRelations&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER1_UID&amp;gt;&lt;/span&gt;e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER1_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER2_UID&amp;gt;&lt;/span&gt;ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER2_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;3e0d4fff-52a6-4235-9b2d-8fb26d74a139
&amp;lt;/LT_STRUCT_UID&amp;gt;
&amp;lt;/DriverRelations&amp;gt;
&amp;lt;DriverRelations&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER1_UID&amp;gt;&lt;/span&gt;e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER1_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER2_UID&amp;gt;&lt;/span&gt;d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER2_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;3e0d4fff-52a6-4235-9b2d-8fb26d74a139
&amp;lt;/LT_STRUCT_UID&amp;gt;
&amp;lt;/DriverRelations&amp;gt;
&amp;lt;DriverRelations&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER1_UID&amp;gt;&lt;/span&gt;ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER1_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER2_UID&amp;gt;&lt;/span&gt;e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER2_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;9cecf611-8f36-4ca2-89e4-640537848513
&amp;lt;/LT_STRUCT_UID&amp;gt;
&amp;lt;/DriverRelations&amp;gt;
&amp;lt;DriverRelations&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER1_UID&amp;gt;&lt;/span&gt;ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER1_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER2_UID&amp;gt;&lt;/span&gt;d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER2_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;3e0d4fff-52a6-4235-9b2d-8fb26d74a139
&amp;lt;/LT_STRUCT_UID&amp;gt;
&amp;lt;/DriverRelations&amp;gt;
&amp;lt;DriverRelations&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER1_UID&amp;gt;&lt;/span&gt;d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER1_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER2_UID&amp;gt;&lt;/span&gt;e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER2_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;9cecf611-8f36-4ca2-89e4-640537848513
&amp;lt;/LT_STRUCT_UID&amp;gt;
&amp;lt;/DriverRelations&amp;gt;
&amp;lt;DriverRelations&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER1_UID&amp;gt;&lt;/span&gt;d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER1_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER2_UID&amp;gt;&lt;/span&gt;ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER2_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;9cecf611-8f36-4ca2-89e4-640537848513
&amp;lt;/LT_STRUCT_UID&amp;gt;
&amp;lt;/DriverRelations&amp;gt;
&amp;lt;/DriverPrioritizationDataSet&amp;gt;</code>
          <para>Following is the complete sample code.</para>
          <code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.ServiceModel;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.Drivers
{
    class Driver
    {
        private static SvcDriver.DriverClient driverClient;
        private const string DRIVER_ENDPOINT = "basicHttp_Driver";
        private const string OUTPUT_FILES = @"C:\Projects\Samples\Output\";
        private static string outFilePathDriverImpactStmt;
        private static string outFilePathDriverList;
        private static string outFilePathPrioritizationInfo;
        private static string outFilePathPrioritizationRow;
        private static string OutFilePathDrivers;
        private Dictionary&amp;lt;Guid, SortedList&amp;lt;int, SortedList&amp;lt;Guid, object&amp;gt;&amp;gt;&amp;gt; 
            lookupTableValues = 
            new Dictionary&amp;lt;Guid, SortedList&amp;lt;int, SortedList&amp;lt;Guid, object&amp;gt;&amp;gt;&amp;gt;();

        static void Main(string[] args)
        {
            // Configure the endpoints.
            ConfigClientEndpoints(DRIVER_ENDPOINT);

            // If output directory does not exist, create it.
            if (!Directory.Exists(OUTPUT_FILES))
            {
                Directory.CreateDirectory(OUTPUT_FILES);
            }

            outFilePathDriverImpactStmt = OUTPUT_FILES 
                + "DriverImpactStatements.xml";
            outFilePathDriverList = OUTPUT_FILES 
                + "DriverList.xml";
            outFilePathPrioritizationInfo = OUTPUT_FILES 
                + "PrioritizationInfo.xml";
            outFilePathPrioritizationRow = OUTPUT_FILES 
                + "CreatePrioritization.xml";
            OutFilePathDrivers = OUTPUT_FILES + "Drivers.xml";

            // Create the Driver dataset.
            SvcDriver.DriverDataSet driverInfoDS = 
                new SvcDriver.DriverDataSet(); ;

            // Create the drivers.
            driverInfoDS = CreateDrivers();
            driverInfoDS.WriteXml(OutFilePathDrivers);

            // Get the first driver and update its impact statements.
            Guid DRV_UID = 
                new Guid(driverInfoDS.Driver.Rows[0][0].ToString());

            // Update driver impact statements.
            UpdateImpactStatement(DRV_UID);

            // Read the list of drivers.
            SvcDriver.DriverDataSet driverListDS = 
                driverClient.ReadDriverList();
            driverListDS.WriteXml(outFilePathDriverList);
            Console.WriteLine("\nSee XML output of the Updated DataSet at {0}",
            outFilePathDriverList);

            // Create prioritization.
            PrioritizationInfo priInfo = CreateNewPrioritization();
            
            // Create a guids list and add the prioritization GUID to it.
            List&amp;lt;Guid&amp;gt; guids = new List&amp;lt;Guid&amp;gt;();
            guids.Add(priInfo.UniqueId);

            // Read prioritization.
            SvcDriver.DriverPrioritizationDataSet prioritizationDS = 
                driverClient.ReadPrioritization(priInfo.UniqueId);

            // Look-up-table values for comparison (hard-coded here).
            Guid[] lookUpTableValues = new Guid[2];

            // The lookup table value is greater.
            lookUpTableValues[0] = new Guid("3E0D4FFF-52A6-4235-9B2D-8FB26D74A139");
            // The lookup table value is less.
            lookUpTableValues[1] = 
                new Guid("9CECF611-8F36-4CA2-89E4-640537848513");

            // Add drivers to prioritization.
            prioritizationDS = UpdatePrioritizationInfo(
                driverInfoDS, priInfo, prioritizationDS, lookUpTableValues);

            // Read updated prioritization information.
            SvcDriver.DriverPrioritizationDataSet updatedPrioritizationDS = 
                driverClient.ReadPrioritization(priInfo.UniqueId);
            updatedPrioritizationDS.WriteXml(outFilePathPrioritizationInfo);
            Console.WriteLine(
                "\nSee XML output of the Updated Prioritization at {0}",
                outFilePathPrioritizationInfo);

            // Delete prioritization.
            driverClient.DeletePrioritizations(guids.ToArray());
            Console.WriteLine(" Prioritization {0} deleted", priInfo.UniqueId);
            guids.Clear();

            // Delete drivers.
            foreach (SvcDriver.DriverDataSet.DriverRow drvRow in
                driverInfoDS.Driver.Rows)
            {
                guids.Add(drvRow.DRIVER_UID);
            }
            driverClient.DeleteDrivers(guids.ToArray());
            Console.WriteLine("Deleted drivers");
            Console.ReadKey();
        }

        // Update a prioritization.
        private static SvcDriver.DriverPrioritizationDataSet
            UpdatePrioritizationInfo(
            SvcDriver.DriverDataSet driverInfoDS,
            PrioritizationInfo priInfo,
            SvcDriver.DriverPrioritizationDataSet prioritizationDS,
            Guid[] lookUpTableValues)
        {
            // Add a prioritization row.
            foreach (SvcDriver.DriverDataSet.DriverRow dRow in
                driverInfoDS.Driver.Rows)
            {
                SvcDriver.DriverPrioritizationDataSet.PrioritizationEntriesDataTable
                    prioEntries = prioritizationDS.PrioritizationEntries;
                SvcDriver.DriverPrioritizationDataSet.PrioritizationEntriesRow
                    prioritizationEntriesRow =
                    prioEntries.NewPrioritizationEntriesRow();
                prioritizationEntriesRow.PRIORITIZATION_UID =
                    priInfo.UniqueId;
                prioritizationEntriesRow.DRIVER_UID = dRow.DRIVER_UID;
                prioritizationEntriesRow.DRIVER_DESCRIPTION =
                    dRow.DRIVER_DESCRIPTION;
                prioEntries.AddPrioritizationEntriesRow(
                    prioritizationEntriesRow);
            }

            // Add driver-to-driver relations.
            for (int i = 0; i &amp;lt; driverInfoDS.Driver.Rows.Count - 1; i++)
            {
                for (int j = i + 1; j &amp;lt; driverInfoDS.Driver.Rows.Count; j++)
                {
                    SvcDriver.DriverPrioritizationDataSet.DriverRelationsRow
                        driverRelationsRow =
                        prioritizationDS.DriverRelations.NewDriverRelationsRow();
                    driverRelationsRow.PRIORITIZATION_UID = priInfo.UniqueId;
                    driverRelationsRow.DRIVER1_UID =
                        new Guid(driverInfoDS.Driver.Rows[i][0].ToString());
                    driverRelationsRow.DRIVER2_UID =
                        new Guid(driverInfoDS.Driver.Rows[j][0].ToString());
                    driverRelationsRow.LT_STRUCT_UID = lookUpTableValues[i];

                    prioritizationDS.DriverRelations.AddDriverRelationsRow(
                        driverRelationsRow);

                    // Also save the complement values.
                    Guid complementCodeValue =
                        PSLibrary.LookupTables.GetRelativeImportanceComplement(
                        lookUpTableValues[i]);
                    if (complementCodeValue != Guid.Empty)
                    {
                        driverRelationsRow =
                            prioritizationDS.DriverRelations.NewDriverRelationsRow();
                        driverRelationsRow.PRIORITIZATION_UID = priInfo.UniqueId;
                        driverRelationsRow.DRIVER1_UID =
                            new Guid(driverInfoDS.Driver.Rows[j][0].ToString());
                        driverRelationsRow.DRIVER2_UID =
                            new Guid(driverInfoDS.Driver.Rows[i][0].ToString());
                        driverRelationsRow.LT_STRUCT_UID = complementCodeValue;
                        prioritizationDS.DriverRelations.AddDriverRelationsRow(
                            driverRelationsRow);
                    }
                }
            }

            try
            {
                Console.WriteLine("Updating the DataSet....");
                prioritizationDS =
                    driverClient.UpdatePrioritization(prioritizationDS);
                Console.WriteLine(" DataSet updated successfully!");
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return prioritizationDS;
        }
        
        // Create a new prioritization.
        private static PrioritizationInfo CreateNewPrioritization()
        {
                SvcDriver.DriverPrioritizationDataSet driverPrioritizationDS =
                    new SvcDriver.DriverPrioritizationDataSet();
                PrioritizationInfo priInfo = new PrioritizationInfo();
                priInfo.UniqueId = Guid.NewGuid();
                priInfo.Name = "Prioritization-" + priInfo.UniqueId;
                priInfo.Description = "Test pri";
            try
            {
                SvcDriver.DriverPrioritizationDataSet.PrioritizationRow 
                    prioritizationRow =
                    driverPrioritizationDS.Prioritization.NewPrioritizationRow();
                prioritizationRow.PRIORITIZATION_UID = priInfo.UniqueId;
                prioritizationRow.PRIORITIZATION_NAME = priInfo.Name;
                prioritizationRow.PRIORITIZATION_DESCRIPTION = 
                    priInfo.Description;
                prioritizationRow.RELATIVE_IMPORTANCE_CF_UID = 
                    PSLibrary.CustomField.RELATIVE_IMPORTANCE_MD_PROP_UID;
                prioritizationRow.PRIORITIZATION_IS_MANUAL = false;

                driverPrioritizationDS.Prioritization.AddPrioritizationRow(
                    prioritizationRow);
                Console.WriteLine("Prioritization: Adding driver prioritization"
                    + priInfo.Name);
                driverClient.CreatePrioritization(driverPrioritizationDS);
                Console.WriteLine("Prioritization: Creation done");
                driverPrioritizationDS.WriteXml(outFilePathPrioritizationRow);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return priInfo;
        }

        // Configure the custom field client endpoints.
        public static void ConfigClientEndpoints(string endpt)
        {
            driverClient = new SvcDriver.DriverClient(endpt);
        }

        // Create drivers with impact statements.
        private static SvcDriver.DriverDataSet CreateDrivers()
        {
            DriverInfo drvInfo = new DriverInfo();
            SvcDriver.DriverDataSet updatedDriverDS = 
                new SvcDriver.DriverDataSet();
            try
            {
                // Creates three drivers and the impact statements for each.
                for (int i = 0; i &amp;lt; 3; i++)
                {
                    SvcDriver.DriverDataSet drvDS =
                        new SvcDriver.DriverDataSet();
                    drvInfo.UniqueId = Guid.NewGuid();
                    drvInfo.Name = "Driver-" + drvInfo.UniqueId;
                    drvInfo.Description = "test" + drvInfo.Name;
                    drvInfo.StatementNone = "PROJECT_IMPACT_NONE_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementLow = "PROJECT_IMPACT_LOW_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementModerate = "PROJECT_IMPACT_MODERATE_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementStrong = "PROJECT_IMPACT_STRONG_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementExtreme = "PROJECT_IMPACT_EXTREME_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;

                    SvcDriver.DriverDataSet.DriverRow drvRow = 
                        drvDS.Driver.NewDriverRow();
                    drvRow.DRIVER_UID = drvInfo.UniqueId;
                    drvRow.DRIVER_NAME = drvInfo.Name;
                    drvRow.DRIVER_DESCRIPTION = drvInfo.Description;
                    drvDS.Driver.AddDriverRow(drvRow);

                    SvcDriver.DriverDataSet.DriverImpactStatementsDataTable
                    drvImpStmts = drvDS.DriverImpactStatements;

                    SvcDriver.DriverDataSet.DriverImpactStatementsRow 
                        stmtRow = drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_NONE_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementNone;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_LOW_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementLow;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_MODERATE_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementModerate;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_STRONG_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementStrong;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_EXTREME_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementExtreme;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    Console.WriteLine("Adding driver " + drvInfo.Name);
                    driverClient.CreateDriver(
                        (SvcDriver.DriverDataSet)drvDS);
                    Console.WriteLine("Drivers {0} created successfully!", i);
                    updatedDriverDS.Merge(drvDS);
                }
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return updatedDriverDS;
        }

        // Update the driver impact statements.
        private static void UpdateImpactStatement(Guid DriverGuid)
        {
            try
            {
                Guid LT_UID = 
                    new Guid("779271C4-894D-4385-9E33-1251A9E80541");
                Guid IMPACT_UID = 
                    new Guid("1728D080-BA74-4D86-A29A-27E4318001C4");
                SvcDriver.DriverDataSet drvInfoDS = 
                    driverClient.ReadDriver(DriverGuid);
                SvcDriver.DriverDataSet.DriverImpactStatementsRow impactRow;
                SvcDriver.DriverDataSet.DriverImpactStatementsDataTable 
                    drvImpactStmts = drvInfoDS.DriverImpactStatements;
                impactRow = 
                  drvImpactStmts.FindByDRIVER_UIDPROJECT_IMPACT_CF_UIDLT_STRUCT_UID(
                  DriverGuid, IMPACT_UID, LT_UID);
                impactRow.DESCRIPTION = "new desc";
                driverClient.UpdateDriver(drvInfoDS);
                drvInfoDS.DriverImpactStatements.WriteXml(
                    outFilePathDriverImpactStmt);
                Console.WriteLine(
                    "\nSee XML output of the Updated DataSet at {0}",
                outFilePathDriverImpactStmt);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
        }
    }

    // This class contains the driver information.
    public class DriverInfo
    {
        private Guid driverGuid = new Guid();

        public Guid UniqueId
        {
            get { return this.driverGuid; }
            set { this.driverGuid = value; }
        }

        private string driverName = string.Empty;

        public string Name
        {
            get { return this.driverName; }
            set { this.driverName = value; }
        }

        private string driverDescription = string.Empty;

        public string Description
        {
            get { return this.driverDescription; }
            set { this.driverDescription = value; }
        }

        public static int DriverType
        {
            get { return (int)PSLibrary.Optimizer.OptimizerEntities.Driver; }
        }

        private string statementNone = string.Empty;

        public string StatementNone
        {
            get { return this.statementNone; }
            set { this.statementNone = value; }
        }

        private string statementLow = string.Empty;

        public string StatementLow
        {
            get { return this.statementLow; }
            set { this.statementLow = value; }
        }

        private string statementModerate = string.Empty;

        public string StatementModerate
        {
            get { return this.statementModerate; }
            set { this.statementModerate = value; }
        }

        private string statementStrong = string.Empty;

        public string StatementStrong
        {
            get { return this.statementStrong; }
            set { this.statementStrong = value; }
        }

        private string statementExtreme = string.Empty;

        public string StatementExtreme
        {
            get { return this.statementExtreme; }
            set { this.statementExtreme = value; }
        }
    }

    // This class contains the prioritization information.
    class PrioritizationInfo
    {
        private Guid prioritizationGuid = Guid.NewGuid();

        public Guid UniqueId
        {
            get { return this.prioritizationGuid; }
            set { this.prioritizationGuid = value; }
        }
        private string prioritizationName = string.Empty;

        public string Name
        {
            get { return this.prioritizationName; }
            set { this.prioritizationName = value; }
        }

        private string prioritizationDescription = string.Empty;

        public string Description
        {
            get { return this.prioritizationDescription; }
            set { this.prioritizationDescription = value; }
        }
    }
}

</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadPrioritizationList">
      <MemberSignature Language="C#" Value="public WebSvcDriver.DriverPrioritizationDataSet ReadPrioritizationList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcDriver.DriverPrioritizationDataSet ReadPrioritizationList() cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcDriver.Driver.ReadPrioritizationList" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadPrioritizationList () As DriverPrioritizationDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcDriver::DriverPrioritizationDataSet ^ ReadPrioritizationList();" />
      <MemberSignature Language="F#" Value="member this.ReadPrioritizationList : unit -&gt; WebSvcDriver.DriverPrioritizationDataSet" Usage="driver.ReadPrioritizationList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Driver/ReadPrioritizationList", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcDriver.DriverPrioritizationDataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the list of prioritizations for business strategy drivers.</summary>
        <returns>Contains basic information about each prioritization.</returns>
        <remarks>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManagePortfolioAnalyses" />
              </term>
              <description>Allows a user to create portfolio analyses. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManagePrioritizations" />
              </term>
              <description>Allows a user to create or edit prioritizations for project portfolio analyses. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateDriver">
      <MemberSignature Language="C#" Value="public WebSvcDriver.DriverDataSet UpdateDriver (WebSvcDriver.DriverDataSet dsDriver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcDriver.DriverDataSet UpdateDriver(class WebSvcDriver.DriverDataSet dsDriver) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcDriver.Driver.UpdateDriver(WebSvcDriver.DriverDataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpdateDriver (dsDriver As DriverDataSet) As DriverDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcDriver::DriverDataSet ^ UpdateDriver(WebSvcDriver::DriverDataSet ^ dsDriver);" />
      <MemberSignature Language="F#" Value="member this.UpdateDriver : WebSvcDriver.DriverDataSet -&gt; WebSvcDriver.DriverDataSet" Usage="driver.UpdateDriver dsDriver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Driver/UpdateDriver", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcDriver.DriverDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dsDriver" Type="WebSvcDriver.DriverDataSet" />
      </Parameters>
      <Docs>
        <param name="dsDriver">Contains changes to make in one driver.</param>
        <summary>Updates a business strategy driver.</summary>
        <returns>Contains the revised driver information.</returns>
        <remarks>
          <para>The <paramref name="dsDriver" /> argument requires use of the <b>GetChanges</b> method for the <b>UpdateDriver</b> method to make a change. The following code snippet shows how to use <paramref name="dsDriver" />.</para>
          <code>DriverWebSvc.Driver driverWS = new DriverWebSvc.Driver();
driverWS.Url = "http://&lt;span class="placeholder"&gt;ServerName&lt;/span&gt;/&lt;span class="placeholder"&gt;ProjectServerName&lt;/span&gt;/_vti_bin/PSI/Driver.asmx";
driverWS.Credentials = CredentialCache.DefaultCredentials;

// Get the list of drivers.
DriverWebSvc.DriverDataSet ds = driverWS.ReadDriverList();

ds.Tables[ds.Driver.TableName].Rows[0][ds.Driver.DRIVER_NAMEColumn] = "NewDriverName";

driverWS.UpdateDriver((DriverWebSvc.DriverDataSet)ds.&lt;span class="label"&gt;GetChanges&lt;/span&gt;());

// Verify the name change.
ds = driverWS.ReadDriverList();</code>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageDrivers" />
              </term>
              <description>Allows a user to create drivers for project portfolio analyses. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePrioritization">
      <MemberSignature Language="C#" Value="public WebSvcDriver.DriverPrioritizationDataSet UpdatePrioritization (WebSvcDriver.DriverPrioritizationDataSet driverPrioritizationDataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcDriver.DriverPrioritizationDataSet UpdatePrioritization(class WebSvcDriver.DriverPrioritizationDataSet driverPrioritizationDataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcDriver.Driver.UpdatePrioritization(WebSvcDriver.DriverPrioritizationDataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcDriver::DriverPrioritizationDataSet ^ UpdatePrioritization(WebSvcDriver::DriverPrioritizationDataSet ^ driverPrioritizationDataSet);" />
      <MemberSignature Language="F#" Value="member this.UpdatePrioritization : WebSvcDriver.DriverPrioritizationDataSet -&gt; WebSvcDriver.DriverPrioritizationDataSet" Usage="driver.UpdatePrioritization driverPrioritizationDataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Driver/UpdatePrioritization", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Driver/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcDriver.DriverPrioritizationDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="driverPrioritizationDataSet" Type="WebSvcDriver.DriverPrioritizationDataSet" />
      </Parameters>
      <Docs>
        <param name="driverPrioritizationDataSet">Contains prioritization data that includes updated information.</param>
        <summary>Updates the priorities that are associated with a specific business strategy driver.</summary>
        <returns>Contains the updated prioritization data.</returns>
        <remarks>
          <para>
            <b>Caution</b>: If you create a manual prioritization, you should not use the <b>UpdatePrioritization</b> method to add a driver-to-driver prioritization. In Project Web App, if the prioritization is manual, you are prevented from navigating to the Compare Drivers page (http://ServerName/ProjectServerName/_layouts/PWA/PortfolioStrategy/CompareDrivers.aspx). Although Project Server can perform the update through the PSI, programmatically adding a driver-to-driver prioritization interferes with the manual prioritization.That is, if the <see cref="P:WebSvcDriver.DriverPrioritizationDataSet.PrioritizationRow.PRIORITIZATION_IS_MANUAL" /> property is <b>True</b>, do not add a <see cref="T:WebSvcDriver.DriverPrioritizationDataSet.DriverRelationsRow" /> in the <paramref name="driverPrioritizationDataSet" /> parameter.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManagePrioritizations" />
              </term>
              <description>Allows a user to create or edit prioritizations for project portfolio analyses. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The example uses the <b>SvcDriver</b> namespace in the ProjectServerServices.dll proxy assembly. The <b>ConfigClientEndpoints</b> method uses an app.config file for setting the WCF binding, behavior, and endpoint. For information about creating a PSI proxy assembly and an app.config file, see Prerequisites for WCF-Based Code Samples.</para>
          <para>The <b>UpdatePrioritizationInfo</b> method adds a <b>PrioritizationEntriesRow</b> object and a <b>DriverRelationsRow</b> object to the <b>prioritizationDS</b> object. The driver-to-driver relations are set based on the hard-coded lookup table values. The method then calls the <b>UpdatePrioritization</b> method to update the prioritization and returns the <b>updatedPrioritizationDS</b> object. The application writes the XML contents to the PrioritizationInfo.xml. Following are the contents of the PrioritizationInfo.xml file.</para>
          <code>&amp;lt;DriverPrioritizationDataSet xmlns="http://schemas.microsoft.com/office/project/server/webservices/DriverPrioritizationDataSet/"&amp;gt;
  &amp;lt;Prioritization&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_NAME&amp;gt;&lt;/span&gt;Prioritization-d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_DESCRIPTION&amp;gt;&lt;/span&gt;Test pri
&amp;lt;/PRIORITIZATION_DESCRIPTION&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_IS_MANUAL&amp;gt;&lt;/span&gt;false
&amp;lt;/PRIORITIZATION_IS_MANUAL&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_IS_COMPLETE&amp;gt;&lt;/span&gt;true
&amp;lt;/PRIORITIZATION_IS_COMPLETE&amp;gt;
&lt;span class="label"&gt;&amp;lt;RELATIVE_IMPORTANCE_CF_UID&amp;gt;&lt;/span&gt;2cd29b66-4cca-4c3e-8421-1e54c6d06dca
&amp;lt;/RELATIVE_IMPORTANCE_CF_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;CONSISTENCY_RATIO&amp;gt;&lt;/span&gt;0.86625801935397173&amp;lt;/CONSISTENCY_RATIO&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_IS_USED_IN_ANALYSIS&amp;gt;&lt;/span&gt;false
&amp;lt;/PRIORITIZATION_IS_USED_IN_ANALYSIS&amp;gt;
&lt;span class="label"&gt;&amp;lt;CREATED_DATE&amp;gt;&lt;/span&gt;2010-03-09T12:38:52.023-08:00&amp;lt;/CREATED_DATE&amp;gt;
&lt;span class="label"&gt;&amp;lt;MOD_DATE&amp;gt;&lt;/span&gt;2010-03-09T12:38:52.49-08:00&amp;lt;/MOD_DATE&amp;gt;
&lt;span class="label"&gt;&amp;lt;LAST_UPDATED_BY_RES_UID&amp;gt;&lt;/span&gt;2a4ba1a7-1d96-4086-8fa5-6dea243ed6b5
&amp;lt;/LAST_UPDATED_BY_RES_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LAST_UPDATED_BY_RES_NAME&amp;gt;&lt;/span&gt;Shana Ramamoorthy
&amp;lt;/LAST_UPDATED_BY_RES_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;CREATED_BY_RES_UID&amp;gt;&lt;/span&gt;2a4ba1a7-1d96-4086-8fa5-6dea243ed6b5
&amp;lt;/CREATED_BY_RES_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;CREATED_BY_RES_NAME&amp;gt;&lt;/span&gt;Shana Ramamoorthy&amp;lt;/CREATED_BY_RES_NAME&amp;gt;
&amp;lt;/Prioritization&amp;gt;
&amp;lt;PrioritizationEntries&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_NAME&amp;gt;&lt;/span&gt;Driver-e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_PRIORITY&amp;gt;&lt;/span&gt;0.58367346938775511
&amp;lt;/DRIVER_PRIORITY&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_DESCRIPTION&amp;gt;&lt;/span&gt;testDriver-e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER_DESCRIPTION&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_IS_ACTIVE&amp;gt;&lt;/span&gt;true&amp;lt;/DRIVER_IS_ACTIVE&amp;gt;
&amp;lt;/PrioritizationEntries&amp;gt;
&amp;lt;PrioritizationEntries&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_NAME&amp;gt;&lt;/span&gt;Driver-ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_PRIORITY&amp;gt;&lt;/span&gt;0.28108843537414968&amp;lt;/DRIVER_PRIORITY&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_DESCRIPTION&amp;gt;&lt;/span&gt;testDriver-ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER_DESCRIPTION&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_IS_ACTIVE&amp;gt;&lt;/span&gt;true&amp;lt;/DRIVER_IS_ACTIVE&amp;gt;
&amp;lt;/PrioritizationEntries&amp;gt;
&amp;lt;PrioritizationEntries&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_UID&amp;gt;&lt;/span&gt;d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_NAME&amp;gt;&lt;/span&gt;Driver-d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER_NAME&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_PRIORITY&amp;gt;&lt;/span&gt;0.13523809523809521&amp;lt;/DRIVER_PRIORITY&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_DESCRIPTION&amp;gt;&lt;/span&gt;testDriver-d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER_DESCRIPTION&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER_IS_ACTIVE&amp;gt;&lt;/span&gt;true&amp;lt;/DRIVER_IS_ACTIVE&amp;gt;
&amp;lt;/PrioritizationEntries&amp;gt;
&amp;lt;DriverRelations&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER1_UID&amp;gt;&lt;/span&gt;e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER1_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER2_UID&amp;gt;&lt;/span&gt;ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER2_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;3e0d4fff-52a6-4235-9b2d-8fb26d74a139
&amp;lt;/LT_STRUCT_UID&amp;gt;
&amp;lt;/DriverRelations&amp;gt;
&amp;lt;DriverRelations&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER1_UID&amp;gt;&lt;/span&gt;e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER1_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER2_UID&amp;gt;&lt;/span&gt;d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER2_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;3e0d4fff-52a6-4235-9b2d-8fb26d74a139
&amp;lt;/LT_STRUCT_UID&amp;gt;
&amp;lt;/DriverRelations&amp;gt;
&amp;lt;DriverRelations&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER1_UID&amp;gt;&lt;/span&gt;ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER1_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER2_UID&amp;gt;&lt;/span&gt;e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER2_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;9cecf611-8f36-4ca2-89e4-640537848513
&amp;lt;/LT_STRUCT_UID&amp;gt;
&amp;lt;/DriverRelations&amp;gt;
&amp;lt;DriverRelations&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER1_UID&amp;gt;&lt;/span&gt;ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER1_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER2_UID&amp;gt;&lt;/span&gt;d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER2_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;3e0d4fff-52a6-4235-9b2d-8fb26d74a139
&amp;lt;/LT_STRUCT_UID&amp;gt;
&amp;lt;/DriverRelations&amp;gt;
&amp;lt;DriverRelations&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER1_UID&amp;gt;&lt;/span&gt;d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER1_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER2_UID&amp;gt;&lt;/span&gt;e0be5f7d-8c04-4875-be84-04124a6b1206
&amp;lt;/DRIVER2_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;9cecf611-8f36-4ca2-89e4-640537848513
&amp;lt;/LT_STRUCT_UID&amp;gt;
&amp;lt;/DriverRelations&amp;gt;
&amp;lt;DriverRelations&amp;gt;
&lt;span class="label"&gt;&amp;lt;PRIORITIZATION_UID&amp;gt;&lt;/span&gt;d8d908ce-6400-458f-9edd-554209d4efcf
&amp;lt;/PRIORITIZATION_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER1_UID&amp;gt;&lt;/span&gt;d143b447-4cc3-4f9e-a532-91afdb1db1bd
&amp;lt;/DRIVER1_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;DRIVER2_UID&amp;gt;&lt;/span&gt;ff0ba75b-a410-4620-bbfe-375a1b1fb6f3
&amp;lt;/DRIVER2_UID&amp;gt;
&lt;span class="label"&gt;&amp;lt;LT_STRUCT_UID&amp;gt;&lt;/span&gt;9cecf611-8f36-4ca2-89e4-640537848513
&amp;lt;/LT_STRUCT_UID&amp;gt;
&amp;lt;/DriverRelations&amp;gt;
&amp;lt;/DriverPrioritizationDataSet&amp;gt;</code>
          <para>Following is the complete sample code.</para>
          <code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.ServiceModel;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.Drivers
{
    class Driver
    {
        private static SvcDriver.DriverClient driverClient;
        private const string DRIVER_ENDPOINT = "basicHttp_Driver";
        private const string OUTPUT_FILES = @"C:\Projects\Samples\Output\";
        private static string outFilePathDriverImpactStmt;
        private static string outFilePathDriverList;
        private static string outFilePathPrioritizationInfo;
        private static string outFilePathPrioritizationRow;
        private static string OutFilePathDrivers;
        private Dictionary&amp;lt;Guid, SortedList&amp;lt;int, SortedList&amp;lt;Guid, object&amp;gt;&amp;gt;&amp;gt; 
            lookupTableValues = 
            new Dictionary&amp;lt;Guid, SortedList&amp;lt;int, SortedList&amp;lt;Guid, object&amp;gt;&amp;gt;&amp;gt;();

        static void Main(string[] args)
        {
            // Configure the endpoints.
            ConfigClientEndpoints(DRIVER_ENDPOINT);

            // If output directory does not exist, create it.
            if (!Directory.Exists(OUTPUT_FILES))
            {
                Directory.CreateDirectory(OUTPUT_FILES);
            }

            outFilePathDriverImpactStmt = OUTPUT_FILES 
                + "DriverImpactStatements.xml";
            outFilePathDriverList = OUTPUT_FILES 
                + "DriverList.xml";
            outFilePathPrioritizationInfo = OUTPUT_FILES 
                + "PrioritizationInfo.xml";
            outFilePathPrioritizationRow = OUTPUT_FILES 
                + "CreatePrioritization.xml";
            OutFilePathDrivers = OUTPUT_FILES + "Drivers.xml";

            // Create the Driver dataset.
            SvcDriver.DriverDataSet driverInfoDS = 
                new SvcDriver.DriverDataSet(); ;

            // Create the drivers.
            driverInfoDS = CreateDrivers();
            driverInfoDS.WriteXml(OutFilePathDrivers);

            // Get the first driver and update its impact statements.
            Guid DRV_UID = 
                new Guid(driverInfoDS.Driver.Rows[0][0].ToString());

            // Update driver impact statements.
            UpdateImpactStatement(DRV_UID);

            // Read the list of drivers.
            SvcDriver.DriverDataSet driverListDS = 
                driverClient.ReadDriverList();
            driverListDS.WriteXml(outFilePathDriverList);
            Console.WriteLine("\nSee XML output of the Updated DataSet at {0}",
            outFilePathDriverList);

            // Create prioritization.
            PrioritizationInfo priInfo = CreateNewPrioritization();
            
            // Create a guids list and add the prioritization GUID to it.
            List&amp;lt;Guid&amp;gt; guids = new List&amp;lt;Guid&amp;gt;();
            guids.Add(priInfo.UniqueId);

            // Read prioritization.
            SvcDriver.DriverPrioritizationDataSet prioritizationDS = 
                driverClient.ReadPrioritization(priInfo.UniqueId);

            // Look-up-table values for comparison (hard-coded here).
            // Change for your installation.
            Guid[] lookUpTableValues = new Guid[2];
            
            // The lookup table value is greater.
            lookUpTableValues[0] = new Guid("3E0D4FFF-52A6-4235-9B2D-8FB26D74A139");
            // The lookup table value is less.
            lookUpTableValues[1] = 
                new Guid("9CECF611-8F36-4CA2-89E4-640537848513");

            // Add drivers to prioritization.
            prioritizationDS = UpdatePrioritizationInfo(
                driverInfoDS, priInfo, prioritizationDS, lookUpTableValues);

            // Read updated prioritization information.
            SvcDriver.DriverPrioritizationDataSet updatedPrioritizationDS = 
                driverClient.ReadPrioritization(priInfo.UniqueId);
            updatedPrioritizationDS.WriteXml(outFilePathPrioritizationInfo);
            Console.WriteLine(
                "\nSee XML output of the Updated Prioritization at {0}",
                outFilePathPrioritizationInfo);

            // Delete prioritization.
            driverClient.DeletePrioritizations(guids.ToArray());
            Console.WriteLine(" Prioritization {0} deleted", priInfo.UniqueId);
            guids.Clear();

            // Delete drivers.
            foreach (SvcDriver.DriverDataSet.DriverRow drvRow in
                driverInfoDS.Driver.Rows)
            {
                guids.Add(drvRow.DRIVER_UID);
            }
            driverClient.DeleteDrivers(guids.ToArray());
            Console.WriteLine("Deleted drivers");
            Console.ReadKey();
        }

        // Update a prioritization.
        private static SvcDriver.DriverPrioritizationDataSet
            UpdatePrioritizationInfo(
            SvcDriver.DriverDataSet driverInfoDS,
            PrioritizationInfo priInfo,
            SvcDriver.DriverPrioritizationDataSet prioritizationDS,
            Guid[] lookUpTableValues)
        {
            // Add a prioritization row.
            foreach (SvcDriver.DriverDataSet.DriverRow dRow in
                driverInfoDS.Driver.Rows)
            {
                SvcDriver.DriverPrioritizationDataSet.PrioritizationEntriesDataTable
                    prioEntries = prioritizationDS.PrioritizationEntries;
                SvcDriver.DriverPrioritizationDataSet.PrioritizationEntriesRow
                    prioritizationEntriesRow =
                    prioEntries.NewPrioritizationEntriesRow();
                prioritizationEntriesRow.PRIORITIZATION_UID =
                    priInfo.UniqueId;
                prioritizationEntriesRow.DRIVER_UID = dRow.DRIVER_UID;
                prioritizationEntriesRow.DRIVER_DESCRIPTION =
                    dRow.DRIVER_DESCRIPTION;
                prioEntries.AddPrioritizationEntriesRow(
                    prioritizationEntriesRow);
            }

            // Add driver-to-driver relations.
            for (int i = 0; i &amp;lt; driverInfoDS.Driver.Rows.Count - 1; i++)
            {
                for (int j = i + 1; j &amp;lt; driverInfoDS.Driver.Rows.Count; j++)
                {
                    SvcDriver.DriverPrioritizationDataSet.DriverRelationsRow
                        driverRelationsRow =
                        prioritizationDS.DriverRelations.NewDriverRelationsRow();
                    driverRelationsRow.PRIORITIZATION_UID = priInfo.UniqueId;
                    driverRelationsRow.DRIVER1_UID =
                        new Guid(driverInfoDS.Driver.Rows[i][0].ToString());
                    driverRelationsRow.DRIVER2_UID =
                        new Guid(driverInfoDS.Driver.Rows[j][0].ToString());
                    driverRelationsRow.LT_STRUCT_UID = lookUpTableValues[i];

                    prioritizationDS.DriverRelations.AddDriverRelationsRow(
                        driverRelationsRow);

                    // Also save the complement values.
                    Guid complementCodeValue =
                        PSLibrary.LookupTables.GetRelativeImportanceComplement(
                        lookUpTableValues[i]);
                    if (complementCodeValue != Guid.Empty)
                    {
                        driverRelationsRow =
                            prioritizationDS.DriverRelations.NewDriverRelationsRow();
                        driverRelationsRow.PRIORITIZATION_UID = priInfo.UniqueId;
                        driverRelationsRow.DRIVER1_UID =
                            new Guid(driverInfoDS.Driver.Rows[j][0].ToString());
                        driverRelationsRow.DRIVER2_UID =
                            new Guid(driverInfoDS.Driver.Rows[i][0].ToString());
                        driverRelationsRow.LT_STRUCT_UID = complementCodeValue;
                        prioritizationDS.DriverRelations.AddDriverRelationsRow(
                            driverRelationsRow);
                    }
                }
            }

            try
            {
                Console.WriteLine("Updating the DataSet....");
                prioritizationDS =
                    driverClient.UpdatePrioritization(prioritizationDS);
                Console.WriteLine(" DataSet updated successfully!");
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return prioritizationDS;
        }
        
        // Create a new prioritization.
        private static PrioritizationInfo CreateNewPrioritization()
        {
                SvcDriver.DriverPrioritizationDataSet driverPrioritizationDS =
                    new SvcDriver.DriverPrioritizationDataSet();
                PrioritizationInfo priInfo = new PrioritizationInfo();
                priInfo.UniqueId = Guid.NewGuid();
                priInfo.Name = "Prioritization-" + priInfo.UniqueId;
                priInfo.Description = "Test pri";
            try
            {
                SvcDriver.DriverPrioritizationDataSet.PrioritizationRow 
                    prioritizationRow =
                    driverPrioritizationDS.Prioritization.NewPrioritizationRow();
                prioritizationRow.PRIORITIZATION_UID = priInfo.UniqueId;
                prioritizationRow.PRIORITIZATION_NAME = priInfo.Name;
                prioritizationRow.PRIORITIZATION_DESCRIPTION = 
                    priInfo.Description;
                prioritizationRow.RELATIVE_IMPORTANCE_CF_UID = 
                    PSLibrary.CustomField.RELATIVE_IMPORTANCE_MD_PROP_UID;
                prioritizationRow.PRIORITIZATION_IS_MANUAL = false;

                driverPrioritizationDS.Prioritization.AddPrioritizationRow(
                    prioritizationRow);
                Console.WriteLine("Prioritization: Adding driver prioritization"
                    + priInfo.Name);
                driverClient.CreatePrioritization(driverPrioritizationDS);
                Console.WriteLine("Prioritization: Creation done");
                driverPrioritizationDS.WriteXml(outFilePathPrioritizationRow);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return priInfo;
        }

        // Configure the custom field client endpoints.
        public static void ConfigClientEndpoints(string endpt)
        {
            driverClient = new SvcDriver.DriverClient(endpt);
        }

        // Create drivers with impact statements.
        private static SvcDriver.DriverDataSet CreateDrivers()
        {
            DriverInfo drvInfo = new DriverInfo();
            SvcDriver.DriverDataSet updatedDriverDS = 
                new SvcDriver.DriverDataSet();
            try
            {
                // Creates three drivers and the impact statements for each.
                for (int i = 0; i &amp;lt; 3; i++)
                {
                    SvcDriver.DriverDataSet drvDS =
                        new SvcDriver.DriverDataSet();
                    drvInfo.UniqueId = Guid.NewGuid();
                    drvInfo.Name = "Driver-" + drvInfo.UniqueId;
                    drvInfo.Description = "test" + drvInfo.Name;
                    drvInfo.StatementNone = "PROJECT_IMPACT_NONE_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementLow = "PROJECT_IMPACT_LOW_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementModerate = "PROJECT_IMPACT_MODERATE_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementStrong = "PROJECT_IMPACT_STRONG_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;
                    drvInfo.StatementExtreme = "PROJECT_IMPACT_EXTREME_VALUE_TXT"
                        + "-" + drvInfo.UniqueId;

                    SvcDriver.DriverDataSet.DriverRow drvRow = 
                        drvDS.Driver.NewDriverRow();
                    drvRow.DRIVER_UID = drvInfo.UniqueId;
                    drvRow.DRIVER_NAME = drvInfo.Name;
                    drvRow.DRIVER_DESCRIPTION = drvInfo.Description;
                    drvDS.Driver.AddDriverRow(drvRow);

                    SvcDriver.DriverDataSet.DriverImpactStatementsDataTable
                    drvImpStmts = drvDS.DriverImpactStatements;

                    SvcDriver.DriverDataSet.DriverImpactStatementsRow 
                        stmtRow = drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_NONE_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementNone;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_LOW_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementLow;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_MODERATE_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementModerate;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_STRONG_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementStrong;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    stmtRow =
                        drvImpStmts.NewDriverImpactStatementsRow();
                    stmtRow.DRIVER_UID = drvInfo.UniqueId;
                    stmtRow.PROJECT_IMPACT_CF_UID = 
                        PSLibrary.CustomField.PROJECT_IMPACT_MD_PROP_UID;
                    stmtRow.LT_STRUCT_UID = 
                        PSLibrary.LookupTables.PROJECT_IMPACT_EXTREME_LT_STRUCT_UID;
                    stmtRow.DESCRIPTION = drvInfo.StatementExtreme;
                    drvImpStmts.AddDriverImpactStatementsRow(stmtRow);

                    Console.WriteLine("Adding driver " + drvInfo.Name);
                    driverClient.CreateDriver(
                        (SvcDriver.DriverDataSet)drvDS);
                    Console.WriteLine("Drivers {0} created successfully!", i);
                    updatedDriverDS.Merge(drvDS);
                }
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            return updatedDriverDS;
        }

        // Update the driver impact statements.
        private static void UpdateImpactStatement(Guid DriverGuid)
        {
            try
            {
                Guid LT_UID = 
                    new Guid("779271C4-894D-4385-9E33-1251A9E80541");
                Guid IMPACT_UID = 
                    new Guid("1728D080-BA74-4D86-A29A-27E4318001C4");
                SvcDriver.DriverDataSet drvInfoDS = 
                    driverClient.ReadDriver(DriverGuid);
                SvcDriver.DriverDataSet.DriverImpactStatementsRow impactRow;
                SvcDriver.DriverDataSet.DriverImpactStatementsDataTable 
                    drvImpactStmts = drvInfoDS.DriverImpactStatements;
                impactRow = 
                  drvImpactStmts.FindByDRIVER_UIDPROJECT_IMPACT_CF_UIDLT_STRUCT_UID(
                  DriverGuid, IMPACT_UID, LT_UID);
                impactRow.DESCRIPTION = "new desc";
                driverClient.UpdateDriver(drvInfoDS);
                drvInfoDS.DriverImpactStatements.WriteXml(
                    outFilePathDriverImpactStmt);
                Console.WriteLine(
                    "\nSee XML output of the Updated DataSet at {0}",
                outFilePathDriverImpactStmt);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
        }
    }

    // This class contains the driver information.
    public class DriverInfo
    {
        private Guid driverGuid = new Guid();

        public Guid UniqueId
        {
            get { return this.driverGuid; }
            set { this.driverGuid = value; }
        }

        private string driverName = string.Empty;

        public string Name
        {
            get { return this.driverName; }
            set { this.driverName = value; }
        }

        private string driverDescription = string.Empty;

        public string Description
        {
            get { return this.driverDescription; }
            set { this.driverDescription = value; }
        }

        public static int DriverType
        {
            get { return (int)PSLibrary.Optimizer.OptimizerEntities.Driver; }
        }

        private string statementNone = string.Empty;

        public string StatementNone
        {
            get { return this.statementNone; }
            set { this.statementNone = value; }
        }

        private string statementLow = string.Empty;

        public string StatementLow
        {
            get { return this.statementLow; }
            set { this.statementLow = value; }
        }

        private string statementModerate = string.Empty;

        public string StatementModerate
        {
            get { return this.statementModerate; }
            set { this.statementModerate = value; }
        }

        private string statementStrong = string.Empty;

        public string StatementStrong
        {
            get { return this.statementStrong; }
            set { this.statementStrong = value; }
        }

        private string statementExtreme = string.Empty;

        public string StatementExtreme
        {
            get { return this.statementExtreme; }
            set { this.statementExtreme = value; }
        }
    }

    // This class contains the prioritization information.
    class PrioritizationInfo
    {
        private Guid prioritizationGuid = Guid.NewGuid();

        public Guid UniqueId
        {
            get { return this.prioritizationGuid; }
            set { this.prioritizationGuid = value; }
        }
        private string prioritizationName = string.Empty;

        public string Name
        {
            get { return this.prioritizationName; }
            set { this.prioritizationName = value; }
        }

        private string prioritizationDescription = string.Empty;

        public string Description
        {
            get { return this.prioritizationDescription; }
            set { this.prioritizationDescription = value; }
        }
    }
}

</code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>