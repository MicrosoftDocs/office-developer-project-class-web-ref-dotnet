<Type Name="Project" FullName="WebSvcProject.Project">
  <TypeSignature Language="C#" Value="public class Project : System.Web.Services.Protocols.SoapHttpClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Project extends System.Web.Services.Protocols.SoapHttpClientProtocol" />
  <TypeSignature Language="DocId" Value="T:WebSvcProject.Project" />
  <TypeSignature Language="VB.NET" Value="Public Class Project&#xA;Inherits SoapHttpClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class Project : System::Web::Services::Protocols::SoapHttpClientProtocol" />
  <TypeSignature Language="F#" Value="type Project = class&#xA;    inherit SoapHttpClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>ProjectServerServices</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.SoapHttpClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Web.Services.WebServiceBinding(Name="ProjectSoap", Namespace="http://schemas.microsoft.com/office/project/server/webservices/Project/")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Deprecated. Includes methods for managing projects and entities in projects such as tasks, resources, and assignments. <b>Project</b> class methods also manage deliverables, project proposals, and project or master project relationships.</summary>
    <remarks>
      <para>The Project class in the PSI is deprecated. For all new development, use the <a href="https://msdn.microsoft.com/library/office/microsoft.projectserver.client_di_pj14mref.aspx">Project CSOM</a></para>
      <para>The <b>Project</b> class manages all the projects on a given server, rather than providing an interface into only one project.</para>
      <para>The application must log on to the server by using network credentials (<see cref="T:WebSvcLoginWindows.LoginWindows" />) or Forms Authentication (<see cref="T:WebSvcLoginForms.LoginForms" />) before using methods in this class.</para>
      <para />
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Project ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Project();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a <b>Project</b> object from the ASMX-based Project web service.</summary>
        <remarks>
          <para>To create an object that is equivalent to <b>Project</b> by using the Windows Communication Foundation (WCF) API, use one of the <b>ProjectClient</b> constructors.</para>
          <para />
        </remarks>
        <example>
          <para>In the following statement, <b>WebSvcProject</b> is an arbitrary namespace for the ASMX-based Project web service.</para>
          <code>private static WebSvcProject.Project project = new WebSvcProject.Project();</code>
          <para>In the following statement, <b>WebSvcProject</b> is an arbitrary namespace for the WCF-based Project web service. The <paramref name="endpt" /> parameter is a <b>String</b> value that specifies the name of the client endpoint address in the app.config file (or in the web.config file for web applications).</para>
          <code>private static WebSvcProject.ProjectClient projectClient = new WebSvcProject.ProjectClient(endpt);</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CheckOutProject">
      <MemberSignature Language="C#" Value="public void CheckOutProject (Guid projectUid, Guid sessionUid, string sessionDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CheckOutProject(valuetype System.Guid projectUid, valuetype System.Guid sessionUid, string sessionDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.CheckOutProject(System.Guid,System.Guid,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CheckOutProject (projectUid As Guid, sessionUid As Guid, sessionDescription As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CheckOutProject(Guid projectUid, Guid sessionUid, System::String ^ sessionDescription);" />
      <MemberSignature Language="F#" Value="member this.CheckOutProject : Guid * Guid * string -&gt; unit" Usage="project.CheckOutProject (projectUid, sessionUid, sessionDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/CheckOutProject", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectUid" Type="System.Guid" />
        <Parameter Name="sessionUid" Type="System.Guid" />
        <Parameter Name="sessionDescription" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="projectUid">The GUID of the project.</param>
        <param name="sessionUid">The GUID of the session in which the queue job is submitted.</param>
        <param name="sessionDescription">Optional. The description of the session.</param>
        <summary>Checks out a specified project.</summary>
        <remarks>
          <para>
            <b>CheckOutProject</b> reserves (locks) the project for editing or deleting. If the project is unavailable for editing, an exception is raised. The lock is an application-level logical lock rather than a database lock. Projects must be locked before any changes can be made in either Project Professional or the Project Server APIs. When used along with the Project Server service application APIs, the check-out operation is logically equivalent to opening a project with read/write permission in Project Professional.</para>
          <para>The check-out operation is synchronous and is processed immediately. </para>
          <para>The logical lock on the project is associated with the <paramref name="sessionUid" /> and the user making the check-out call. Subsequent operations against the checked-out project are accepted only if the user is the same as the one who checked out the project and the call supplies the same <paramref name="sessionUid" />.</para>
          <para>The <paramref name="sessionDescription" /> parameter is an optional string that is stored as part of the project while it is checked out; the string specifies who has the project checked out. For Project Professional, <paramref name="sessionDescription" /> is the computer name to which the project was checked out. For service application calls, the user can supply whatever string makes sense; typically it is the name of the process that performed the check-out operation. (For example, "Timesheet updates", "Sync with SAP", and so on.)</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.SaveProject" />
              </term>
              <description>Allows a user to save the specified project. Category permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.EditProjectProperties" />
              </term>
              <description>Allows a user to edit the new project. Category permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.BuildTeamOnProject" />
              </term>
              <description>Allows  a user to assign resources from the resource pool to the new project. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>Applications typically call <b>CheckOutProject</b>, do some update or editing procedures, and then call <b>QueueCheckInProject</b>. The following example creates a sample project, checks out that project and renames it, and then checks it back in</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Threading;
using System.Web.Services.Protocols;
using PSLibrary = Microsoft.Office.Project.Server.Library;
[assembly: CLSCompliant(true)]
namespace Microsoft.SDK.Project.Samples.CheckOutProject
{
   class Program
   {
      [STAThread]
      static void Main(string[] args)
      {
         try
         {
            #region Setup
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";

            Guid jobId;
            Guid sessionId = Guid.NewGuid();
            const string SESSION_DESCRIPTION = "Check out sample utility";

            // Set up the web service objects.
            SvcProject.Project projectSvc = new SvcProject.Project();

            projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
            projectSvc.UseDefaultCredentials = true;

            SvcQueueSystem.QueueSystem q = new SvcQueueSystem.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;
 
            // Create a sample project.
            Console.WriteLine("Creating sample project");
            Guid projectId = CreateSampleProject(projectSvc, q);
            Console.WriteLine("Created Project UID: " + projectId.ToString());
            #endregion
            #region Check out, rename, and check in
            // Check out the project.
            // The session ID is used later to check in the project. 
            Console.WriteLine("Checking out sample project");
            projectSvc.CheckOutProject(projectId, sessionId, SESSION_DESCRIPTION);
           
            // Rename the project. 
            Console.WriteLine("Renaming the project");
            jobId = Guid.NewGuid();
            projectSvc.QueueRenameProject(jobId, sessionId, projectId, "My Renamed Project at " + DateTime.Now.ToShortTimeString().Replace(":", ""));
            WaitForQueue(q, jobId);

            // Check in the project. 
            Console.WriteLine("Checking in the project");
            jobId = Guid.NewGuid();
            projectSvc.QueueCheckInProject(jobId, projectId, false, sessionId, SESSION_DESCRIPTION);
            WaitForQueue(q, jobId);
            #endregion
         }
         #region Exception handling
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         #endregion
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }
      static private void WaitForQueue(SvcQueueSystem.QueueSystem q, Guid jobId)
      {
         SvcQueueSystem.JobState jobState;
         const int QUEUE_WAIT_TIME = 2; // two seconds
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         // Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Thread.Sleep(wait * 1000);
         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == SvcQueueSystem.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == SvcQueueSystem.JobState.Unknown
               || jobState == SvcQueueSystem.JobState.Failed
               || jobState == SvcQueueSystem.JobState.FailedNotBlocking
               || jobState == SvcQueueSystem.JobState.CorrelationBlocked
               || jobState == SvcQueueSystem.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request failed \"" + jobState + "\" Job ID: " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  Console.WriteLine("Job State: " + jobState + " Job ID: " + jobId);
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
      }
      static private Guid CreateSampleProject(SvcProject.Project projectSvc, SvcQueueSystem.QueueSystem q)
      {
         SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();
         Guid jobId;
         // Create the project.
         SvcProject.ProjectDataSet.ProjectRow projectRow = projectDs.Project.NewProjectRow();
         projectRow.PROJ_UID = Guid.NewGuid();
         projectRow.PROJ_NAME = "Its a wonderful project at " + 
            DateTime.Now.ToShortDateString().Replace("/", "") + " " + 
            DateTime.Now.ToShortTimeString().Replace(":", "");
         projectRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
         projectDs.Project.AddProjectRow(projectRow);

         // Add some tasks.
         SvcProject.ProjectDataSet.TaskRow taskOne = projectDs.Task.NewTaskRow();
         taskOne.PROJ_UID = projectRow.PROJ_UID;
         taskOne.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskOne.TASK_DUR_FMT =(int) PSLibrary.Task.DurationFormat.Day;
         taskOne.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskOne.TASK_NAME = "Task One";
         taskOne.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskOne);

         SvcProject.ProjectDataSet.TaskRow taskTwo = projectDs.Task.NewTaskRow();
         taskTwo.PROJ_UID = projectRow.PROJ_UID;
         taskTwo.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskTwo.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskTwo.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskTwo.TASK_NAME = "Task Two";
         taskTwo.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskTwo);

         // Save the project to the database.
         jobId = Guid.NewGuid();
         projectSvc.QueueCreateProject(jobId, projectDs, false);
         WaitForQueue(q, jobId);
         return projectRow.PROJ_UID;
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateOperationsWorkFromWssList">
      <MemberSignature Language="C#" Value="public Guid CreateOperationsWorkFromWssList (Guid sessionUid, string listDataXml, string priorityMappingsXml, string projectName, string projectDescription, string titleFieldName, string startDateFieldName, string finishDateFieldName, string taskPriorityFieldName, string percentCompleteFieldName, string resourceFieldName, bool includeWorkflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid CreateOperationsWorkFromWssList(valuetype System.Guid sessionUid, string listDataXml, string priorityMappingsXml, string projectName, string projectDescription, string titleFieldName, string startDateFieldName, string finishDateFieldName, string taskPriorityFieldName, string percentCompleteFieldName, string resourceFieldName, bool includeWorkflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.CreateOperationsWorkFromWssList(System.Guid,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateOperationsWorkFromWssList (sessionUid As Guid, listDataXml As String, priorityMappingsXml As String, projectName As String, projectDescription As String, titleFieldName As String, startDateFieldName As String, finishDateFieldName As String, taskPriorityFieldName As String, percentCompleteFieldName As String, resourceFieldName As String, includeWorkflow As Boolean) As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Guid CreateOperationsWorkFromWssList(Guid sessionUid, System::String ^ listDataXml, System::String ^ priorityMappingsXml, System::String ^ projectName, System::String ^ projectDescription, System::String ^ titleFieldName, System::String ^ startDateFieldName, System::String ^ finishDateFieldName, System::String ^ taskPriorityFieldName, System::String ^ percentCompleteFieldName, System::String ^ resourceFieldName, bool includeWorkflow);" />
      <MemberSignature Language="F#" Value="member this.CreateOperationsWorkFromWssList : Guid * string * string * string * string * string * string * string * string * string * string * bool -&gt; Guid" Usage="project.CreateOperationsWorkFromWssList (sessionUid, listDataXml, priorityMappingsXml, projectName, projectDescription, titleFieldName, startDateFieldName, finishDateFieldName, taskPriorityFieldName, percentCompleteFieldName, resourceFieldName, includeWorkflow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/CreateOperationsWorkFromWssList", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionUid" Type="System.Guid" />
        <Parameter Name="listDataXml" Type="System.String" />
        <Parameter Name="priorityMappingsXml" Type="System.String" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="projectDescription" Type="System.String" />
        <Parameter Name="titleFieldName" Type="System.String" />
        <Parameter Name="startDateFieldName" Type="System.String" />
        <Parameter Name="finishDateFieldName" Type="System.String" />
        <Parameter Name="taskPriorityFieldName" Type="System.String" />
        <Parameter Name="percentCompleteFieldName" Type="System.String" />
        <Parameter Name="resourceFieldName" Type="System.String" />
        <Parameter Name="includeWorkflow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sessionUid">The GUID of the session in which the queue job is submitted.</param>
        <param name="listDataXml">The list data XML from the SharePoint list.</param>
        <param name="priorityMappingsXml">An XML file that maps the SharePoint priority field to the Project Server value. For more information,sSee the Remarks section in this topic.</param>
        <param name="projectName">The name of the new project.</param>
        <param name="projectDescription">The description of the project.</param>
        <param name="titleFieldName">Specifies the name of the field that holds the title of the task.</param>
        <param name="startDateFieldName">Specifies the name of the field that holds the start date of the task.</param>
        <param name="finishDateFieldName">Specifies the name of the field that holds the finish date of the task.</param>
        <param name="taskPriorityFieldName">Specifies the name of the field that holds the priority of the task.</param>
        <param name="percentCompleteFieldName">Specifies the name of the field that holds the completion percentage of the task.</param>
        <param name="resourceFieldName">Specifies the name of the field that holds the resources for the task.</param>
        <param name="includeWorkflow">Specifies whether to include workflow.</param>
        <summary>Creates a project from a SharePoint task list, but does not maintain synchronization data.</summary>
        <returns>The GUID of the new project.</returns>
        <remarks>
          <para>To import a SharePoint task list and maintain field mappings for future synchronization, see <see cref="M:WebSvcProject.Project.CreateWssListSyncedProject(WebSvcProject.SyncDataSet,System.String)" />.</para>
          <para>Conflicts in user assignments can occur when importing a SharePoint task list. When an application such as Project Web App calls the SharePoint GetListItems method, the return value is XML data for the list items and assignments. The assignment data includes a SharePoint index (the <paramref name="ows_" /> prefix on field names) and a display name for SharePoint users, but does not show the user's domain or whether the user is a Windows user. </para>
          <para>
            <b>CreateOperationsWorkFromWssList</b> has no indication of where the list data came from. When you create a project from a SharePoint list, all interaction with the SharePoint server is done by the client. For information about the kinds of possible assignment conflicts, see "Limitations for Using SharePoint Data" in SharePoint Infrastructure for Project Server. </para>
          <para>
            <b>Note</b>: <b>CreateOperationsWorkFromWssList</b> returns a <see cref="F:Microsoft.Office.Project.Server.Library.PSErrorID.ProjectExceededLWPTaskLimit" /> error if more than 100 tasks are created. A list item produces a task for each assigned resource.</para>
          <para>A sample <b>priorityMappingsXML</b> parameter using the Project Server default values is as follows:</para>
          <para>&lt;PriorityMappings&gt;</para>
          <para>   &lt;Map fieldValue=\"(1) High\" mappedValue=\"600\"/&gt;</para>
          <para>   &lt;Map fieldValue=\"(2) Normal\" mappedValue=\"500\"/&gt;</para>
          <para>   &lt;Map fieldValue=\"(1) Low\" mappedValue=\"400\"/&gt;</para>
          <para>&lt;/PriorityMappings&gt;</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.NewProject" />
              </term>
              <description>Allows a user to create a project. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateProjectFromTemplate">
      <MemberSignature Language="C#" Value="public Guid CreateProjectFromTemplate (Guid templateUid, string projectName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid CreateProjectFromTemplate(valuetype System.Guid templateUid, string projectName) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.CreateProjectFromTemplate(System.Guid,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateProjectFromTemplate (templateUid As Guid, projectName As String) As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Guid CreateProjectFromTemplate(Guid templateUid, System::String ^ projectName);" />
      <MemberSignature Language="F#" Value="member this.CreateProjectFromTemplate : Guid * string -&gt; Guid" Usage="project.CreateProjectFromTemplate (templateUid, projectName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/CreateProjectFromTemplate", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templateUid" Type="System.Guid" />
        <Parameter Name="projectName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="templateUid">The GUID of the project template.</param>
        <param name="projectName">The name of the new project.</param>
        <summary>Creates a project from a specified template. The new project has the specified project name.</summary>
        <returns>The GUID of the created project.</returns>
        <remarks>
          <para>
            <b>CreateProjectFromTemplate</b> creates the new project in the Draft datatables. The current user must have both of the permissions specified in the Permissions table.</para>
          <para>The <b>CreateProjectFromTemplate</b> method does persist any formatting information in a project template, such as timescale or font format. You can set formatting information for a project with Project Professional; formatting is not available in the public PSI methods or datasets. <b>CreateProjectFromTemplate</b> gets a <b>ProjectDataSet</b> from the project template in the Draft database, creates a new <b>ProjectDataSet</b>, and changes the project summary task name to the requested project name. It then adds all of the <b>DataTable</b> rows to the new <b>ProjectDataSet</b>, except assignment dates, and then creates a new project with a different GUID.</para>
          <para>If the template includes tasks that have notes, the task notes do not show when you create a new project by using <b>CreateProjectFromTemplate</b> and then open the project in Microsoft Office Project Professional. You can use Project Professional to create a template that contains task notes, and publish the project template. The <b>MSP_TASKS</b> table in the Published database includes the <b>TASK_RTF_NOTES</b> column, which has data for the template. After you programmatically create and save a new project based on that template, the <b>TASK_RTF_NOTES</b> column contains text data for the task notes, not RTF (Rich Text Format) data.</para>
          <para>The problem is that <b>TASK_RTF_NOTES</b> is of data type <b>image</b> for RTF data. The PSI web services in the Project Server service application cannot handle RTF data. To add task notes in projects that are programmatically created on Project Server from a template, you must directly access the <b>MSP_TASKS</b> table to do the following:</para>
          <list type="bullet">
            <item>
              <description>Add the RTF data to the <b>TASK_RTF_NOTES</b> column for the specific task.</description>
            </item>
            <item>
              <description>Set the <b>TASKS_HAS_NOTES</b> column to <b>1 (true)</b>.</description>
            </item>
          </list>
          <para>
            <b>Note</b>: Currently no method is available to programmatically add the task notes in a template to a project created from that template. You cannot use the Project Server Interface (PSI) to create local custom fields in projects. However, the PSI does support editing local custom field values on tasks, resources, and assignments. View settings, such as added fields, are not copied into the new project from the template.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.NewProject" />
              </term>
              <description>Allows a user to create a new project. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.OpenProjectTemplate" />
              </term>
              <description>Allows a user to open project templates. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example creates a template, finds that template by name, and checks the project name for characters that are not valid. The example creates a project based on that template, and then publishes the project. It is necessary to create a template because Project Server does not have any default templates that are guaranteed to be in place. </para>
          <para>Typically, you would present a list of templates and their unique IDs, and use that to choose the desired template. In some cases, you might want to find a project or template by name. That is demonstrated here. You must have the exact name of the project to find it.</para>
          <para>For critical information about running this code sample, see Prerequisites for WCF-based code samples in Project 2013.</para>
          <code>using System;
using System.Text;
using System.Xml;
using System.ServiceModel;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace CreateProjectFromTemplate
{
    class Program
    {
        private const string ENDPOINT_PROJECT = "basicHttp_Project";
        private const string ENDPOINT_QUEUESYSTEM = "basicHttp_QueueSystem";
        private static SvcProject.ProjectClient projectClient;
        private static SvcQueueSystem.QueueSystemClient queueSystemClient;

        static void Main(string[] args)
        {
            try
            {
                ConfigClientEndpoints(ENDPOINT_PROJECT);
                ConfigClientEndpoints(ENDPOINT_QUEUESYSTEM);

                // Create a template to use. Normally, you would already have a template 
                // stored in PWA that you would use, but this example creates a template.

                Console.WriteLine("Creating template");
                SvcProject.ProjectDataSet templateDs = new SvcProject.ProjectDataSet();
                SvcProject.ProjectDataSet.ProjectRow templateRow = templateDs.Project.NewProjectRow();
                templateRow.PROJ_UID = Guid.NewGuid();
                templateRow.PROJ_NAME = "Its a wonderful template! "
                    + DateTime.Now.ToShortTimeString().Replace(":", "-");
                templateRow.WPROJ_DESCRIPTION = "Temporary template for use in CreateProjectFromTemplate example.";
                templateRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Template;

                if (IsNameValid(templateRow.PROJ_NAME))
                {
                    templateDs.Project.AddProjectRow(templateRow);
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("\nThe project name contains characters that are not valid:" 
                                      + "\n\t{0}", templateRow.PROJ_NAME);
                    QuitTheApp();
                }

                // Add two tasks to the template.
                int numTasks = 2;
                SvcProject.ProjectDataSet.TaskRow task = null;

                for (int i = 0; i &amp;lt; numTasks; i++)
                {
                    task = templateDs.Task.NewTaskRow();
                    task.PROJ_UID = templateRow.PROJ_UID;
                    task.TASK_UID = Guid.NewGuid();
                    task.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
                    task.TASK_DUR = 4800; // The task duration is 8 hours.
                    task.TASK_NAME = "T" + (i + 1).ToString() + " in template";
                    task.TASK_START_DATE = System.DateTime.Now.AddDays(i + 1);
                    templateDs.Task.AddTaskRow(task);
                }

                // Write the new template information to the database.
                Console.WriteLine("\n\nSaving template to database");
                Guid jobId = Guid.NewGuid();
                DateTime startTime = DateTime.Now;

                projectClient.QueueCreateProject(jobId, templateDs, false);

                // Wait for the Project Server Queuing System to create the project.
                if (Helpers.WaitForQueue(SvcQueueSystem.QueueMsgType.ProjectCreate,
                    queueSystemClient, startTime))
                {
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.WriteLine("\nTemplate created:\n\t{0}", templateRow.PROJ_NAME);
                    Console.ResetColor();
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("\nThe template was not created:\n\t{0}.\nThe queue wait time exceeded 30 seconds",
                        templateRow.PROJ_NAME);
                    Console.ResetColor();
                    QuitTheApp();
                }

                // Find the template by name.
                //    You could just use the GUID to create the project from a template, 
                //    but this example shows how to get the GUID from the template name.
                // Note: If you have a template on the enterprise server already, you can use
                // the ReadProjectStatus method to get a list of published templates.
                //    projectSvc.ReadProjectStatus(Guid.Empty, SvcProject.DataStoreEnum.PublishedStore, 
                //                                 String.Empty, (int) PSLibrary.Project.ProjectType.Template);
                Console.WriteLine("Finding the template by name");
                SvcProject.ProjectDataSet readTemplateDs = projectClient.ReadProjectStatus(Guid.Empty,
                    SvcProject.DataStoreEnum.WorkingStore, templateRow.PROJ_NAME,
                    (int)PSLibrary.Project.ProjectType.Template);

                // Name the project.
                string projectName = "Created from " + readTemplateDs.Project[0].PROJ_NAME
                    + " at " + DateTime.Now.ToShortTimeString().Replace(":", "-");

                // Create the new project on the server and get its GUID.
                Console.WriteLine("Create the new project from the template");
                Guid newProjectUid = projectClient.CreateProjectFromTemplate(readTemplateDs.Project[0].PROJ_UID,
                                                                             projectName);
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("Project created:\n\t{0}\n\t{1}", newProjectUid.ToString(), projectName);
                Console.ResetColor();

                // Publish the project, to make it visible in PWA.
                jobId = Guid.NewGuid();
                projectClient.QueuePublish(jobId, newProjectUid, true, string.Empty);
                startTime = DateTime.Now;

                if (Helpers.WaitForQueue(SvcQueueSystem.QueueMsgType.ProjectPublish,
                                         queueSystemClient, startTime))
                {
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.WriteLine("Project published");
                    Console.ResetColor();
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("\nThe project was not published.\nThe queue wait time exceeded 30 seconds");
                    Console.ResetColor();
                }

            }
            catch (FaultException fault)
            {
                // Use the WCF FaultException, because the ASMX SoapException does not 
                // exist in a WCF-based application.
                WriteFaultOutput(fault);
            }
            finally
            {
                QuitTheApp();
            }
        }

        // Check the project name for invalid characters.
        private static bool IsNameValid(string projName)
        {
            bool result = true;
            char[] badChars = PSLibrary.Project.InvalidCharacters();

            Console.WriteLine("Check project name for Project.InvalidCharacters:");
            Console.ForegroundColor = ConsoleColor.Yellow;
            foreach (char c in badChars)
            {
                Console.Write(c);
                Console.Write(" ");
            }
            Console.ResetColor();

            // The name is not valid if it is empty or contains leading or trailing white space.
            if (String.IsNullOrEmpty(projName) || String.Compare(projName, projName.Trim(), StringComparison.Ordinal) != 0)
            {
                return false;
            }

            // The name is also not valid if it contains one of the invalid characters.
            if (badChars != null)
            {
                if (projName.IndexOfAny(badChars) != -1)
                {
                    return false;
                }
            }
            return result;
        }

        // Extract a PSClientError object from the WCF FaultException object, and
        // then display the exception details and each error in the PSClientError stack.
        private static void WriteFaultOutput(FaultException fault)
        {
            string errAttributeName;
            string errAttribute;
            string errOut;
            string errMess = "".PadRight(30, '=') + "\r\n"
                + "Error details: " + "\r\n";

            PSLibrary.PSClientError error = Helpers.GetPSClientError(fault, out errOut);
            errMess += errOut;

            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            PSLibrary.PSErrorInfo thisError;

            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
                thisError = errors[i];
                errMess += "\r\n".PadRight(30, '=') + "\r\nPSClientError output:\r\n";
                errMess += thisError.ErrId.ToString() + "\n";

                for (int j = 0; j &amp;lt; thisError.ErrorAttributes.Length; j++)
                {
                    errAttributeName = thisError.ErrorAttributeNames()[j];
                    errAttribute = thisError.ErrorAttributes[j];
                    errMess += "\r\n\t" + errAttributeName
                        + ": " + errAttribute;
                }
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
            Console.ResetColor();
        }


        // Use the endpoints defined in app.config to configure the client.
        private static void ConfigClientEndpoints(string endpt)
        {
            if (endpt == ENDPOINT_PROJECT)
                projectClient = new SvcProject.ProjectClient(endpt);
            else if (endpt == ENDPOINT_QUEUESYSTEM)
                queueSystemClient = new SvcQueueSystem.QueueSystemClient(endpt);
        }

        // Quit the application.
        private static void QuitTheApp()
        {
            Console.ResetColor();
            Console.WriteLine("\nPress any key to exit...");
            Console.ReadKey(true);
            Environment.Exit(1);
        }
    }

    // Helper methods: WaitForQueue and GetPSClientError.
    class Helpers
    {
        // Wait for the queue jobs to complete.
        public static bool WaitForQueue(SvcQueueSystem.QueueMsgType jobType,
            SvcQueueSystem.QueueSystemClient queueSystemClient,
            DateTime startTime)
        {
            const int MAX_WAIT = 30;    // Maximum wait time, in seconds.
            int numJobs = 1;            // Number of jobs in the queue.
            bool completed = false;     // Queue job completed.
            SvcQueueSystem.QueueStatusDataSet queueStatusDs =
                new SvcQueueSystem.QueueStatusDataSet();

            int timeout = 0;            // Number of seconds waited.
            Console.Write("Waiting for job: {0} ", jobType.ToString());

            SvcQueueSystem.QueueMsgType[] messageTypes = { jobType };
            SvcQueueSystem.JobState[] jobStates = { SvcQueueSystem.JobState.Success };

            while (timeout &amp;lt; MAX_WAIT)
            {
                System.Threading.Thread.Sleep(1000);    // Sleep one second.

                queueStatusDs = queueSystemClient.ReadMyJobStatus(
                    messageTypes,
                    jobStates,
                    startTime,
                    DateTime.Now,
                    numJobs,
                    true,
                    SvcQueueSystem.SortColumn.QueuePosition,
                    SvcQueueSystem.SortOrder.LastOrder);

                timeout++;
                Console.Write(".");
            }
            Console.WriteLine();

            if (queueStatusDs.Status.Count == numJobs)
                completed = true;
            return completed;
        }

        /// &amp;lt;summary&amp;gt;
        /// Extract a PSClientError object from the ServiceModel.FaultException,
        /// for use in output of the GetPSClientError stack of errors.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="e"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name="errOut"&amp;gt;Shows that FaultException has more information 
        /// about the errors than PSClientError has. FaultException can also contain 
        /// other types of errors, such as failure to connect to the server.&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;PSClientError object, for enumerating errors.&amp;lt;/returns&amp;gt;
        public static PSLibrary.PSClientError GetPSClientError(FaultException e,
                                                               out string errOut)
        {
            const string PREFIX = "GetPSClientError() returns null: ";
            errOut = string.Empty;
            PSLibrary.PSClientError psClientError = null;

            if (e == null)
            {
                errOut = PREFIX + "Null parameter (FaultException e) passed in.";
                psClientError = null;
            }
            else
            {
                // Get a ServiceModel.MessageFault object.
                var messageFault = e.CreateMessageFault();

                if (messageFault.HasDetail)
                {
                    using (var xmlReader = messageFault.GetReaderAtDetailContents())
                    {
                        var xml = new XmlDocument();
                        xml.Load(xmlReader);

                        var serverExecutionFault = xml["ServerExecutionFault"];
                        if (serverExecutionFault != null)
                        {
                            var exceptionDetails = serverExecutionFault["ExceptionDetails"];
                            if (exceptionDetails != null)
                            {
                                try
                                {
                                    errOut = exceptionDetails.InnerXml + "\r\n";
                                    psClientError =
                                        new PSLibrary.PSClientError(exceptionDetails.InnerXml);
                                }
                                catch (InvalidOperationException ex)
                                {
                                    errOut = PREFIX + "Unable to convert fault exception info ";
                                    errOut += "a valid Project Server error message. Message: \n\t";
                                    errOut += ex.Message;
                                    psClientError = null;
                                }
                            }
                            else
                            {
                                errOut = PREFIX + "The FaultException e is a ServerExecutionFault, "
                                    + "but does not have ExceptionDetails.";
                            }
                        }
                        else
                        {
                            errOut = PREFIX + "The FaultException e is not a ServerExecutionFault.";
                        }
                    }
                }
                else // No detail in the MessageFault.
                {
                    errOut = PREFIX + "The FaultException e does not have any detail.";
                }
            }
            errOut += "\r\n" + e.ToString() + "\r\n";
            return psClientError;
        }
    }
}</code>
          <para>When you run the <b>CreateProjectFromTemplate</b> example, the console window shows the following output:</para>
          <code>Creating template
Check project name for Project.InvalidCharacters:
' # : ; &amp;lt; &amp;gt; / | ? \ . * " ~ % &amp;amp; { } +

Saving template to database
Waiting for job: ProjectCreate ..............................

Template created:
        Its a wonderful template! 3-50 PM
Finding the template by name
Create the new project from the template
Project created:
        b9d0272e-62db-e111-b1ce-00155d146f2c
        Created from Its a wonderful template! 3-50 PM at 3-50 PM
Waiting for job: ProjectPublish ..............................
Project published

Press any key to exit...</code>
          <para>To see the action of the <b>FaultException</b> handler, change the code that names the template and checks for invalid characters. The following code introduces the '+' character in the name, and comments out the call to the <b>IsNameValid</b> method:</para>
          <code>                templateRow.PROJ_NAME = "Its a wonderful template! "
                    + DateTime.Now.ToShortTimeString().Replace(":",&lt;span class="label"&gt;"+"&lt;/span&gt;);
                templateRow.WPROJ_DESCRIPTION = "Temporary template for use in CreateProjectFromTemplate example.";
                templateRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Template;

                &lt;span class="label"&gt;templateDs.Project.AddProjectRow(templateRow);&lt;/span&gt;
                //if (IsNameValid(templateRow.PROJ_NAME))
                //{
                //    templateDs.Project.AddProjectRow(templateRow);
                //}
                //else
                //{
                //    Console.ForegroundColor = ConsoleColor.Red;
                //    Console.WriteLine("\nThe project name contains characters that are not valid:" 
                //                      + "\n\t{0}", templateRow.PROJ_NAME);
                //    QuitTheApp();
                //}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateWssListSyncedProject">
      <MemberSignature Language="C#" Value="public Guid CreateWssListSyncedProject (WebSvcProject.SyncDataSet syncDataSet, string projectName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid CreateWssListSyncedProject(class WebSvcProject.SyncDataSet syncDataSet, string projectName) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.CreateWssListSyncedProject(WebSvcProject.SyncDataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Guid CreateWssListSyncedProject(WebSvcProject::SyncDataSet ^ syncDataSet, System::String ^ projectName);" />
      <MemberSignature Language="F#" Value="member this.CreateWssListSyncedProject : WebSvcProject.SyncDataSet * string -&gt; Guid" Usage="project.CreateWssListSyncedProject (syncDataSet, projectName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/CreateWssListSyncedProject", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncDataSet" Type="WebSvcProject.SyncDataSet" />
        <Parameter Name="projectName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="syncDataSet">The synchronization mapping data.</param>
        <param name="projectName">The name of the SharePoint task list, which becomes the synchronized project name.</param>
        <summary>Creates a project with the specified name of the SharePoint task list, and then populates the project with data that is mapped from the task list.</summary>
        <returns>The GUID of the project that is created.</returns>
        <remarks>
          <para>The new method in Project Server 2013. To use the <b>CreateWssListSyncedProject</b> method, you must programmatically create a <b>SyncDataSet</b>; you cannot use the <b>ReadProjectSyncSettings</b> method until after a project is synchronized.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>Non-standard</term>
              <description>You must have either the <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageWorkflow" /> global permission or the  <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ChangeWorkflow" /> global permission. If you have the <b>ChangeWorkflow</b> permission, you must also have both the <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.OpenProject" /> category permission and the  <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.SaveProject" /> category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The example uses the <b>SvcProject</b> namespace in the ProjectServerServices.dll proxy assembly. The <b>ConfigClientEndpoints</b> method and the <b>SetClientEndPoints</b> method use an app.config file for setting the WCF binding, behavior, and endpoint. For information about creating a PSI proxy assembly and an app.config file, see Prerequisites for WCF-Based Code Samples.</para>
          <para>
            <b>Note</b>: The following example is designed to demonstrate the use of the <b>CreateWssListSyncedProject</b>, <b>UpdateProjectSyncSettings</b>, and <b>SyncProjectWithWss</b> methods; it is not a full solution. The GUIDs are hardcoded for the necessary fields. To use the example, first create a SharePoint task list. In the code, change the <b>LIST_TITLE</b>, the <b>SHAREPOINT_LIST_SITE</b>, and other URL values where applicable, to match those in your test installation of Project Server 2013.</para>
          <para>The Lists web service provides methods for working with SharePoint lists and list items. To access this web service, set a reference to http://site/_vti_bin/Lists.asmx. </para>
          <para>The <b>Lists.GetListCollection</b> web method returns an XML document that includes the names and GUIDs of all lists in the SharePoint site. The sample uses the <b>XElement.Parse</b> method to change the XML document to an <b>XElement</b> object named <b>root</b>. The <b>GetListGuid</b> method then does a LINQ to XML query on the <b>root</b> object and returns the GUID of the list that corresponds to the list title.</para>
          <para>The <b>CreateSyncDataSet</b> method creates a <b>SyncDataSet</b> object named <b>syncDS</b>. The <b>CreateWssListSyncedProject</b> method uses the syncDS object to create a synchronized project. Following is the complete sample code:</para>
          <code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.IO;
using System.ServiceModel;
using System.Xml;
using System.Xml.Linq;
using PSLibrary = Microsoft.Office.Project.Server.Library;
using System.Data;
using System.Web.Services;
using WebSvcLists = Microsoft.SDK.Project.Samples.ReadArchivedProjectsList.WebSvcLists;

namespace Microsoft.SDK.Project.Samples.SyncProject
{
    class Program
    {
        // Change the URL of the SharePoint list site and the name of the task list.
        private const string SHAREPOINT_LIST_SITE = "http://jc2vm1";
        private const string LIST_TITLE = "Task List 102";

        private const string ENDPOINT_PROJECT = "basicHttp_Project";
        private const string OUTPUT_FILES = @"C:\Projects\Samples\Output\";
        private static string outFilePathSyncDataSet;
        private static string outFilePathUpdatedSyncDS;

        private static SvcProject.ProjectClient projectClient;
        private static WebSvcLists.Lists lists;
        
        // GUIDs of the default fields are the same in all 
        // SharePoint 2010 default task lists.
        private const string PRIORITY_LIST_FIELD_GUID =
            "a8eb573e-9e11-481a-a8c9-1104a54b2fbd";
        private const string DUEDATE_LIST_FIELD_GUID =
            "cd21b4c2-6841-4f9e-a23a-738a65f99889";
        private const string STARTDATE_LIST_FIELD_GUID =
            "64cd368d-2f95-4bfc-a1f9-8d4324ecb007";
        private const string BODY_LIST_FIELD_GUID =
            "7662cd2c-f069-4dba-9e35-082cf976e170";
        private const string ASSIGNEDTO_LIST_FIELD_GUID =
            "53101f38-dd2e-458c-b245-0c236cc13d1a";
        private const string PERCENTCOMPLETE_LIST_FIELD_GUID =
            "d2311440-1ed6-46ea-b46d-daa643dc3886";
        private const string TITLE_LIST_FIELD_GUID =
            "fa564e0f-0c70-4ab9-b863-0177e6ddd247";
        private const string PRIORITY_FIELD_GUID = 
            "a8eb573e-9e11-481a-a8c9-1104a54b2fbd";

        private static XElement root;  // Root of the list XML data.

        static void Main(string[] args)
        {
            lists = new WebSvcLists.Lists();
            lists.Url = "http://jc2vm1/_vti_bin/lists.asmx";
            lists.Credentials = CredentialCache.DefaultCredentials;

            // Get the XML data for the lists in the specified 
            // SharePoint lists collection.
            XmlNode listData = lists.GetListCollection();

            root = XElement.Parse(listData.OuterXml);

            string projectName = string.Empty;
            Guid listUid = GetListGuid(root, LIST_TITLE, out projectName);
            
            // If the output directory does not exist, create it.
            if(!Directory.Exists(OUTPUT_FILES))
            {
                Directory.CreateDirectory(OUTPUT_FILES);
            }

            // Assign the path where the output XML file will be saved.
            outFilePathSyncDataSet = OUTPUT_FILES + "SyncDataSet.xml";
            outFilePathUpdatedSyncDS = OUTPUT_FILES + "UpdatedSyncDataSet.xml";

            // Configure the endpoints.
            ConfigClientEndpoints(ENDPOINT_PROJECT);

            try
            {
                // Create Sync Dataset.
                SvcProject.SyncDataSet syncDS = CreateSyncDataSet(listUid);

                // Create the project.
                Guid CreatedProject_Guid = projectClient.CreateWssListSyncedProject(
                    syncDS, projectName);
                Guid[] syncEntityGuids = new Guid[1];
                syncEntityGuids[0] = listUid;

                // Read back the SyncDataSet, and write it to a file.
                SvcProject.SyncEntityUidType syncEntityUidType =
                    SvcProject.SyncEntityUidType.WssListUid;
                syncDS = projectClient.ReadProjectSyncSettings
                        (syncEntityGuids, syncEntityUidType, true);
                syncDS.WriteXml(outFilePathSyncDataSet);

                // Update project synchronization settings.
                syncDS.SyncValueTranslations.Rows[0]["SYNC_PROJECT_VALUE"] = "900";

                // No values are allowed in the SyncItemTaskMappings table, 
                // when updating the project synchronization settings.
                syncDS.SyncItemTaskMappings.Clear();
                syncDS.AcceptChanges();

                projectClient.UpdateProjectSyncSettings(syncDS);
                syncDS.WriteXml(outFilePathUpdatedSyncDS);

                // Synchronize the updated project.
                projectClient.SyncProjectWithWss(listUid, syncEntityUidType);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            Console.WriteLine("\n\nPress any key to exit.");
            Console.ReadKey(false);
        }

        static Guid GetListGuid(XElement listCollection, string listTitle, 
            out string projectName)
        {
            string listId = string.Empty;
            XNamespace xmlns = "http://schemas.microsoft.com/sharepoint/soap/";

            var query = from el in root.Elements(xmlns + "List")
                        where el.Attribute("Title").Value.Equals(listTitle)
                        select el;

            int numElem = query.Count&amp;lt;XElement&amp;gt;();
            Console.WriteLine("Number of elements in query: " + numElem.ToString());

            projectName = query.First&amp;lt;XElement&amp;gt;().Attribute("Title").Value;
            Console.WriteLine(projectName);

            listId = query.First&amp;lt;XElement&amp;gt;().Attribute("ID").Value;
            Guid listUid = new Guid(listId);
            Console.WriteLine("List ID = " + listUid.ToString());
            return listUid;
        }

        // Create the initial SyncDataSet, to use for synchronizing
        // a project the first time.
        static SvcProject.SyncDataSet CreateSyncDataSet(Guid listUid)
        {
            SvcProject.SyncDataSet syncDS = new SvcProject.SyncDataSet();

            string priority = PSLibrary.WSSSync.PriorityFieldName;
            string wssDuedate = "Due Date";
            string projectDueDate = PSLibrary.WSSSync.FinishDateFieldName;
            string wssAssignedTo = "Assigned To";
            string projectAssignedTo = PSLibrary.WSSSync.AssignedToFieldName;
            string wssStartDate = "Start Date";
            string projectStartDate = PSLibrary.WSSSync.StartDateFieldName;
            string wssPercentComplete = "% Complete";
            string projectPercentComplete = PSLibrary.WSSSync.PercentCompleteFieldName;
            string wssBody = "Body";
            string projectNotes = PSLibrary.WSSSync.PercentCompleteFieldName;
            string title = "Title";
            string priorityHigh = "(1) High";
            string priorityNormal = "(2) Normal";
            string priorityLow = "(3) Low";
            string priorityHighValue = "600";
            string priorityNormalValue = "500";
            string priorityLowValue = "400";

            // Project field GUIDs are the same for all projects.
            Guid PRIORITY_PROJECT_FIELD_GUID = PSLibrary.WSSSync.PriorityFieldUid;
            Guid FINISHDATE_PROJECT_FIELD_GUID = PSLibrary.WSSSync.FinishDateFieldUid;
            Guid ASSIGNEDTO_PROJECT_FIELD_GUID = PSLibrary.WSSSync.AssignedToFieldUid;
            Guid STARTDATE_PROJECT_FIELD_GUID = PSLibrary.WSSSync.StartDateFieldUid;
            Guid PERCENTCOMPLETE_PROJECT_FIELD_GUID = PSLibrary.WSSSync.PercentCompleteFieldUid;
            Guid NOTES_PROJECT_FIELD_GUID = PSLibrary.WSSSync.DescriptionFieldUid;
            Guid TITLE_PROJECT_FIELD_GUID = PSLibrary.WSSSync.TitleFieldUid;

            // Create a SyncProjectSettings row.
            SvcProject.SyncDataSet.SyncProjectSettingsRow synProjectSettingRow = 
                syncDS.SyncProjectSettings.NewSyncProjectSettingsRow();
            synProjectSettingRow.SYNC_WSS_LIST_UID = listUid;
            synProjectSettingRow.PROJ_UID = Guid.NewGuid();
            synProjectSettingRow.SYNC_WSS_SERVER_URL = SHAREPOINT_LIST_SITE;
            syncDS.SyncProjectSettings.AddSyncProjectSettingsRow(
                synProjectSettingRow);

            // Add SyncFieldMappingsRows.
            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow.SYNC_WSS_FIELD_UID = 
                new Guid(PRIORITY_LIST_FIELD_GUID);
            syncFieldMappingsRow.SYNC_WSS_FIELD_NAME = priority;
            syncFieldMappingsRow.SYNC_PROJECT_FIELD_UID = 
                PRIORITY_PROJECT_FIELD_GUID;
            syncFieldMappingsRow.SYNC_PROJECT_FIELD_NAME = priority;
            syncFieldMappingsRow.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow1 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow1.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow1.SYNC_WSS_FIELD_UID = 
                new Guid(DUEDATE_LIST_FIELD_GUID);
            syncFieldMappingsRow1.SYNC_WSS_FIELD_NAME = wssDuedate;
            syncFieldMappingsRow1.SYNC_PROJECT_FIELD_UID = 
                FINISHDATE_PROJECT_FIELD_GUID;
            syncFieldMappingsRow1.SYNC_PROJECT_FIELD_NAME = projectDueDate;
            syncFieldMappingsRow1.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow1);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow2 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow2.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow2.SYNC_WSS_FIELD_UID = 
                new Guid(ASSIGNEDTO_LIST_FIELD_GUID);
            syncFieldMappingsRow2.SYNC_WSS_FIELD_NAME = wssAssignedTo;
            syncFieldMappingsRow2.SYNC_PROJECT_FIELD_UID = 
                ASSIGNEDTO_PROJECT_FIELD_GUID;
            syncFieldMappingsRow2.SYNC_PROJECT_FIELD_NAME = projectAssignedTo;
            syncFieldMappingsRow2.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow2);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow3 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow3.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow3.SYNC_WSS_FIELD_UID = 
                new Guid(STARTDATE_LIST_FIELD_GUID);
            syncFieldMappingsRow3.SYNC_WSS_FIELD_NAME = wssStartDate;
            syncFieldMappingsRow3.SYNC_PROJECT_FIELD_UID = 
                STARTDATE_PROJECT_FIELD_GUID;
            syncFieldMappingsRow3.SYNC_PROJECT_FIELD_NAME = projectStartDate;
            syncFieldMappingsRow3.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow3);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow4 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow4.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow4.SYNC_WSS_FIELD_UID = 
               new Guid(PERCENTCOMPLETE_LIST_FIELD_GUID);
            syncFieldMappingsRow4.SYNC_WSS_FIELD_NAME = wssPercentComplete;
            syncFieldMappingsRow4.SYNC_PROJECT_FIELD_UID = 
                PERCENTCOMPLETE_PROJECT_FIELD_GUID;
            syncFieldMappingsRow4.SYNC_PROJECT_FIELD_NAME = 
                projectPercentComplete;
            syncFieldMappingsRow4.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow4);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow5 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow5.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow5.SYNC_WSS_FIELD_UID = 
                new Guid(BODY_LIST_FIELD_GUID);
            syncFieldMappingsRow5.SYNC_WSS_FIELD_NAME = wssBody;
            syncFieldMappingsRow5.SYNC_PROJECT_FIELD_UID = 
                NOTES_PROJECT_FIELD_GUID;
            syncFieldMappingsRow5.SYNC_PROJECT_FIELD_NAME = projectNotes;
            syncFieldMappingsRow5.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow5);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow6 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow6.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow6.SYNC_WSS_FIELD_UID = 
                new Guid(TITLE_LIST_FIELD_GUID);
            syncFieldMappingsRow6.SYNC_WSS_FIELD_NAME = title;
            syncFieldMappingsRow6.SYNC_PROJECT_FIELD_UID = 
                TITLE_PROJECT_FIELD_GUID;
            syncFieldMappingsRow6.SYNC_PROJECT_FIELD_NAME = title;
            syncFieldMappingsRow6.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow6);

            // Add SyncValueTranslationsRow.        
            //SvcProject.SyncDataSet.SyncValueTranslationsRow
            //    syncValueTranslationsRow = 
            //    syncDS.SyncValueTranslations.NewSyncValueTranslationsRow();

            SvcProject.SyncDataSet.SyncValueTranslationsRow
                syncValueTranslationsRow1 = 
                syncDS.SyncValueTranslations.NewSyncValueTranslationsRow();
            syncValueTranslationsRow1.SYNC_WSS_LIST_UID = listUid;
            syncValueTranslationsRow1.SYNC_WSS_FIELD_UID = new Guid(PRIORITY_FIELD_GUID);
            syncValueTranslationsRow1.SYNC_WSS_FIELD_NAME = priority;
            syncValueTranslationsRow1.SYNC_WSS_VALUE = priorityHigh;
            syncValueTranslationsRow1.SYNC_PROJECT_VALUE = priorityHighValue;
            syncDS.SyncValueTranslations.AddSyncValueTranslationsRow(syncValueTranslationsRow1);

            SvcProject.SyncDataSet.SyncValueTranslationsRow
                syncValueTranslationsRow2 = syncDS.SyncValueTranslations.NewSyncValueTranslationsRow();
            syncValueTranslationsRow2.SYNC_WSS_LIST_UID = listUid;
            syncValueTranslationsRow2.SYNC_WSS_FIELD_UID = new Guid(PRIORITY_FIELD_GUID);
            syncValueTranslationsRow2.SYNC_WSS_FIELD_NAME = priority;
            syncValueTranslationsRow2.SYNC_WSS_VALUE = priorityNormal;
            syncValueTranslationsRow2.SYNC_PROJECT_VALUE = priorityNormalValue;
            syncDS.SyncValueTranslations.AddSyncValueTranslationsRow(syncValueTranslationsRow2);

            SvcProject.SyncDataSet.SyncValueTranslationsRow
                syncValueTranslationsRow3 = syncDS.SyncValueTranslations.NewSyncValueTranslationsRow();
            syncValueTranslationsRow3.SYNC_WSS_LIST_UID = listUid;
            syncValueTranslationsRow3.SYNC_WSS_FIELD_UID = new Guid(PRIORITY_FIELD_GUID);
            syncValueTranslationsRow3.SYNC_WSS_FIELD_NAME = priority;
            syncValueTranslationsRow3.SYNC_WSS_VALUE = priorityLow;
            syncValueTranslationsRow3.SYNC_PROJECT_VALUE = priorityLowValue;
            syncDS.SyncValueTranslations.AddSyncValueTranslationsRow(syncValueTranslationsRow3);
 
            return syncDS;
        }

        // Configure the client endpoints.
        public static void ConfigClientEndpoints(string endpt)
        {
            projectClient = new SvcProject.ProjectClient(endpt);
        }
    }
}


</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetProjectNameFromProjectUid">
      <MemberSignature Language="C#" Value="public string GetProjectNameFromProjectUid (Guid projectUid, WebSvcProject.DataStoreEnum dataStore);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetProjectNameFromProjectUid(valuetype System.Guid projectUid, valuetype WebSvcProject.DataStoreEnum dataStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.GetProjectNameFromProjectUid(System.Guid,WebSvcProject.DataStoreEnum)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProjectNameFromProjectUid (projectUid As Guid, dataStore As DataStoreEnum) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetProjectNameFromProjectUid(Guid projectUid, WebSvcProject::DataStoreEnum dataStore);" />
      <MemberSignature Language="F#" Value="member this.GetProjectNameFromProjectUid : Guid * WebSvcProject.DataStoreEnum -&gt; string" Usage="project.GetProjectNameFromProjectUid (projectUid, dataStore)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/GetProjectNameFromProjectUid", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectUid" Type="System.Guid" />
        <Parameter Name="dataStore" Type="WebSvcProject.DataStoreEnum" />
      </Parameters>
      <Docs>
        <param name="projectUid">The GUID of the project.</param>
        <param name="dataStore">The database in which the project data is located (Drafts, Published, or Archive).</param>
        <summary>Gets the project name of the specified <paramref name="projectUid" /> in the Drafts database.</summary>
        <returns>The project name.</returns>
        <remarks>
          <para>To get a project by name instead of the <paramref name="projectUid" />, use <see cref="M:WebSvcProject.Project.ReadProjectStatus(System.Guid,WebSvcProject.DataStoreEnum,System.String,System.Int32)" />.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ViewProjectCenter" />
              </term>
              <description>Allows a user to view the global project information. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.ViewProjectSummaryInProjectCenter" />
              </term>
              <description>Allows a user to access the Project Center.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.BuildTeamOnProject" />
              </term>
              <description>Allows a user to assign resources from the resource pool to the specified project.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ViewTeamBuilder" />
              </term>
              <description>Allows a user to use the <b>Build Team</b> option and to determine the list of available resources.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example creates a sample project, and then retrieves the project's unique ID by using its name.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;
[assembly: CLSCompliant(true)]
namespace Microsoft.SDK.Project.Samples.GetProjectNameFromProjectUid
{
   class Program
   {
      [STAThread]
      static void Main(string[] args)
      {
         try
         {
            #region Setup
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";

            Guid projectId;

            // Set up the web service objects.
            SvcProject.Project projectSvc = new SvcProject.Project();

            SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();

            projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
            projectSvc.UseDefaultCredentials = true;

            SvcQueueSystem.QueueSystem q = new SvcQueueSystem.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;

            // Create a sample project.
            Console.WriteLine("Creating Sample project");
             projectId = CreateSampleProject(projectSvc, q);
            Console.WriteLine("Created " + projectId.ToString());
            #endregion
            #region Get Name from UID
            // Get the name from the Uid.
            string projName = projectSvc.GetProjectNameFromProjectUid(projectId, SvcProject.DataStoreEnum.WorkingStore);
            Console.WriteLine(projName + " was retrieved.");
            #endregion
         }
         #region Exception Handling and Final
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
         #endregion
      }
      // Wait for the job to finish.
      // Outputs job status to the console.
      static public void WaitForQueue(SvcQueueSystem.QueueSystem q, Guid jobId)
      {
         SvcQueueSystem.JobState jobState;
         const int QUEUE_WAIT_TIME = 1; // one second
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         // Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Console.Write("Waiting on queue. Estimate: {0} seconds.\r\n ", wait);

         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == SvcQueueSystem.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == SvcQueueSystem.JobState.Unknown
               || jobState == SvcQueueSystem.JobState.Failed
               || jobState == SvcQueueSystem.JobState.FailedNotBlocking
               || jobState == SvcQueueSystem.JobState.CorrelationBlocked
               || jobState == SvcQueueSystem.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  //Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                  Console.Write("~");
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
         Console.Write("\r\n");
      }
      static private Guid CreateSampleProject(SvcProject.Project projectSvc, SvcQueueSystem.QueueSystem q)
      {
         SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();
         Guid jobId;
         // Create the project.
         SvcProject.ProjectDataSet.ProjectRow projectRow = projectDs.Project.NewProjectRow();
         projectRow.PROJ_UID = Guid.NewGuid();
         projectRow.PROJ_NAME = "Its a wonderful project at " + 
            DateTime.Now.ToShortDateString().Replace("/", "") + " " + 
            DateTime.Now.ToShortTimeString().Replace(":", "");
         projectRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
         projectDs.Project.AddProjectRow(projectRow);

         // Add some tasks.
         SvcProject.ProjectDataSet.TaskRow taskOne = projectDs.Task.NewTaskRow();
         taskOne.PROJ_UID = projectRow.PROJ_UID;
         taskOne.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskOne.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskOne.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskOne.TASK_NAME = "Task One";
         taskOne.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskOne);

         SvcProject.ProjectDataSet.TaskRow taskTwo = projectDs.Task.NewTaskRow();
         taskTwo.PROJ_UID = projectRow.PROJ_UID;
         taskTwo.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskTwo.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskTwo.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskTwo.TASK_NAME = "Task Two";
         taskTwo.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskTwo);

         // Save the project to the database.
         jobId = Guid.NewGuid();
         projectSvc.QueueCreateProject(jobId, projectDs, false);
         WaitForQueue(q, jobId);
         return projectRow.PROJ_UID;
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="QueueAddToProject">
      <MemberSignature Language="C#" Value="public void QueueAddToProject (Guid jobUid, Guid sessionUid, WebSvcProject.ProjectDataSet dataset, bool validateOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueAddToProject(valuetype System.Guid jobUid, valuetype System.Guid sessionUid, class WebSvcProject.ProjectDataSet dataset, bool validateOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueueAddToProject(System.Guid,System.Guid,WebSvcProject.ProjectDataSet,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueAddToProject (jobUid As Guid, sessionUid As Guid, dataset As ProjectDataSet, validateOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueAddToProject(Guid jobUid, Guid sessionUid, WebSvcProject::ProjectDataSet ^ dataset, bool validateOnly);" />
      <MemberSignature Language="F#" Value="member this.QueueAddToProject : Guid * Guid * WebSvcProject.ProjectDataSet * bool -&gt; unit" Usage="project.QueueAddToProject (jobUid, sessionUid, dataset, validateOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueueAddToProject", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUid" Type="System.Guid" />
        <Parameter Name="sessionUid" Type="System.Guid" />
        <Parameter Name="dataset" Type="WebSvcProject.ProjectDataSet" />
        <Parameter Name="validateOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="jobUid">The GUID of the queue job.</param>
        <param name="sessionUid">The GUID of the session in which the queue job is submitted.</param>
        <param name="dataset">Contains the project entities to create.</param>
        <param name="validateOnly">If <b>True</b>, only validates the input data and does not perform the action.</param>
        <summary>Creates project entities that are specified in the <b>ProjectDataSet</b> by using an existing <paramref name="sessionUid" /> for a checked-out project.</summary>
        <remarks>
          <para>
            <b>QueueAddToProject</b> is an asynchronous method that sends a message to the Project Server Queuing Service.</para>
          <para>
            <b>Note</b>: When you create or update a project, the PSI can process up to 1000 rows of data at the same time. If the total number of rows of new or updated data in all tables of <see cref="T:WebSvcProject.ProjectDataSet" /> exceeds 1000, the PSI returns the <see cref="F:Microsoft.Office.Project.Server.Library.PSErrorID.ProjectExceededItemsLimit" /> error.</para>
          <para>When you add a task to a project by using the PSI, do not set the <see cref="P:WebSvcProject.ProjectDataSet.TaskRow.TASK_WBS" /> property. The <b>TASK_WBS</b> property is read-only, although it is marked as read/write in the PSI. If you add a task with the <b>TASK_WBS</b> property set to a specified value, Project Professional ignores the value set from the PSI and assigns a value according to the task outline position when you open the project. To see the result in Project Professional, check the WBS code value on the Advanced tab of the Task Information dialog box.</para>
          <para>
            <b>QueueAddToProject</b> cannot change a a null reference (Nothing in Visual Basic) task to a real task. For example, if you create tasks by using Project Professional and leave one or more empty lines between some of the tasks, the empty lines are a null reference (Nothing in Visual Basic) tasks.</para>
          <para>The <b>Project</b> class methods, such as <b>QueueAddToProject</b>, cannot create, edit, or delete cost resources. If the <b>ProjectDataSet</b> in the <paramref name="dataset" /> parameter includes a cost resource, the method returns the <b>ResourceCannotCreateCostResource</b> error 2076. You can use the <see cref="M:WebSvcResource.Resource.CreateResources(WebSvcResource.ResourceDataSet,System.Boolean,System.Boolean)" /> method to create cost resources, but <b>Resource</b> class methods cannot edit them. For more information, see What the PSI does and does not do.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.SaveProject" />
              </term>
              <description>Allows a user to save the specified project. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example creates a sample project to use, checks out the project, adds a new task to it, and checks the project back in.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.QueueAddToProject
{
   class Program
   {
      [STAThread]
      static void Main(string[] args)
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            const string SESSION_DESC="Sample add to project utility";

            Guid sessionId = Guid.NewGuid();
            Guid jobId;
            Guid projectId;

            // Set up the web service objects.
            SvcProject.Project projectSvc = new SvcProject.Project();

            SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();

            projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
            projectSvc.Credentials = CredentialCache.DefaultCredentials;

            SvcQueueSystem.QueueSystem q = new SvcQueueSystem.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;

            // Create a sample project.
            Console.WriteLine("Creating Sample project");
            projectId = CreateSampleProject(projectSvc, q);
            Console.WriteLine("Created " + projectId.ToString());
           
            // Check out the project.
            Console.WriteLine("Checking out Sample project");
            projectSvc.CheckOutProject(projectId, sessionId, SESSION_DESC);

            /*
             *  Add some items to an existing, checked-out project.
             */
            // Create a dataset to hold the new items.
            Console.WriteLine("Creating new data");
            SvcProject.ProjectDataSet newProjectData = new SvcProject.ProjectDataSet();
            // Add a new task.
            SvcProject.ProjectDataSet.TaskRow newTask = newProjectData.Task.NewTaskRow();
            newTask.PROJ_UID = projectId;
            newTask.TASK_UID = Guid.NewGuid();
            newTask.TASK_NAME = "An added Task";
            newProjectData.Task.AddTaskRow(newTask);
            
            // Add to the project by using the current sessionID.
            Console.WriteLine("Adding new data");
            jobId = Guid.NewGuid();
            projectSvc.QueueAddToProject(jobId,sessionId,newProjectData,false);
            WaitForQueue(q, jobId);

            // Check in the project. 
            Console.WriteLine("Checking in the project");
            jobId = Guid.NewGuid();
            projectSvc.QueueCheckInProject(jobId, projectId, false, sessionId, SESSION_DESC);
            WaitForQueue(q, jobId);
         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }
      static private void WaitForQueue(SvcQueueSystem.QueueSystem q, Guid jobId)
      {
         SvcQueueSystem.JobState jobState;
         const int QUEUE_WAIT_TIME = 2; // two seconds
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         // Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Thread.Sleep(wait * 1000);
         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == SvcQueueSystem.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == SvcQueueSystem.JobState.Unknown
               || jobState == SvcQueueSystem.JobState.Failed
               || jobState == SvcQueueSystem.JobState.FailedNotBlocking
               || jobState == SvcQueueSystem.JobState.CorrelationBlocked
               || jobState == SvcQueueSystem.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request failed \"" + jobState + "\" Job ID: " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  Console.WriteLine("Job State: " + jobState + " Job ID: " + jobId);
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
      }
      static private Guid CreateSampleProject(SvcProject.Project projectSvc, SvcQueueSystem.QueueSystem q)
      {
         SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();
         Guid jobId;
         // Create the project.
         SvcProject.ProjectDataSet.ProjectRow projectRow = projectDs.Project.NewProjectRow();
         projectRow.PROJ_UID = Guid.NewGuid();
         projectRow.PROJ_NAME = "Its a wonderful project at " + 
            DateTime.Now.ToShortDateString().Replace("/", "") + " " + 
            DateTime.Now.ToShortTimeString().Replace(":", "");
         projectRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
         projectDs.Project.AddProjectRow(projectRow);

         // Add some tasks.
         SvcProject.ProjectDataSet.TaskRow taskOne = projectDs.Task.NewTaskRow();
         taskOne.PROJ_UID = projectRow.PROJ_UID;
         taskOne.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskOne.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskOne.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskOne.TASK_NAME = "Task One";
         taskOne.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskOne);

         SvcProject.ProjectDataSet.TaskRow taskTwo = projectDs.Task.NewTaskRow();
         taskTwo.PROJ_UID = projectRow.PROJ_UID;
         taskTwo.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskTwo.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskTwo.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskTwo.TASK_NAME = "Task Two";
         taskTwo.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskTwo);

         // Save the project to the database.
         jobId = Guid.NewGuid();
         projectSvc.QueueCreateProject(jobId, projectDs, false);
         WaitForQueue(q, jobId);
         return projectRow.PROJ_UID;
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="QueueCheckInProject">
      <MemberSignature Language="C#" Value="public void QueueCheckInProject (Guid jobUid, Guid projectUid, bool force, Guid sessionUid, string sessionDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueCheckInProject(valuetype System.Guid jobUid, valuetype System.Guid projectUid, bool force, valuetype System.Guid sessionUid, string sessionDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueueCheckInProject(System.Guid,System.Guid,System.Boolean,System.Guid,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueCheckInProject (jobUid As Guid, projectUid As Guid, force As Boolean, sessionUid As Guid, sessionDescription As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueCheckInProject(Guid jobUid, Guid projectUid, bool force, Guid sessionUid, System::String ^ sessionDescription);" />
      <MemberSignature Language="F#" Value="member this.QueueCheckInProject : Guid * Guid * bool * Guid * string -&gt; unit" Usage="project.QueueCheckInProject (jobUid, projectUid, force, sessionUid, sessionDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueueCheckInProject", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUid" Type="System.Guid" />
        <Parameter Name="projectUid" Type="System.Guid" />
        <Parameter Name="force" Type="System.Boolean" />
        <Parameter Name="sessionUid" Type="System.Guid" />
        <Parameter Name="sessionDescription" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="jobUid">The GUID of the queue job.</param>
        <param name="projectUid">The GUID of the project.</param>
        <param name="force">If <b>true</b>, an administrator or the project owner can force check in of the project.</param>
        <param name="sessionUid">The GUID of the session in which the queue job is submitted.</param>
        <param name="sessionDescription">The description of the session.</param>
        <summary>Checks in the specified project.</summary>
        <remarks>
          <para>
            <b>QueueCheckInProject</b> is an asynchronous method that sends a message to the Project Server Queuing Service. <b>QueueCheckInProject</b> forces a scheduling operation if any changes are made to the database.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.SaveProject" />
              </term>
              <description>Allows a user to save the specified project. Category permission. </description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageCheckIns" />
              </term>
              <description>An admin must have the Manage Check Ins global permission to check in another user's project. </description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example creates a sample project to use, checks out the project, adds a new task to it, and checks the project back in.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.QueueCheckInProject
{
   class Program
   {
      [STAThread]
      static void Main(string[] args)
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            const string SESSION_DESC = "Sample utility";

            Guid sessionId = Guid.NewGuid();
            Guid jobId;
            Guid projectId;

            // Set up the web service objects.
            SvcProject.Project projectSvc = new SvcProject.Project();

            SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();

            projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
            projectSvc.Credentials = CredentialCache.DefaultCredentials;

            SvcQueueSystem.QueueSystem q = new SvcQueueSystem.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;

            // Create a sample project.
            Console.WriteLine("Creating Sample project");
            projectId = CreateSampleProject(projectSvc, q);
            Console.WriteLine("Created " + projectId.ToString());
         
            // Check out the project.
            Console.WriteLine("Checking out Sample project");
            projectSvc.CheckOutProject(projectId, sessionId, SESSION_DESC);

            // Create a dataset to hold the new items.
            Console.WriteLine("Creating new data");
            SvcProject.ProjectDataSet newProjectData = new SvcProject.ProjectDataSet();
            // Add a new task.
            SvcProject.ProjectDataSet.TaskRow newTask = newProjectData.Task.NewTaskRow();
            newTask.PROJ_UID = projectId;
            newTask.TASK_UID = Guid.NewGuid();
            // The Task Duration format must be specified.
            newTask.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
            newTask.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
            newTask.TASK_NAME = "An added Task";
            newProjectData.Task.AddTaskRow(newTask);

            // Add to the project by using the current sessionID.
            Console.WriteLine("Adding new data");
            jobId = Guid.NewGuid();
            projectSvc.QueueAddToProject(jobId, sessionId, newProjectData, false);
            WaitForQueue(q, jobId);

            // Check in the project. 
            Console.WriteLine("Checking in the project");
            jobId = Guid.NewGuid();
            projectSvc.QueueCheckInProject(jobId, projectId, false, sessionId, SESSION_DESC);
            WaitForQueue(q, jobId);
         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }
      static private void WaitForQueue(SvcQueueSystem.QueueSystem q, Guid jobId)
      {
         SvcQueueSystem.JobState jobState;
         const int QUEUE_WAIT_TIME = 2; // two seconds
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         // Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Thread.Sleep(wait * 1000);
         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == SvcQueueSystem.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == SvcQueueSystem.JobState.Unknown
               || jobState == SvcQueueSystem.JobState.Failed
               || jobState == SvcQueueSystem.JobState.FailedNotBlocking
               || jobState == SvcQueueSystem.JobState.CorrelationBlocked
               || jobState == SvcQueueSystem.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request failed \"" + jobState + "\" Job ID: " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  Console.WriteLine("Job State: " + jobState + " Job ID: " + jobId);
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
      }
      static private Guid CreateSampleProject(SvcProject.Project projectSvc, SvcQueueSystem.QueueSystem q)
      {
         SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();
         Guid jobId;
         // Create the project.
         SvcProject.ProjectDataSet.ProjectRow projectRow = projectDs.Project.NewProjectRow();
         projectRow.PROJ_UID = Guid.NewGuid();
         projectRow.PROJ_NAME = "Its a wonderful project at " + 
            DateTime.Now.ToShortDateString().Replace("/", "") + " " + 
            DateTime.Now.ToShortTimeString().Replace(":", "");
         projectRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
         projectDs.Project.AddProjectRow(projectRow);

         // Add some tasks.
         SvcProject.ProjectDataSet.TaskRow taskOne = projectDs.Task.NewTaskRow();
         taskOne.PROJ_UID = projectRow.PROJ_UID;
         taskOne.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskOne.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskOne.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskOne.TASK_NAME = "Task One";
         taskOne.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskOne);

         SvcProject.ProjectDataSet.TaskRow taskTwo = projectDs.Task.NewTaskRow();
         taskTwo.PROJ_UID = projectRow.PROJ_UID;
         taskTwo.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskTwo.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskTwo.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskTwo.TASK_NAME = "Task Two";
         taskTwo.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskTwo);

         // Save the project to the database.
         jobId = Guid.NewGuid();
         projectSvc.QueueCreateProject(jobId, projectDs, false);
         WaitForQueue(q, jobId);
         return projectRow.PROJ_UID;
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="QueueCreateProject">
      <MemberSignature Language="C#" Value="public void QueueCreateProject (Guid jobUid, WebSvcProject.ProjectDataSet dataset, bool validateOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueCreateProject(valuetype System.Guid jobUid, class WebSvcProject.ProjectDataSet dataset, bool validateOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueueCreateProject(System.Guid,WebSvcProject.ProjectDataSet,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueCreateProject (jobUid As Guid, dataset As ProjectDataSet, validateOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueCreateProject(Guid jobUid, WebSvcProject::ProjectDataSet ^ dataset, bool validateOnly);" />
      <MemberSignature Language="F#" Value="member this.QueueCreateProject : Guid * WebSvcProject.ProjectDataSet * bool -&gt; unit" Usage="project.QueueCreateProject (jobUid, dataset, validateOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueueCreateProject", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUid" Type="System.Guid" />
        <Parameter Name="dataset" Type="WebSvcProject.ProjectDataSet" />
        <Parameter Name="validateOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="jobUid">The GUID of the queue job.</param>
        <param name="dataset">Contains the project data.</param>
        <param name="validateOnly">If <b>True</b>, only validates the input data and does not perform the action.</param>
        <summary>Creates a project with the specified entities, and checks in the project to the Drafts database tables .</summary>
        <remarks>
          <para>
            <b>QueueCreateProject</b> is an asynchronous method that sends a message to the Project Server Queuing Service.</para>
          <para>
            <b>Note</b>: Because the PSI does not support Claims authentication, the <b>QueueCreateProject</b> method does not support an enterprise project type (EPT) that uses a workflow definition for Windows Workflow Foundation 4 (WF4).You can use the PSI to create projects with EPTs that either have no workflow or use a legacy WF3.5 definition. To create a project with an EPT that has a WF4 definition, use the CSOM.</para>
          <para>The <b>Project</b> class methods, such as <b>QueueCreateProject</b>, cannot create, edit, or delete cost resources. If the <b>ProjectDataSet</b> in the <paramref name="dataset" /> parameter includes a cost resource, the method returns the <b>ResourceCannotCreateCostResource</b> error 2076. You can use the <see cref="M:WebSvcResource.Resource.CreateResources(WebSvcResource.ResourceDataSet,System.Boolean,System.Boolean)" /> method to create cost resources, but <b>Resource</b> class methods cannot edit them. For more information, see What the PSI does and does not do.</para>
          <para>You cannot use the Project Server Interface (PSI) to create local custom fields in projects. However, the PSI does support editing local custom field values on tasks, resources, and assignments. </para>
          <para>When creating a <see cref="T:WebSvcProject.ProjectDataSet.TaskRow" />, you must specify <see cref="P:WebSvcProject.ProjectDataSet.TaskRow.TASK_DUR_FMT" />. Otherwise, later use of this project in Project Professional can result in unpredictable behavior, including possible data loss.</para>
          <para>Any changes made to enterprise resource properties in <see cref="T:WebSvcProject.ProjectDataSet.ProjectResourceRow" /> will be lost the next time Project Professional refreshes the data from Project Server.</para>
          <para>When you add a task to a <b>ProjectDataSet</b>, do not set the <see cref="P:WebSvcProject.ProjectDataSet.TaskRow.TASK_WBS" /> property. The <b>TASK_WBS</b> property is read-only, although it is marked as read/write in the PSI. If you add a task with the <b>TASK_WBS</b> property set to a specified value, Project Professional ignores the value set from the PSI and assigns a value according to the task outline position when you open the project. To see the result in Project Professional, check the WBS code value on the Advanced tab of the Task Information dialog box.</para>
          <para>When you add a project custom field to to <b>ProjectDataSet.ProjectCustomFields</b> table, do not set the value of the <b>MD_PROP_ID</b> property. Project Server automatically adds a value when it creates the project. The <b>CreateProject4Department</b> code example shows the data in the <b>ProjectDataSet</b> before and after the call to <b>QueueCreateProject</b>.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.NewProject" />
              </term>
              <description>Allows a user to create a new project. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.SaveProjectTemplate" />
              </term>
              <description>Allows a user to create and save a project as an enterprise project template.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>Example for WCF:   The <b>CreateProject4Department</b> example does the following:</para>
          <list type="number">
            <item>
              <description>Builds a basic <b>ProjectDataSet</b> for one new project that has zero or more tasks, plus a row in the <b>ProjectCustomFields</b> table. The project is assigned to a specified department by using the Project Departments custom field that has a value in the <b>Departments</b> lookup table.</description>
            </item>
            <item>
              <description>After calling <b>QueueCreateProject</b>, waits for the project queue to finish, and then reads the <b>ProjectDataSet</b> back by using <b>ReadProject</b>.</description>
            </item>
            <item>
              <description>Saves the <b>ProjectDataSet</b> to XML files, before creating the project and after calling <b>ReadProject</b>. Shows that Project Server automatically creates the <b>MD_PROP_ID</b> field for the <b>Project Departments</b> custom field.</description>
            </item>
            <item>
              <description>Shows how to use the WCF <b>FaultException</b>, to display the error stack. Comments in the <b>PopulateData</b> method show how to create errors in the <b>ProjectDataSet</b> that trigger the <b>System.ServiceModel.FaultException</b>. For example output of the exception handler, see the Code Example for WCF section in Project Server Error Codes.</description>
            </item>
          </list>
          <para>For information about using the code sample in a Microsoft Visual Studio 2010 project and creating an app.config file for configuration of the WCF endpoints, see Prerequisites for WCF-Based Code Samples.</para>
          <code>using System;
using System.Text;
using System.ServiceModel;
using System.Xml;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.CreateProject4Department
{
    class Program
    {
        private const string ENDPOINT_PROJECT = "basicHttp_Project";
        private const string ENDPOINT_QUEUESYSTEM = "basicHttp_QueueSystem";
        // Change the output directory for your computer.
        private const string OUTPUT_FILES = @"C:\Project\Samples\Output\";

        // Change the following GUID to match a value in your Departments
        // lookup table. To find the GUID of a value in the Departments lookup table,
        // see the MSPLT_Department_UserView view in the Reporting database. 
        // For example, use the following query:
        //   SELECT TOP 20 [LookupMemberUID],[MemberValue],[MemberDescription]
        //     FROM [ProjectServer_Reporting].[dbo].[MSPLT_Department_UserView]
        //
        // Alternately, use the LookupTable.ReadLookupTablesByUids method and then 
        // get the GUID of the value you want. The GUID of the built-in Departments
        // lookup table is PSLibrary.LookupTables.DEPARTMENTS_LT_UID.
        private const string DEPARTMENT_TEST = "E78E047B-1F01-4882-8336-60DF5A727F6D";

        private static SvcProject.ProjectClient projectClient;
        private static SvcQueueSystem.QueueSystemClient queueSystemClient;

        private static string outFilePath1;
        private static string outFilePath2;
 
        static void Main(string[] args)
        {
            Guid sampleProjNameUid = Guid.NewGuid();
            string projName = "TestProjDept " + sampleProjNameUid;
            int numTasks = 0;

            if (args.Length &amp;gt; 0 &amp;amp;&amp;amp; args.Length &amp;lt; 5)
            {
                if (args[0].ToLower() == "-name")
                {
                    projName = args[1];
                }

                if (args[2].ToLower() == "-tasks")
                    numTasks = Convert.ToInt32(args[3]);
            }
            outFilePath1 = OUTPUT_FILES + "ProjectDataSet4Department_before.xml";
            outFilePath2 = OUTPUT_FILES + "ProjectDataSet4Department_after.xml";
            ConfigClientEndpoints(ENDPOINT_PROJECT);
            ConfigClientEndpoints(ENDPOINT_QUEUESYSTEM);

            try
            {
                SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();

                projectDs = PopulateData(projectDs, projName.Trim(), numTasks);

                Console.WriteLine(
                    "\nXML output of the ProjectDataSet before QueueCreateProject:\n\t{0}",
                    outFilePath1);
                projectDs.WriteXml(outFilePath1);

                // Create the project.
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("Creating project: {0}", projName);
                Console.ResetColor();

                Guid jobUid = Guid.NewGuid();
                DateTime startTime = DateTime.Now;
                projectClient.QueueCreateProject(jobUid, projectDs, false);

                // Wait for the Project Server Queuing System to create the project.
                if (Helpers.WaitForQueue(SvcQueueSystem.QueueMsgType.ProjectCreate,
                    queueSystemClient, startTime))
                {
                    Console.WriteLine(
                        "\nXML output of the ProjectDataSet after ReadProject:\n\t{0}",
                        outFilePath2);
                    Guid projUid = projectDs.Project[0].PROJ_UID;
                    projectDs = projectClient.ReadProject(projUid,
                        SvcProject.DataStoreEnum.WorkingStore);
                    projectDs.WriteXml(outFilePath2);
                }
                else
                {
                    Console.WriteLine("The project was not created: {0}.\n\tThe queue wait time exceeded 30 seconds.",
                        projName);
                }
            }
            catch(FaultException fault)
            {
                // Use the WCF FaultException, because the ASMX SoapException does not 
                // exist in a WCF-based application.
                WriteFaultOutput(fault);
            }
            Console.Write("\nPress any key to exit... ");
            Console.ReadKey(true);
        }

        // Populate the minimum data necessary for the ProjectDataSet, for the Project 
        // table and for the ProjectCustomFields table.
        private static SvcProject.ProjectDataSet PopulateData(
            SvcProject.ProjectDataSet projDs, string name, int numTasks)
        {
            SvcProject.ProjectDataSet.ProjectRow projRow = projDs.Project.NewProjectRow();
            SvcProject.ProjectDataSet.ProjectCustomFieldsRow projCF = 
                projDs.ProjectCustomFields.NewProjectCustomFieldsRow();

            projRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
            projRow.PROJ_UID = Guid.NewGuid();
            projRow.PROJ_NAME = name;
            projDs.Project.AddProjectRow(projRow);

            projCF.CUSTOM_FIELD_UID = Guid.NewGuid();
            projCF.FIELD_TYPE_ENUM = (byte)PSLibrary.CustomField.Type.TEXT;
            projCF.PROJ_UID = projRow.PROJ_UID;

            // It is not strictly necessary to set unused values to null; 
            // however, doing so helps to emphasize that the custom field is not 
            // one of the following simple types.
            projCF.SetNUM_VALUENull();
            projCF.SetFLAG_VALUENull();
            projCF.SetDUR_VALUENull();
            projCF.SetDUR_FMTNull();
            projCF.SetDATE_VALUENull();
            projCF.SetTEXT_VALUENull();

            // To see the InvalidTypeColumnFilledIn exception when calling 
            // QueueCreateProject, uncomment the following line:
            // projCF.TEXT_VALUE = "Marketing";

            projCF.MD_PROP_UID = PSLibrary.CustomField.PROJECT_DEPARTMENT_MD_PROP_UID;
            Guid lookupTableMemberUid = new Guid(DEPARTMENT_TEST);

            // Comment-out the following line, to see an additional 
            // CustomFieldRequiredValueNotProvided exception.
            projCF.CODE_VALUE = lookupTableMemberUid;

            projDs.ProjectCustomFields.AddProjectCustomFieldsRow(projCF);

            // Add the specified number of tasks.
            if (numTasks &amp;gt; 0)
            {
                SvcProject.ProjectDataSet.TaskRow task = null;
                for (int i = 0; i &amp;lt; numTasks; i++)
                {
                    task = projDs.Task.NewTaskRow();
                    task.PROJ_UID = projRow.PROJ_UID;
                    task.TASK_UID = Guid.NewGuid();
                    task.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
                    task.TASK_DUR = 4800;  // The task duration is 8 hours.
                    task.TASK_NAME = "T" + (i + 1).ToString();
                    task.TASK_START_DATE = System.DateTime.Now.AddDays(i + 1);
                    projDs.Task.AddTaskRow(task);
                }
            }

            return projDs;
        }

        // Extract a PSClientError object from the WCF FaultException object, and
        // then display the exception details and each error in the PSClientError stack.
        private static void WriteFaultOutput(FaultException fault)
        {
            string errAttributeName;
            string errAttribute;
            string errOut;
            string errMess = "".PadRight(30, '=') + "\r\n"
                + "Error details: " + "\r\n";

            PSLibrary.PSClientError error = Helpers.GetPSClientError(fault, out errOut);
            errMess += errOut;

            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            PSLibrary.PSErrorInfo thisError;

            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
                thisError = errors[i];
                errMess += "\r\n".PadRight(30, '=') + "\r\nPSClientError output:\r\n";
                errMess += thisError.ErrId.ToString() + "\n";

                for (int j = 0; j &amp;lt; thisError.ErrorAttributes.Length; j++)
                {
                    errAttributeName = thisError.ErrorAttributeNames()[j];
                    errAttribute = thisError.ErrorAttributes[j];
                    errMess += "\r\n\t" + errAttributeName
                        + ": " + errAttribute;
                }
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
            Console.ResetColor();
        }

        // Use the endpoints defined in app.config to configure the client.
        public static void ConfigClientEndpoints(string endpt)
        {
            if (endpt == ENDPOINT_PROJECT)
                projectClient = new SvcProject.ProjectClient(endpt);
            else if (endpt == ENDPOINT_QUEUESYSTEM)
                queueSystemClient = new SvcQueueSystem.QueueSystemClient(endpt);
        }            
    }

    // Helper methods: WaitForQueue and GetPSClientError.
    class Helpers
    {
        // Wait for the queue jobs to complete.
        public static bool WaitForQueue(SvcQueueSystem.QueueMsgType jobType,
            SvcQueueSystem.QueueSystemClient queueSystemClient,
            DateTime startTime)
        {
            const int MAX_WAIT = 30;    // Maximum wait time, in seconds.
            int numJobs = 1;            // Number of jobs in the queue.
            bool completed = false;     // Queue job completed.
            SvcQueueSystem.QueueStatusDataSet queueStatusDs = 
                new SvcQueueSystem.QueueStatusDataSet();

            int timeout = 0;            // Number of seconds waited.
            Console.Write("Waiting for job: {0} ", jobType.ToString());

            SvcQueueSystem.QueueMsgType[] messageTypes = { jobType };
            SvcQueueSystem.JobState[] jobStates = { SvcQueueSystem.JobState.Success };

            while (timeout &amp;lt; MAX_WAIT)
            {
                System.Threading.Thread.Sleep(1000);    // Sleep one second.

                queueStatusDs = queueSystemClient.ReadMyJobStatus(
                    messageTypes,
                    jobStates,
                    startTime,
                    DateTime.Now,
                    numJobs,
                    true,
                    SvcQueueSystem.SortColumn.QueuePosition,
                    SvcQueueSystem.SortOrder.LastOrder);

                timeout++;
                Console.Write(".");
            }
            Console.WriteLine();

            if (queueStatusDs.Status.Count == numJobs)
                completed = true;
            return completed;
        }

        /// &amp;lt;summary&amp;gt;
        /// Extract a PSClientError object from the ServiceModel.FaultException,
        /// for use in output of the GetPSClientError stack of errors.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="e"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name="errOut"&amp;gt;Shows that FaultException has more information 
        /// about the errors than PSClientError has. FaultException can also contain 
        /// other types of errors, such as failure to connect to the server.&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;PSClientError object, for enumerating errors.&amp;lt;/returns&amp;gt;
        public static PSLibrary.PSClientError GetPSClientError(FaultException e, 
                                                               out string errOut)
        {
            const string PREFIX = "GetPSClientError() returns null: ";
            errOut = string.Empty;
            PSLibrary.PSClientError psClientError = null;

            if (e == null)
            {
                errOut = PREFIX + "Null parameter (FaultException e) passed in.";
                psClientError = null;
            }
            else
            {
                // Get a ServiceModel.MessageFault object.
                var messageFault = e.CreateMessageFault();

                if (messageFault.HasDetail)
                {
                    using (var xmlReader = messageFault.GetReaderAtDetailContents())
                    {
                        var xml = new XmlDocument();
                        xml.Load(xmlReader);

                        var serverExecutionFault = xml["ServerExecutionFault"];
                        if (serverExecutionFault != null)
                        {
                            var exceptionDetails = serverExecutionFault["ExceptionDetails"];
                            if (exceptionDetails != null)
                            {
                                try
                                {
                                    errOut = exceptionDetails.InnerXml + "\r\n";
                                    psClientError = 
                                        new PSLibrary.PSClientError(exceptionDetails.InnerXml);
                                }
                                catch (InvalidOperationException ex)
                                {
                                    errOut = PREFIX + "Unable to convert fault exception info ";
                                    errOut += "a valid Project Server error message. Message: \n\t";
                                    errOut += ex.Message;
                                    psClientError = null;
                                }
                            }
                            else
                            {
                                errOut = PREFIX + "The FaultException e is a ServerExecutionFault, "
                                    + "but does not have ExceptionDetails.";
                            }
                        }
                        else
                        {
                            errOut = PREFIX + "The FaultException e is not a ServerExecutionFault.";
                        }
                    }
                }
                else // No detail in the MessageFault.
                {
                    errOut = PREFIX + "The FaultException e does not have any detail.";
                }
            }
            errOut += "\r\n" + e.ToString() + "\r\n";
            return psClientError;
        }
    }
}</code>
          <para>The following command line runs the <b>CreateProject4Department</b> application to create a project with no tasks. The value for the department GUID (the CODE_VALUE property for the custom field) is hard-coded in the application.</para>
          <code>CreateProject4Department -name "Proj Dept Test 2"</code>
          <para>Following are contents of the ProjectDataSet4Department_before.xml file, which the <b>CreateProject4Department</b> application saves before calling <b>QueueCreateProject</b>. </para>
          <code>&amp;lt;?xml version="1.0" standalone="yes"?&amp;gt;
&amp;lt;ProjectDataSet xmlns="http://schemas.microsoft.com/office/project/server/webservices/ProjectDataSet/"&amp;gt;
  &amp;lt;Project&amp;gt;
    &amp;lt;PROJ_UID&amp;gt;e1c2d38b-1529-4128-b707-42a94045e55b&amp;lt;/PROJ_UID&amp;gt;
    &amp;lt;PROJ_NAME&amp;gt;Proj Dept Test 2&amp;lt;/PROJ_NAME&amp;gt;
    &amp;lt;PROJ_TYPE&amp;gt;0&amp;lt;/PROJ_TYPE&amp;gt;
  &amp;lt;/Project&amp;gt;
  &amp;lt;ProjectCustomFields&amp;gt;
    &amp;lt;CUSTOM_FIELD_UID&amp;gt;4802a711-62a0-4f84-8e08-c7d22daadb5b&amp;lt;/CUSTOM_FIELD_UID&amp;gt;
    &amp;lt;PROJ_UID&amp;gt;e1c2d38b-1529-4128-b707-42a94045e55b&amp;lt;/PROJ_UID&amp;gt;
    &amp;lt;MD_PROP_UID&amp;gt;9d77d62a-a92e-4d40-adc8-446c90eb7456&amp;lt;/MD_PROP_UID&amp;gt;
    &amp;lt;FIELD_TYPE_ENUM&amp;gt;21&amp;lt;/FIELD_TYPE_ENUM&amp;gt;
    &amp;lt;CODE_VALUE&amp;gt;a47930d6-b89d-4f3a-b4e3-522015fe82a1&amp;lt;/CODE_VALUE&amp;gt;
  &amp;lt;/ProjectCustomFields&amp;gt;
&amp;lt;/ProjectDataSet&amp;gt;</code>
          <para>Following are contents of the ProjectDataSet4Department_after.xml file, which the <b>CreateProject4Department</b> application saves after calling <b>ReadProject</b>. Project Server populates many additional fields with default values, including the <b>MD_PROP_ID</b> field in the <b>ProjectCustomFields</b> table.</para>
          <code>&amp;lt;?xml version="1.0" standalone="yes"?&amp;gt;
&amp;lt;ProjectDataSet xmlns="http://schemas.microsoft.com/office/project/server/webservices/ProjectDataSet/"&amp;gt;
  &amp;lt;Project&amp;gt;
    &amp;lt;PROJ_UID&amp;gt;e1c2d38b-1529-4128-b707-42a94045e55b&amp;lt;/PROJ_UID&amp;gt;
    &amp;lt;PROJ_NAME&amp;gt;Proj Dept Test 2&amp;lt;/PROJ_NAME&amp;gt;
    &amp;lt;PROJ_TYPE&amp;gt;0&amp;lt;/PROJ_TYPE&amp;gt;
    &amp;lt;PROJ_PROP_AUTHOR&amp;gt;REDMOND\jcorbin&amp;lt;/PROJ_PROP_AUTHOR&amp;gt;
    &amp;lt;CAL_UID&amp;gt;b6635b2e-e747-4771-a78b-24f7509629d0&amp;lt;/CAL_UID&amp;gt;
    &amp;lt;CAL_NAME&amp;gt;Standard&amp;lt;/CAL_NAME&amp;gt;
    &amp;lt;PROJ_PROP_TITLE&amp;gt;Proj Dept Test 2&amp;lt;/PROJ_PROP_TITLE&amp;gt;
    &amp;lt;PROJ_OPT_CALC_ACT_COSTS&amp;gt;false&amp;lt;/PROJ_OPT_CALC_ACT_COSTS&amp;gt;
    &amp;lt;PROJ_OPT_CRITICAL_SLACK_LIMIT&amp;gt;0&amp;lt;/PROJ_OPT_CRITICAL_SLACK_LIMIT&amp;gt;
    &amp;lt;PROJ_OPT_CURRENCY_DIGITS&amp;gt;2&amp;lt;/PROJ_OPT_CURRENCY_DIGITS&amp;gt;
    &amp;lt;PROJ_OPT_CURRENCY_POSITION&amp;gt;0&amp;lt;/PROJ_OPT_CURRENCY_POSITION&amp;gt;
    &amp;lt;PROJ_OPT_CURRENCY_SYMBOL&amp;gt;$&amp;lt;/PROJ_OPT_CURRENCY_SYMBOL&amp;gt;
    &amp;lt;PROJ_OPT_CURRENCY_CODE&amp;gt;USD&amp;lt;/PROJ_OPT_CURRENCY_CODE&amp;gt;
    &amp;lt;PROJ_OPT_NEW_TASKS_ARE_EFFORT_DRIVEN&amp;gt;false&amp;lt;/PROJ_OPT_NEW_TASKS_ARE_EFFORT_DRIVEN&amp;gt;
    &amp;lt;PROJ_INFO_CURRENT_DATE&amp;gt;2010-06-21T08:00:00-07:00&amp;lt;/PROJ_INFO_CURRENT_DATE&amp;gt;
    &amp;lt;PROJ_OPT_DEF_FINISH_TIME&amp;gt;2010-06-21T17:00:00-07:00&amp;lt;/PROJ_OPT_DEF_FINISH_TIME&amp;gt;
    &amp;lt;PROJ_OPT_DEF_FIX_COST_ACCRUAL&amp;gt;3&amp;lt;/PROJ_OPT_DEF_FIX_COST_ACCRUAL&amp;gt;
    &amp;lt;PROJ_OPT_DEF_OVT_RATE&amp;gt;0&amp;lt;/PROJ_OPT_DEF_OVT_RATE&amp;gt;
    &amp;lt;PROJ_OPT_DEF_STD_RATE&amp;gt;0&amp;lt;/PROJ_OPT_DEF_STD_RATE&amp;gt;
    &amp;lt;PROJ_OPT_DEF_START_TIME&amp;gt;2010-06-21T08:00:00-07:00&amp;lt;/PROJ_OPT_DEF_START_TIME&amp;gt;
    &amp;lt;PROJ_OPT_DEF_TASK_TYPE&amp;gt;0&amp;lt;/PROJ_OPT_DEF_TASK_TYPE&amp;gt;
    &amp;lt;WPROJ_TRACKING_METHOD&amp;gt;0&amp;lt;/WPROJ_TRACKING_METHOD&amp;gt;
    &amp;lt;PROJ_OPT_DUR_ENTRY_FMT&amp;gt;7&amp;lt;/PROJ_OPT_DUR_ENTRY_FMT&amp;gt;
    &amp;lt;PROJ_INFO_FINISH_DATE&amp;gt;2010-06-21T08:00:00-07:00&amp;lt;/PROJ_INFO_FINISH_DATE&amp;gt;
    &amp;lt;PROJ_OPT_HONOR_CONSTRAINTS&amp;gt;true&amp;lt;/PROJ_OPT_HONOR_CONSTRAINTS&amp;gt;
    &amp;lt;PROJ_OPT_MULT_CRITICAL_PATHS&amp;gt;false&amp;lt;/PROJ_OPT_MULT_CRITICAL_PATHS&amp;gt;
    &amp;lt;PROJ_INFO_SCHED_FROM&amp;gt;true&amp;lt;/PROJ_INFO_SCHED_FROM&amp;gt;
    &amp;lt;PROJ_OPT_SPLIT_IN_PROGRESS&amp;gt;true&amp;lt;/PROJ_OPT_SPLIT_IN_PROGRESS&amp;gt;
    &amp;lt;PROJ_OPT_SPREAD_ACT_COSTS&amp;gt;false&amp;lt;/PROJ_OPT_SPREAD_ACT_COSTS&amp;gt;
    &amp;lt;PROJ_OPT_SPREAD_PCT_COMP&amp;gt;false&amp;lt;/PROJ_OPT_SPREAD_PCT_COMP&amp;gt;
    &amp;lt;PROJ_INFO_START_DATE&amp;gt;2010-06-21T08:00:00-07:00&amp;lt;/PROJ_INFO_START_DATE&amp;gt;
    &amp;lt;PROJ_INFO_STATUS_DATE&amp;gt;2010-06-21T08:00:00-07:00&amp;lt;/PROJ_INFO_STATUS_DATE&amp;gt;
    &amp;lt;PROJ_OPT_TASK_UPDATES_RES&amp;gt;true&amp;lt;/PROJ_OPT_TASK_UPDATES_RES&amp;gt;
    &amp;lt;PROJ_OPT_WORK_ENTRY_FMT&amp;gt;2&amp;lt;/PROJ_OPT_WORK_ENTRY_FMT&amp;gt;
    &amp;lt;PROJ_OPT_NEW_TASK_EST&amp;gt;true&amp;lt;/PROJ_OPT_NEW_TASK_EST&amp;gt;
    &amp;lt;PROJ_PROTECTED_ACTUALS_SYNCH&amp;gt;false&amp;lt;/PROJ_PROTECTED_ACTUALS_SYNCH&amp;gt;
    &amp;lt;PROJ_OPT_FY_START_MONTH&amp;gt;1&amp;lt;/PROJ_OPT_FY_START_MONTH&amp;gt;
    &amp;lt;PROJ_OPT_FY_USE_START_YR&amp;gt;false&amp;lt;/PROJ_OPT_FY_USE_START_YR&amp;gt;
    &amp;lt;PROJ_OPT_MINUTES_PER_DAY&amp;gt;480&amp;lt;/PROJ_OPT_MINUTES_PER_DAY&amp;gt;
    &amp;lt;PROJ_OPT_MINUTES_PER_WEEK&amp;gt;2400&amp;lt;/PROJ_OPT_MINUTES_PER_WEEK&amp;gt;
    &amp;lt;PROJ_OPT_DAYS_PER_MONTH&amp;gt;20&amp;lt;/PROJ_OPT_DAYS_PER_MONTH&amp;gt;
    &amp;lt;PROJ_OPT_MOVE_ACTUAL_IF_LATER&amp;gt;false&amp;lt;/PROJ_OPT_MOVE_ACTUAL_IF_LATER&amp;gt;
    &amp;lt;PROJ_OPT_MOVE_ACTUAL_TO_STATUS&amp;gt;false&amp;lt;/PROJ_OPT_MOVE_ACTUAL_TO_STATUS&amp;gt;
    &amp;lt;PROJ_OPT_MOVE_REMAINING_IF_EARLIER&amp;gt;false&amp;lt;/PROJ_OPT_MOVE_REMAINING_IF_EARLIER&amp;gt;
    &amp;lt;PROJ_OPT_MOVE_REMAINING_TO_STATUS&amp;gt;false&amp;lt;/PROJ_OPT_MOVE_REMAINING_TO_STATUS&amp;gt;
    &amp;lt;PROJ_OPT_SHOW_EST_DUR&amp;gt;true&amp;lt;/PROJ_OPT_SHOW_EST_DUR&amp;gt;
    &amp;lt;PROJ_OPT_WEEK_START_DAY&amp;gt;0&amp;lt;/PROJ_OPT_WEEK_START_DAY&amp;gt;
    &amp;lt;ProjectOwnerID&amp;gt;a91826f2-e125-4b85-b59e-0bebbca19208&amp;lt;/ProjectOwnerID&amp;gt;
    &amp;lt;PROJ_STALE_FLAGS&amp;gt;3&amp;lt;/PROJ_STALE_FLAGS&amp;gt;
    &amp;lt;PROJ_LAST_SAVED&amp;gt;2010-06-21T14:58:41.01-07:00&amp;lt;/PROJ_LAST_SAVED&amp;gt;
    &amp;lt;CREATED_DATE&amp;gt;2010-06-21T14:58:39.89-07:00&amp;lt;/CREATED_DATE&amp;gt;
    &amp;lt;ENTERPRISE_PROJECT_TYPE_UID&amp;gt;09fa52b4-059b-4527-926e-99f9be96437a&amp;lt;/ENTERPRISE_PROJECT_TYPE_UID&amp;gt;
    &amp;lt;ENTERPRISE_PROJECT_TYPE_NAME&amp;gt;Basic Project Plan&amp;lt;/ENTERPRISE_PROJECT_TYPE_NAME&amp;gt;
    &amp;lt;PROJ_NEW_TASKS_ARE_MANUAL&amp;gt;true&amp;lt;/PROJ_NEW_TASKS_ARE_MANUAL&amp;gt;
    &amp;lt;PROJ_WINPROJ_VERSION_NUMBER&amp;gt;14.0000000000&amp;lt;/PROJ_WINPROJ_VERSION_NUMBER&amp;gt;
  &amp;lt;/Project&amp;gt;
  &amp;lt;Task&amp;gt;
    &amp;lt;PROJ_UID&amp;gt;e1c2d38b-1529-4128-b707-42a94045e55b&amp;lt;/PROJ_UID&amp;gt;
    &amp;lt;TASK_UID&amp;gt;efcca348-2057-4ec7-9e21-13e073fade66&amp;lt;/TASK_UID&amp;gt;
    &amp;lt;TASK_PARENT_UID&amp;gt;efcca348-2057-4ec7-9e21-13e073fade66&amp;lt;/TASK_PARENT_UID&amp;gt;
    &amp;lt;TASK_NAME&amp;gt;Proj Dept Test 2&amp;lt;/TASK_NAME&amp;gt;
    &amp;lt;TASK_ID&amp;gt;0&amp;lt;/TASK_ID&amp;gt;
    &amp;lt;TASK_IS_MILESTONE&amp;gt;false&amp;lt;/TASK_IS_MILESTONE&amp;gt;
    &amp;lt;TASK_IS_SUMMARY&amp;gt;true&amp;lt;/TASK_IS_SUMMARY&amp;gt;
    &amp;lt;TASK_IS_MARKED&amp;gt;false&amp;lt;/TASK_IS_MARKED&amp;gt;
    &amp;lt;TASK_IGNORES_RES_CAL&amp;gt;false&amp;lt;/TASK_IGNORES_RES_CAL&amp;gt;
    &amp;lt;TASK_IS_EFFORT_DRIVEN&amp;gt;false&amp;lt;/TASK_IS_EFFORT_DRIVEN&amp;gt;
    &amp;lt;TASK_IS_CRITICAL&amp;gt;true&amp;lt;/TASK_IS_CRITICAL&amp;gt;
    &amp;lt;TASK_IS_EXTERNAL&amp;gt;false&amp;lt;/TASK_IS_EXTERNAL&amp;gt;
    &amp;lt;TASK_IS_FROM_FINISH_SUBPROJ&amp;gt;false&amp;lt;/TASK_IS_FROM_FINISH_SUBPROJ&amp;gt;
    &amp;lt;TASK_IS_OVERALLOCATED&amp;gt;false&amp;lt;/TASK_IS_OVERALLOCATED&amp;gt;
    &amp;lt;TASK_IS_RECURRING&amp;gt;false&amp;lt;/TASK_IS_RECURRING&amp;gt;
    &amp;lt;TASK_IS_RECURRING_SUMMARY&amp;gt;false&amp;lt;/TASK_IS_RECURRING_SUMMARY&amp;gt;
    &amp;lt;TASK_IS_SUBPROJ&amp;gt;false&amp;lt;/TASK_IS_SUBPROJ&amp;gt;
    &amp;lt;TASK_IS_READONLY_SUBPROJ&amp;gt;false&amp;lt;/TASK_IS_READONLY_SUBPROJ&amp;gt;
    &amp;lt;TASK_LOCKDOWN_BY_MANAGER&amp;gt;false&amp;lt;/TASK_LOCKDOWN_BY_MANAGER&amp;gt;
    &amp;lt;TASK_LEVELING_DELAY&amp;gt;0&amp;lt;/TASK_LEVELING_DELAY&amp;gt;
    &amp;lt;TASK_LEVELING_DELAY_FMT&amp;gt;8&amp;lt;/TASK_LEVELING_DELAY_FMT&amp;gt;
    &amp;lt;TASK_LEVELING_CAN_SPLIT&amp;gt;true&amp;lt;/TASK_LEVELING_CAN_SPLIT&amp;gt;
    &amp;lt;TASK_LEVELING_ADJUSTS_ASSN&amp;gt;true&amp;lt;/TASK_LEVELING_ADJUSTS_ASSN&amp;gt;
    &amp;lt;TASK_DUR_IS_EST&amp;gt;false&amp;lt;/TASK_DUR_IS_EST&amp;gt;
    &amp;lt;TASK_DUR&amp;gt;0&amp;lt;/TASK_DUR&amp;gt;
    &amp;lt;TASK_DUR_FMT&amp;gt;53&amp;lt;/TASK_DUR_FMT&amp;gt;
    &amp;lt;TASK_DUR_VAR&amp;gt;0&amp;lt;/TASK_DUR_VAR&amp;gt;
    &amp;lt;TASK_EAC&amp;gt;0&amp;lt;/TASK_EAC&amp;gt;
    &amp;lt;TASK_VAC&amp;gt;0&amp;lt;/TASK_VAC&amp;gt;
    &amp;lt;TASK_ACT_DUR&amp;gt;0&amp;lt;/TASK_ACT_DUR&amp;gt;
    &amp;lt;TASK_REM_DUR&amp;gt;0&amp;lt;/TASK_REM_DUR&amp;gt;
    &amp;lt;TASK_CONSTRAINT_TYPE&amp;gt;0&amp;lt;/TASK_CONSTRAINT_TYPE&amp;gt;
    &amp;lt;TASK_PRIORITY&amp;gt;500&amp;lt;/TASK_PRIORITY&amp;gt;
    &amp;lt;TASK_PCT_COMP&amp;gt;0&amp;lt;/TASK_PCT_COMP&amp;gt;
    &amp;lt;TASK_PCT_WORK_COMP&amp;gt;0&amp;lt;/TASK_PCT_WORK_COMP&amp;gt;
    &amp;lt;TASK_TYPE&amp;gt;1&amp;lt;/TASK_TYPE&amp;gt;
    &amp;lt;TASK_FIXED_COST_ACCRUAL&amp;gt;3&amp;lt;/TASK_FIXED_COST_ACCRUAL&amp;gt;
    &amp;lt;TASK_WORK&amp;gt;0&amp;lt;/TASK_WORK&amp;gt;
    &amp;lt;TASK_OVT_WORK&amp;gt;0&amp;lt;/TASK_OVT_WORK&amp;gt;
    &amp;lt;TASK_REG_WORK&amp;gt;0&amp;lt;/TASK_REG_WORK&amp;gt;
    &amp;lt;TASK_ACT_WORK&amp;gt;0&amp;lt;/TASK_ACT_WORK&amp;gt;
    &amp;lt;TASK_ACT_OVT_WORK&amp;gt;0&amp;lt;/TASK_ACT_OVT_WORK&amp;gt;
    &amp;lt;TASK_REM_WORK&amp;gt;0&amp;lt;/TASK_REM_WORK&amp;gt;
    &amp;lt;TASK_REM_OVT_WORK&amp;gt;0&amp;lt;/TASK_REM_OVT_WORK&amp;gt;
    &amp;lt;TASK_COST&amp;gt;0&amp;lt;/TASK_COST&amp;gt;
    &amp;lt;TASK_OVT_COST&amp;gt;0&amp;lt;/TASK_OVT_COST&amp;gt;
    &amp;lt;TASK_FIXED_COST&amp;gt;0&amp;lt;/TASK_FIXED_COST&amp;gt;
    &amp;lt;TASK_ACT_COST&amp;gt;0&amp;lt;/TASK_ACT_COST&amp;gt;
    &amp;lt;TASK_ACT_OVT_COST&amp;gt;0&amp;lt;/TASK_ACT_OVT_COST&amp;gt;
    &amp;lt;TASK_REM_COST&amp;gt;0&amp;lt;/TASK_REM_COST&amp;gt;
    &amp;lt;TASK_REM_OVT_COST&amp;gt;0&amp;lt;/TASK_REM_OVT_COST&amp;gt;
    &amp;lt;TASK_OUTLINE_LEVEL&amp;gt;0&amp;lt;/TASK_OUTLINE_LEVEL&amp;gt;
    &amp;lt;TASK_OUTLINE_NUM /&amp;gt;
    &amp;lt;TASK_START_DATE&amp;gt;2010-06-21T08:00:00-07:00&amp;lt;/TASK_START_DATE&amp;gt;
    &amp;lt;TASK_START_VAR&amp;gt;0&amp;lt;/TASK_START_VAR&amp;gt;
    &amp;lt;TASK_FINISH_DATE&amp;gt;2010-06-21T08:00:00-07:00&amp;lt;/TASK_FINISH_DATE&amp;gt;
    &amp;lt;TASK_FINISH_VAR&amp;gt;0&amp;lt;/TASK_FINISH_VAR&amp;gt;
    &amp;lt;TASK_EARLY_START&amp;gt;2010-06-21T08:00:00-07:00&amp;lt;/TASK_EARLY_START&amp;gt;
    &amp;lt;TASK_EARLY_FINISH&amp;gt;2010-06-21T08:00:00-07:00&amp;lt;/TASK_EARLY_FINISH&amp;gt;
    &amp;lt;TASK_LATE_START&amp;gt;2010-06-21T08:00:00-07:00&amp;lt;/TASK_LATE_START&amp;gt;
    &amp;lt;TASK_LATE_FINISH&amp;gt;2010-06-21T08:00:00-07:00&amp;lt;/TASK_LATE_FINISH&amp;gt;
    &amp;lt;TASK_BCWS&amp;gt;0&amp;lt;/TASK_BCWS&amp;gt;
    &amp;lt;TASK_BCWP&amp;gt;0&amp;lt;/TASK_BCWP&amp;gt;
    &amp;lt;TASK_ACWP&amp;gt;0&amp;lt;/TASK_ACWP&amp;gt;
    &amp;lt;TASK_FREE_SLACK&amp;gt;0&amp;lt;/TASK_FREE_SLACK&amp;gt;
    &amp;lt;TASK_TOTAL_SLACK&amp;gt;0&amp;lt;/TASK_TOTAL_SLACK&amp;gt;
    &amp;lt;TASK_HAS_LINKED_FIELDS&amp;gt;false&amp;lt;/TASK_HAS_LINKED_FIELDS&amp;gt;
    &amp;lt;CREATED_DATE&amp;gt;2010-06-21T14:58:39.987-07:00&amp;lt;/CREATED_DATE&amp;gt;
    &amp;lt;MOD_DATE&amp;gt;2010-06-21T14:58:40.807-07:00&amp;lt;/MOD_DATE&amp;gt;
    &amp;lt;TASK_BUDGET_COST&amp;gt;0&amp;lt;/TASK_BUDGET_COST&amp;gt;
    &amp;lt;TASK_IS_NULL&amp;gt;false&amp;lt;/TASK_IS_NULL&amp;gt;
    &amp;lt;TASK_BUDGET_WORK&amp;gt;0&amp;lt;/TASK_BUDGET_WORK&amp;gt;
    &amp;lt;TASK_COST_VAR&amp;gt;0&amp;lt;/TASK_COST_VAR&amp;gt;
    &amp;lt;TASK_CPI&amp;gt;0&amp;lt;/TASK_CPI&amp;gt;
    &amp;lt;TASK_CV&amp;gt;0&amp;lt;/TASK_CV&amp;gt;
    &amp;lt;TASK_START_SLACK&amp;gt;0&amp;lt;/TASK_START_SLACK&amp;gt;
    &amp;lt;TASK_FINISH_SLACK&amp;gt;0&amp;lt;/TASK_FINISH_SLACK&amp;gt;
    &amp;lt;TASK_IS_ROLLED_UP&amp;gt;false&amp;lt;/TASK_IS_ROLLED_UP&amp;gt;
    &amp;lt;TASK_SV&amp;gt;0&amp;lt;/TASK_SV&amp;gt;
    &amp;lt;TASK_TCPI&amp;gt;0&amp;lt;/TASK_TCPI&amp;gt;
    &amp;lt;TASK_WORK_VAR&amp;gt;0&amp;lt;/TASK_WORK_VAR&amp;gt;
    &amp;lt;TASK_COMPLETE_THROUGH&amp;gt;2010-06-21T08:00:00-07:00&amp;lt;/TASK_COMPLETE_THROUGH&amp;gt;
    &amp;lt;TASK_IS_MANUAL&amp;gt;false&amp;lt;/TASK_IS_MANUAL&amp;gt;
    &amp;lt;TASK_IS_ACTIVE&amp;gt;true&amp;lt;/TASK_IS_ACTIVE&amp;gt;
    &amp;lt;TASK_IS_DISPSUMMARY&amp;gt;false&amp;lt;/TASK_IS_DISPSUMMARY&amp;gt;
    &amp;lt;TASK_SCHED_START&amp;gt;2010-06-21T08:00:00-07:00&amp;lt;/TASK_SCHED_START&amp;gt;
    &amp;lt;TASK_SCHED_FINISH&amp;gt;2010-06-21T08:00:00-07:00&amp;lt;/TASK_SCHED_FINISH&amp;gt;
    &amp;lt;TASK_SCHED_DUR&amp;gt;0&amp;lt;/TASK_SCHED_DUR&amp;gt;
    &amp;lt;TASK_SCHED_DUR_FMT&amp;gt;53&amp;lt;/TASK_SCHED_DUR_FMT&amp;gt;
  &amp;lt;/Task&amp;gt;
  &amp;lt;&lt;span class="label"&gt;ProjectCustomFields&lt;/span&gt;&amp;gt;
    &amp;lt;CUSTOM_FIELD_UID&amp;gt;4802a711-62a0-4f84-8e08-c7d22daadb5b&amp;lt;/CUSTOM_FIELD_UID&amp;gt;
    &amp;lt;PROJ_UID&amp;gt;e1c2d38b-1529-4128-b707-42a94045e55b&amp;lt;/PROJ_UID&amp;gt;
    &amp;lt;MD_PROP_UID&amp;gt;9d77d62a-a92e-4d40-adc8-446c90eb7456&amp;lt;/MD_PROP_UID&amp;gt;
    &amp;lt;&lt;span class="label"&gt;MD_PROP_ID&lt;/span&gt;&amp;gt;190873600&amp;lt;/MD_PROP_ID&amp;gt;
    &amp;lt;FIELD_TYPE_ENUM&amp;gt;21&amp;lt;/FIELD_TYPE_ENUM&amp;gt;
    &amp;lt;CODE_VALUE&amp;gt;a47930d6-b89d-4f3a-b4e3-522015fe82a1&amp;lt;/CODE_VALUE&amp;gt;
  &amp;lt;/ProjectCustomFields&amp;gt;
  &amp;lt;ProjectResourceCustomFields&amp;gt;
    &amp;lt;CUSTOM_FIELD_UID&amp;gt;ba309fe8-2a23-440c-9e48-bce9dd001845&amp;lt;/CUSTOM_FIELD_UID&amp;gt;
    &amp;lt;PROJ_UID&amp;gt;e1c2d38b-1529-4128-b707-42a94045e55b&amp;lt;/PROJ_UID&amp;gt;
    &amp;lt;RES_UID&amp;gt;a0cb8b7e-2a8c-436d-0000-0000000000ff&amp;lt;/RES_UID&amp;gt;
    &amp;lt;MD_PROP_UID&amp;gt;d5799183-1107-4ffa-95c1-26d5dfe2cd79&amp;lt;/MD_PROP_UID&amp;gt;
    &amp;lt;MD_PROP_ID&amp;gt;205553667&amp;lt;/MD_PROP_ID&amp;gt;
    &amp;lt;FIELD_TYPE_ENUM&amp;gt;21&amp;lt;/FIELD_TYPE_ENUM&amp;gt;
    &amp;lt;TEXT_VALUE&amp;gt; calendar&amp;lt;/TEXT_VALUE&amp;gt;
  &amp;lt;/ProjectResourceCustomFields&amp;gt;
  &amp;lt;ProjectResourceCustomFields&amp;gt;
    &amp;lt;CUSTOM_FIELD_UID&amp;gt;45bf1b3d-a695-49c9-8481-8dc2e1220c34&amp;lt;/CUSTOM_FIELD_UID&amp;gt;
    &amp;lt;PROJ_UID&amp;gt;e1c2d38b-1529-4128-b707-42a94045e55b&amp;lt;/PROJ_UID&amp;gt;
    &amp;lt;RES_UID&amp;gt;a0cb8b7e-2a8c-436d-0000-0000000000ff&amp;lt;/RES_UID&amp;gt;
    &amp;lt;MD_PROP_UID&amp;gt;09c05c93-c582-4dd9-8c44-ae9cd2471603&amp;lt;/MD_PROP_UID&amp;gt;
    &amp;lt;MD_PROP_ID&amp;gt;205553668&amp;lt;/MD_PROP_ID&amp;gt;
    &amp;lt;FIELD_TYPE_ENUM&amp;gt;21&amp;lt;/FIELD_TYPE_ENUM&amp;gt;
    &amp;lt;TEXT_VALUE&amp;gt;Cost center: &amp;lt;/TEXT_VALUE&amp;gt;
  &amp;lt;/ProjectResourceCustomFields&amp;gt;
&amp;lt;/ProjectDataSet&amp;gt;</code>
          <para>Example for ASMX:   The following example creates a project, adds some tasks to it, and then saves the project to the server.</para>
          <para>For information about running the code sample, see Prerequisites for ASMX-Based Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.QueueCreateProject
{
   class Program
   {
      [STAThread]
      static void Main(string[] args)
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";

            Guid jobId;

            // Set up the web service objects.
            SvcProject.Project projectSvc = new SvcProject.Project();

            SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();

            projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
            projectSvc.Credentials = CredentialCache.DefaultCredentials;

            SvcQueueSystem.QueueSystem q = new SvcQueueSystem.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;

            // Create a sample project.
            Console.WriteLine("Creating project data");
            projectDs = new SvcProject.ProjectDataSet();
            
            // Create the project.
            SvcProject.ProjectDataSet.ProjectRow projectRow = projectDs.Project.NewProjectRow();
            projectRow.PROJ_UID = Guid.NewGuid();
         projectRow.PROJ_NAME = "Its a wonderful project at " + 
            DateTime.Now.ToShortDateString().Replace("/", "") + " " + 
            DateTime.Now.ToShortTimeString().Replace(":", "");
            projectRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
            projectDs.Project.AddProjectRow(projectRow);

            // Add some tasks.
            SvcProject.ProjectDataSet.TaskRow taskOne = projectDs.Task.NewTaskRow();
            taskOne.PROJ_UID = projectRow.PROJ_UID;
            taskOne.TASK_UID = Guid.NewGuid();
            // The Task Duration format must be specified.
            taskOne.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
            taskOne.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)taskOne.TASK_NAME = "Task One";
            taskOne.TASK_START_DATE = System.DateTime.Now.AddDays(1);
            projectDs.Task.AddTaskRow(taskOne);

            SvcProject.ProjectDataSet.TaskRow taskTwo = projectDs.Task.NewTaskRow();
            taskTwo.PROJ_UID = projectRow.PROJ_UID;
            taskTwo.TASK_UID = Guid.NewGuid();
            // The Task Duration format must be specified.
            taskTwo.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
            taskTwo.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
            taskTwo.TASK_NAME = "Task Two";
            taskTwo.TASK_START_DATE = System.DateTime.Now.AddDays(1);
            projectDs.Task.AddTaskRow(taskTwo);

            // Save the project to the database.
            Console.WriteLine("Saving project data to the server");
            jobId = Guid.NewGuid();
            projectSvc.QueueCreateProject(jobId, projectDs, false);
            WaitForQueue(q, jobId);

         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }
      static private void WaitForQueue(SvcQueueSystem.QueueSystem q, Guid jobId)
      {
         SvcQueueSystem.JobState jobState;
         const int QUEUE_WAIT_TIME = 2; // two seconds
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         // Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Thread.Sleep(wait * 1000);
         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == SvcQueueSystem.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == SvcQueueSystem.JobState.Unknown
               || jobState == SvcQueueSystem.JobState.Failed
               || jobState == SvcQueueSystem.JobState.FailedNotBlocking
               || jobState == SvcQueueSystem.JobState.CorrelationBlocked
               || jobState == SvcQueueSystem.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request failed \"" + jobState + "\" Job ID: " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  Console.WriteLine("Job State: " + jobState + " Job ID: " + jobId);
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="QueueCreateProjectAndCheckOut">
      <MemberSignature Language="C#" Value="public void QueueCreateProjectAndCheckOut (Guid jobUid, Guid sessionUid, string sessionDescription, WebSvcProject.ProjectDataSet dataset, bool validateOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueCreateProjectAndCheckOut(valuetype System.Guid jobUid, valuetype System.Guid sessionUid, string sessionDescription, class WebSvcProject.ProjectDataSet dataset, bool validateOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueueCreateProjectAndCheckOut(System.Guid,System.Guid,System.String,WebSvcProject.ProjectDataSet,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueCreateProjectAndCheckOut (jobUid As Guid, sessionUid As Guid, sessionDescription As String, dataset As ProjectDataSet, validateOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueCreateProjectAndCheckOut(Guid jobUid, Guid sessionUid, System::String ^ sessionDescription, WebSvcProject::ProjectDataSet ^ dataset, bool validateOnly);" />
      <MemberSignature Language="F#" Value="member this.QueueCreateProjectAndCheckOut : Guid * Guid * string * WebSvcProject.ProjectDataSet * bool -&gt; unit" Usage="project.QueueCreateProjectAndCheckOut (jobUid, sessionUid, sessionDescription, dataset, validateOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueueCreateProjectAndCheckOut", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUid" Type="System.Guid" />
        <Parameter Name="sessionUid" Type="System.Guid" />
        <Parameter Name="sessionDescription" Type="System.String" />
        <Parameter Name="dataset" Type="WebSvcProject.ProjectDataSet" />
        <Parameter Name="validateOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="jobUid">The GUID of the queue job.</param>
        <param name="sessionUid">The GUID of the session in which the queue job is submitted.</param>
        <param name="sessionDescription">The description of the session.</param>
        <param name="dataset">Contains the project data.</param>
        <param name="validateOnly">If <b>true</b>, only validates the input data and does not perform the action.</param>
        <summary>Creates a project with the specified entities and keeps the project checked out in the Drafts database.</summary>
        <remarks>
          <para>Use <b>QueueCreateProjectAndCheckOut</b> when you want to make additional changes to the project in this session. This saves a call to the server. If you do not want to make additional changes, use <see cref="M:WebSvcProject.Project.QueueCreateProject(System.Guid,WebSvcProject.ProjectDataSet,System.Boolean)" />.</para>
          <para>
            <b>QueueCreateProjectAndCheckOut</b> is an asynchronous method that sends a message to the Project Server Queuing Service.</para>
          <para>
            <b>Note</b>: Because the PSI does not support Claims authentication, the <b>QueueCreateProjectAndCheckOut</b> method does not support an enterprise project type (EPT) that uses a workflow definition for Windows Workflow Foundation 4 (WF4).You can use the PSI to create projects with EPTs that either have no workflow or use a legacy WF3.5 definition. To create a project with an EPT that has a WF4 definition, use the CSOM.</para>
          <para>The <b>Project</b> class methods, such as <b>QueueCreateProjectAndCheckOut</b>, cannot create, edit, or delete cost resources. If the <b>ProjectDataSet</b> in the <paramref name="dataset" /> parameter includes a cost resource, the method returns the <b>ResourceCannotCreateCostResource</b> error 2076. You can use the <see cref="M:WebSvcResource.Resource.CreateResources(WebSvcResource.ResourceDataSet,System.Boolean,System.Boolean)" /> method to create cost resources, but <b>Resource</b> class methods cannot edit them. For more information, see What the PSI does and does not do.</para>
          <para>You cannot use the Project Server Interface (PSI) to create local custom fields in projects. However, the PSI does support editing local custom field values on tasks, resources, and assignments. </para>
          <para>When creating a <see cref="T:WebSvcProject.ProjectDataSet.TaskRow" />, you must specify <see cref="P:WebSvcProject.ProjectDataSet.TaskRow.TASK_DUR_FMT" />. Otherwise, later use of this project in Project Professional can result in unpredictable behavior, including possible data loss.</para>
          <para>Any changes made to enterprise resource properties in <see cref="T:WebSvcProject.ProjectDataSet.ProjectResourceRow" /> will be lost the next time Project Professional refreshes the data from Project Server.</para>
          <para>When you add a task to a <b>ProjectDataSet</b>, do not set the <see cref="P:WebSvcProject.ProjectDataSet.TaskRow.TASK_WBS" /> property. The <b>TASK_WBS</b> property is read-only, although it is marked as read/write in the PSI. If you add a task with the <b>TASK_WBS</b> property set to a specified value, Project Professional ignores the value set from the PSI and assigns a value according to the task outline position when you open the project. To see the result in Project Professional, check the WBS code value on the Advanced tab of the Task Information dialog box.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.NewProject" />
              </term>
              <description>Allows a user to create a new global permission on the Project Server. Applies only to regular projects, not proposals.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.OpenProject" />
              </term>
              <description>Allows a user to open a project. Category permission. Applies only to projects that are created from an enterprise template and initiated by a project detail page (PDP).</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.SaveProject" />
              </term>
              <description>Allows a user to save a project. Category permission. Applies only to projects that are initiated by a project detail page (PDP).</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.EditProjectProperties" />
              </term>
              <description>Allows a user to edit a project. Category permission. Applies only to projects that are initiated by a project detail page (PDP).</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example creates a project, saves it to the server but leaves it checked out, and then checks the project in.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.QueueCreateProjectAndCheckOut
{
   class Program
   {
      [STAThread]
      static void Main(string[] args)
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            const string SESSION_DESC = "Sample utility";

            Guid sessionId = Guid.NewGuid();
            Guid jobId;

            // Set up the web service objects.
            SvcProject.Project projectSvc = new SvcProject.Project();

            SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();

            projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
            projectSvc.Credentials = CredentialCache.DefaultCredentials;

            SvcQueueSystem.QueueSystem q = new SvcQueueSystem.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;

            // Create a sample project.
            Console.WriteLine("Creating project data");
            projectDs = new SvcProject.ProjectDataSet();

            // Create the project.
            SvcProject.ProjectDataSet.ProjectRow projectRow = projectDs.Project.NewProjectRow();
            projectRow.PROJ_UID = Guid.NewGuid();
             projectRow.PROJ_NAME = "Its a wonderful project at " + 
                DateTime.Now.ToShortDateString().Replace("/", "") + " " + 
                DateTime.Now.ToShortTimeString().Replace(":", "");
            projectRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
            projectDs.Project.AddProjectRow(projectRow);

            // Add some tasks.
            SvcProject.ProjectDataSet.TaskRow taskOne = projectDs.Task.NewTaskRow();
            taskOne.PROJ_UID = projectRow.PROJ_UID;
            taskOne.TASK_UID = Guid.NewGuid();
            taskOne.TASK_NAME = "Task One";
            taskOne.TASK_START_DATE = System.DateTime.Now.AddDays(1);
            projectDs.Task.AddTaskRow(taskOne);

            SvcProject.ProjectDataSet.TaskRow taskTwo = projectDs.Task.NewTaskRow();
            taskTwo.PROJ_UID = projectRow.PROJ_UID;
            taskTwo.TASK_UID = Guid.NewGuid();
            taskTwo.TASK_NAME = "Task Two";
            taskTwo.TASK_START_DATE = System.DateTime.Now.AddDays(1);
            projectDs.Task.AddTaskRow(taskTwo);

            // Save the project to the database.
            Console.WriteLine("Saving project data to the server and checking out");
            jobId = Guid.NewGuid();
            projectSvc.QueueCreateProjectAndCheckOut(jobId,sessionId,SESSION_DESC, projectDs, false);
            WaitForQueue(q, jobId);

            // Add your additional changes here.

            // Check in the project so that it is available for more changes.
            Console.WriteLine("Checking in the project");
            jobId = Guid.NewGuid();
            projectSvc.QueueCheckInProject(jobId,projectRow.PROJ_UID,false, sessionId, SESSION_DESC);
            WaitForQueue(q, jobId);
         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }
      static private void WaitForQueue(SvcQueueSystem.QueueSystem q, Guid jobId)
      {
         SvcQueueSystem.JobState jobState;
         const int QUEUE_WAIT_TIME = 2; // two seconds
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         // Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Thread.Sleep(wait * 1000);
         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == SvcQueueSystem.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == SvcQueueSystem.JobState.Unknown
               || jobState == SvcQueueSystem.JobState.Failed
               || jobState == SvcQueueSystem.JobState.FailedNotBlocking
               || jobState == SvcQueueSystem.JobState.CorrelationBlocked
               || jobState == SvcQueueSystem.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request failed \"" + jobState + "\" Job ID: " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  Console.WriteLine("Job State: " + jobState + " Job ID: " + jobId);
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="QueueCreateProposalProjectAndCheckout">
      <MemberSignature Language="C#" Value="public void QueueCreateProposalProjectAndCheckout (Guid jobUid, Guid sessionUid, string sessionDescription, WebSvcProject.ProjectDataSet projDS, bool validateOnly, bool publishProject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueCreateProposalProjectAndCheckout(valuetype System.Guid jobUid, valuetype System.Guid sessionUid, string sessionDescription, class WebSvcProject.ProjectDataSet projDS, bool validateOnly, bool publishProject) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueueCreateProposalProjectAndCheckout(System.Guid,System.Guid,System.String,WebSvcProject.ProjectDataSet,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueCreateProposalProjectAndCheckout (jobUid As Guid, sessionUid As Guid, sessionDescription As String, projDS As ProjectDataSet, validateOnly As Boolean, publishProject As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueCreateProposalProjectAndCheckout(Guid jobUid, Guid sessionUid, System::String ^ sessionDescription, WebSvcProject::ProjectDataSet ^ projDS, bool validateOnly, bool publishProject);" />
      <MemberSignature Language="F#" Value="member this.QueueCreateProposalProjectAndCheckout : Guid * Guid * string * WebSvcProject.ProjectDataSet * bool * bool -&gt; unit" Usage="project.QueueCreateProposalProjectAndCheckout (jobUid, sessionUid, sessionDescription, projDS, validateOnly, publishProject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueueCreateProposalProjectAndCheckout", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUid" Type="System.Guid" />
        <Parameter Name="sessionUid" Type="System.Guid" />
        <Parameter Name="sessionDescription" Type="System.String" />
        <Parameter Name="projDS" Type="WebSvcProject.ProjectDataSet" />
        <Parameter Name="validateOnly" Type="System.Boolean" />
        <Parameter Name="publishProject" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="jobUid">The GUID of the queue job.</param>
        <param name="sessionUid">The GUID of the session in which the queue job is submitted.</param>
        <param name="sessionDescription">The description of the session.</param>
        <param name="projDS">Contains the project proposal data.</param>
        <param name="validateOnly">If <b>true</b>, only validates the input data and does not perform the action.</param>
        <param name="publishProject">If <b>true</b>, saves the project to the Published database.</param>
        <summary>Deprecated in Project Server 2013.</summary>
        <remarks>
          <para>
            <b>Note</b>: Project Server 2013 handles project proposals and demand-management workflows differently than Office Project Server 2007 and does not use <b>QueueCreateProposalProjectAndCheckout</b>. </para>
          <para>In Office Project Server 2007, <b>QueueCreateProposalProjectAndCheckout</b> creates a project proposal and also creates a Proposals item in a SharePoint list to track the workflow for the proposal. For information about how <b>QueueCreateProposalProjectAndCheckout</b> works in Office Project Server 2007, see the QueueCreateProposalProjectAndCheckout method in the Project 2007 SDK.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDeleteFromProject">
      <MemberSignature Language="C#" Value="public void QueueDeleteFromProject (Guid jobUid, Guid sessionUid, Guid projectUid, Guid[] projectEntityUids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueDeleteFromProject(valuetype System.Guid jobUid, valuetype System.Guid sessionUid, valuetype System.Guid projectUid, valuetype System.Guid[] projectEntityUids) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueueDeleteFromProject(System.Guid,System.Guid,System.Guid,System.Guid[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueDeleteFromProject (jobUid As Guid, sessionUid As Guid, projectUid As Guid, projectEntityUids As Guid())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueDeleteFromProject(Guid jobUid, Guid sessionUid, Guid projectUid, cli::array &lt;Guid&gt; ^ projectEntityUids);" />
      <MemberSignature Language="F#" Value="member this.QueueDeleteFromProject : Guid * Guid * Guid * Guid[] -&gt; unit" Usage="project.QueueDeleteFromProject (jobUid, sessionUid, projectUid, projectEntityUids)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueueDeleteFromProject", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUid" Type="System.Guid" />
        <Parameter Name="sessionUid" Type="System.Guid" />
        <Parameter Name="projectUid" Type="System.Guid" />
        <Parameter Name="projectEntityUids" Type="System.Guid[]" />
      </Parameters>
      <Docs>
        <param name="jobUid">The GUID of the queue job.</param>
        <param name="sessionUid">The GUID of the session in which the queue job is submitted.</param>
        <param name="projectUid">The GUID of the project.</param>
        <param name="projectEntityUids">An array of GUIDs for the project entities to delete.</param>
        <summary>Deletes the specified project entities. </summary>
        <remarks>
          <para>
            <b>QueueDeleteFromProject</b> is an asynchronous method that sends a message to the Project Server Queuing Service.</para>
          <para>
            <b>Note</b>: QueueDeleteFromProject does not delete custom field values. For an example of how to delete a custom field, see <see cref="M:WebSvcProject.Project.QueueUpdateProject(System.Guid,System.Guid,WebSvcProject.ProjectDataSet,System.Boolean)" />.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.SaveProject" />
              </term>
              <description>Allows a user to save the specified project. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following sample code creates a sample project, saves the project to the server but leaves it checked out, and then deletes a task from the project.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.QueueDeleteFromProject
{
   class Program
   {
      [STAThread]
      static void Main(string[] args)
      {
         try
         {
            #region Setup
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            const string SESSION_DESC = "Sample utility";

            Guid sessionId = Guid.NewGuid();
            Guid jobId;

            // Set up the web service objects.
            SvcProject.Project projectSvc = new SvcProject.Project();

            SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();

            projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
            projectSvc.Credentials = CredentialCache.DefaultCredentials;

            SvcQueueSystem.QueueSystem q = new SvcQueueSystem.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;
            #endregion
            #region Create Project
            // Create the project.
            Console.WriteLine("Creating project data");
            SvcProject.ProjectDataSet.ProjectRow projectRow = projectDs.Project.NewProjectRow();
            projectRow.PROJ_UID = Guid.NewGuid();
            projectRow.PROJ_NAME = "Its a wonderful project at " + DateTime.Now.ToShortTimeString().Replace(":", "");
            projectRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
            projectDs.Project.AddProjectRow(projectRow);

            // Add some tasks.
            SvcProject.ProjectDataSet.TaskRow taskOne = projectDs.Task.NewTaskRow();
            taskOne.PROJ_UID = projectRow.PROJ_UID;
            taskOne.TASK_UID = Guid.NewGuid();
            // The Task Duration format must be specified.
            taskOne.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
            taskOne.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
            taskOne.TASK_NAME = "Task One";
            taskOne.TASK_START_DATE = System.DateTime.Now.AddDays(1);
            projectDs.Task.AddTaskRow(taskOne);

            SvcProject.ProjectDataSet.TaskRow taskTwo = projectDs.Task.NewTaskRow();
            taskTwo.PROJ_UID = projectRow.PROJ_UID;
            taskTwo.TASK_UID = Guid.NewGuid();
            // The Task Duration format must be specified.
            taskTwo.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
            taskTwo.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
            taskTwo.TASK_NAME = "Task Two";
            taskTwo.TASK_START_DATE = System.DateTime.Now.AddDays(1);
            projectDs.Task.AddTaskRow(taskTwo);

            // Save the project to the database.
            Console.WriteLine("Saving project data to the server and checking out");
            jobId = Guid.NewGuid();
            projectSvc.QueueCreateProjectAndCheckOut(jobId, sessionId, SESSION_DESC, projectDs, false);
            WaitForQueue(q, jobId);
            #endregion
            #region Delete from project
            // Delete the last task on our project.
            Console.WriteLine("Deleting a task from the project");
            jobId = Guid.NewGuid();
            projectSvc.QueueDeleteFromProject(jobId, sessionId, projectRow.PROJ_UID,new Guid[] { taskTwo.TASK_UID});
            WaitForQueue(q, jobId);
            #endregion
            #region Check in project
            // Check in the project. 
            Console.WriteLine("Checking in the project");
            jobId = Guid.NewGuid();
            projectSvc.QueueCheckInProject(jobId, projectRow.PROJ_UID, false, sessionId, SESSION_DESC);
            WaitForQueue(q, jobId);
            #endregion
         }
         #region Exception Handling and Final
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
         #endregion
      }
      static private void WaitForQueue(SvcQueueSystem.QueueSystem q, Guid jobId)
      {
         SvcQueueSystem.JobState jobState;
         const int QUEUE_WAIT_TIME = 2; // two seconds
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         // Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Thread.Sleep(wait * 1000);
         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == SvcQueueSystem.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == SvcQueueSystem.JobState.Unknown
               || jobState == SvcQueueSystem.JobState.Failed
               || jobState == SvcQueueSystem.JobState.FailedNotBlocking
               || jobState == SvcQueueSystem.JobState.CorrelationBlocked
               || jobState == SvcQueueSystem.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request failed \"" + jobState + "\" Job ID: " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  Console.WriteLine("Job State: " + jobState + " Job ID: " + jobId);
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="QueueDeleteProjects">
      <MemberSignature Language="C#" Value="public void QueueDeleteProjects (Guid jobUid, bool deleteWSS, Guid[] projectUids, bool deleteBoth);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueDeleteProjects(valuetype System.Guid jobUid, bool deleteWSS, valuetype System.Guid[] projectUids, bool deleteBoth) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueueDeleteProjects(System.Guid,System.Boolean,System.Guid[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueDeleteProjects (jobUid As Guid, deleteWSS As Boolean, projectUids As Guid(), deleteBoth As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueDeleteProjects(Guid jobUid, bool deleteWSS, cli::array &lt;Guid&gt; ^ projectUids, bool deleteBoth);" />
      <MemberSignature Language="F#" Value="member this.QueueDeleteProjects : Guid * bool * Guid[] * bool -&gt; unit" Usage="project.QueueDeleteProjects (jobUid, deleteWSS, projectUids, deleteBoth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueueDeleteProjects", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUid" Type="System.Guid" />
        <Parameter Name="deleteWSS" Type="System.Boolean" />
        <Parameter Name="projectUids" Type="System.Guid[]" />
        <Parameter Name="deleteBoth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="jobUid">The GUID of the queue job.</param>
        <param name="deleteWSS">If <b>true</b>, deletes the SharePoint site that is associated with each specified project.</param>
        <param name="projectUids">An array of project GUIDs.</param>
        <param name="deleteBoth">If <b>True</b>, deletes the projects in both the working database and the published database. If False, deletes the projects from only the published database.</param>
        <summary>Deletes one or more projects.</summary>
        <remarks>
          <para>
            <b>QueueDeleteProjects</b> is an asynchronous method that sends a message to the Project Server Queuing Service.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.CleanupProjectServerDatabase" />
              </term>
              <description>Allows a user to delete or move projects. Global permission. If a user has this permission, no other permissions are needed.Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.DeleteProject" />
              </term>
              <description>Allows a user to delete the specified projects. Category permission. </description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example creates two sample projects, publishes the projects, and then deletes them.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Threading;
using System.Diagnostics;
using System.ServiceModel;
using PSLibrary = Microsoft.Office.Project.Server.Library;
using System.Xml;

namespace Microsoft.SDK.Project.Samples.QueueDeleteProjects
{
    class Program
    {
        private static int numProjects = 2;
        private const string ENDPOINT_PROJECT = "basicHttp_Project";
        private const string ENDPOINT_QUEUESYSTEM = "basicHttp_QueueSystem";
        private static SvcProject.ProjectClient projectClient;
        private static SvcQueueSystem.QueueSystemClient queueSystemClient;

        static void Main(string[] args)
        {
            int maxSeconds2Wait = 20;       // Maximum number of seconds to wait for the queue.
            string comment = string.Empty;
            string queueError = "\n\tThe {0} queue job did not complete within {1} seconds.";

            Console.WriteLine("\nStart Time: {0}", DateTime.Now.ToString());
            Stopwatch timer = new Stopwatch();
            timer.Start();

            ConfigClientEndpoints(ENDPOINT_PROJECT);
            ConfigClientEndpoints(ENDPOINT_QUEUESYSTEM);

            // Prepare data for the specified number of projects to create.
            Guid[] projectUids = new Guid[numProjects];
            Int32 projectType = Convert.ToInt32(PSLibrary.Project.ProjectType.Project);
            SvcProject.ProjectDataSet[] projDs = new SvcProject.ProjectDataSet[numProjects];

            for (int i = 0; i &amp;lt; numProjects; i++)
            {
                projectUids[i] = Guid.NewGuid();
                projDs[i] = new SvcProject.ProjectDataSet();
                SvcProject.ProjectDataSet.ProjectRow projRow = projDs[i].Project.NewProjectRow();
                projRow.PROJ_TYPE = projectType;
                projRow.PROJ_UID = projectUids[i];
                projRow.PROJ_NAME = "QDelProjTest_" + projectUids[i].ToString();
                projDs[i].Project.AddProjectRow(projRow);
            }

            // Create and publish the projects.

            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("\nCreating {0} projects via WCF...", numProjects.ToString());
            Console.ResetColor();

            try
            {
                for (int i = 0; i &amp;lt; numProjects; i++)
                {
                    // Create the project and wait for the queue.
                    projectClient.QueueCreateProject(projectUids[i], projDs[i], false);

                    if (!Helpers.WaitForQueue(SvcQueueSystem.QueueMsgType.ProjectCreate,
                                         queueSystemClient, maxSeconds2Wait))
                    {
                        Console.WriteLine(queueError, "ProjectCreate", maxSeconds2Wait.ToString());
                    }

                    // Publish the project and wait for the queue.
                    projectClient.QueuePublish(projectUids[i], projectUids[i], true, string.Empty);

                    if (Helpers.WaitForQueue(SvcQueueSystem.QueueMsgType.ProjectPublish,
                                         queueSystemClient, maxSeconds2Wait))
                    {
                        comment = "\nProject created and published: " + projDs[i].Project[0].PROJ_NAME;
                    }
                    else
                    {
                        comment = string.Format(queueError, "ProjectPublish", maxSeconds2Wait.ToString());
                    }

                    DisplayTime(timer, comment);
                }

                // Delete the projects and wait for the queue.

                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.Write("\n\nDeleting {0} projects...\n", numProjects.ToString());
                Console.ResetColor();

                Guid deleteJobUid = Guid.NewGuid();
                projectClient.QueueDeleteProjects(deleteJobUid, true, projectUids, true);

                if (Helpers.WaitForQueue(SvcQueueSystem.QueueMsgType.ProjectDelete,
                                     queueSystemClient, maxSeconds2Wait))
                {
                    comment = "\nProjects Deleted.";
                }
                else
                {
                    comment = string.Format(queueError, "ProjectDelete", maxSeconds2Wait.ToString());
                }

                DisplayTime(timer, comment);
            }

            // Use the WCF FaultException, because the ASMX SoapException does not 
            // exist in a WCF-based application.

            catch (FaultException fault)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                WriteFaultOutput(fault);

                Console.ForegroundColor = ConsoleColor.Yellow;
                comment = "\nTotal RunTime: ";
                DisplayTime(timer, comment);
                Console.ResetColor();
            }
            finally
            {
                Console.Write("\nPress any key to exit... ");
                Console.ReadKey(true);
            }
        }

        public static void DisplayTime(Stopwatch timer, string comment)
        {
            // Pause the timer and display the current accumulated time in seconds.
            timer.Stop();
            TimeSpan ts = timer.Elapsed;
            string elapsedTime = String.Format("\n\tElapsed time: {0:F4} seconds ({1:F2} minutes) ", 
                ts.TotalSeconds, ts.TotalMinutes);
            Console.WriteLine(comment + elapsedTime);
            timer.Start();
        }

        // Use the endpoints defined in app.config to configure the client.
        public static void ConfigClientEndpoints(string endpt)
        {
            if (endpt == ENDPOINT_PROJECT)
                projectClient = new SvcProject.ProjectClient(endpt);
            else if (endpt == ENDPOINT_QUEUESYSTEM)
                queueSystemClient = new SvcQueueSystem.QueueSystemClient(endpt);
        }
        // Extract a PSClientError object from the WCF FaultException object, and
        // then display the exception details and each error in the PSClientError stack.
        private static void WriteFaultOutput(FaultException fault)
        {
            string errAttributeName;
            string errAttribute;
            string errOut;
            string errMess = "".PadRight(30, '=') + "\r\n"
                + "Error details: \n" + "\r\n";

            PSLibrary.PSClientError error = Helpers.GetPSClientError(fault, out errOut);
            errMess += errOut;

            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            PSLibrary.PSErrorInfo thisError;

            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
                thisError = errors[i];
                errMess += "\r\n".PadRight(30, '=') + "\r\nPSClientError output:\r\n\n";
                errMess += thisError.ErrId.ToString() + "\n";

                for (int j = 0; j &amp;lt; thisError.ErrorAttributes.Length; j++)
                {
                    errAttributeName = thisError.ErrorAttributeNames()[j];
                    errAttribute = thisError.ErrorAttributes[j];
                    errMess += "\r\n\t" + errAttributeName
                        + ": " + errAttribute;
                }
            }

            Console.WriteLine(errMess);
        }
    }


    class Helpers
    {
        // Helper method: GetPSClientError.         
        /// &amp;lt;summary&amp;gt;
        /// Extract a PSClientError object from the ServiceModel.FaultException,
        /// for use in output of the GetPSClientError stack of errors.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="e"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name="errOut"&amp;gt;Shows that FaultException has more information 
        /// about the errors than PSClientError has. FaultException can also contain 
        /// other types of errors, such as failure to connect to the server.&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;PSClientError object, for enumerating errors.&amp;lt;/returns&amp;gt;
        public static PSLibrary.PSClientError GetPSClientError(FaultException e,
                                                               out string errOut)
        {
            const string PREFIX = "GetPSClientError() returns null: ";
            errOut = string.Empty;
            PSLibrary.PSClientError psClientError = null;

            if (e == null)
            {
                errOut = PREFIX + "Null parameter (FaultException e) passed in.";
                psClientError = null;
            }
            else
            {
                // Get a ServiceModel.MessageFault object.
                var messageFault = e.CreateMessageFault();

                if (messageFault.HasDetail)
                {
                    using (var xmlReader = messageFault.GetReaderAtDetailContents())
                    {
                        var xml = new XmlDocument();
                        xml.Load(xmlReader);

                        var serverExecutionFault = xml["ServerExecutionFault"];
                        if (serverExecutionFault != null)
                        {
                            var exceptionDetails = serverExecutionFault["ExceptionDetails"];
                            if (exceptionDetails != null)
                            {
                                try
                                {
                                    errOut = exceptionDetails.InnerXml + "\r\n";
                                    psClientError =
                                        new PSLibrary.PSClientError(exceptionDetails.InnerXml);
                                }
                                catch (InvalidOperationException ex)
                                {
                                    errOut = PREFIX + "Unable to convert fault exception info ";
                                    errOut += "a valid Project Server error message. Message: \n\t";
                                    errOut += ex.Message;
                                    psClientError = null;
                                }
                            }
                            else
                            {
                                errOut = PREFIX + "The FaultException e is a ServerExecutionFault, "
                                    + "but does not have ExceptionDetails.";
                            }
                        }
                        else
                        {
                            errOut = PREFIX + "The FaultException e is not a ServerExecutionFault.";
                        }
                    }
                }
                else // No detail in the MessageFault.
                {
                    errOut = PREFIX + "The FaultException e does not have any detail.";
                }
            }
            errOut += "\r\n" + e.ToString() + "\r\n";
            return psClientError;
        }

        public static bool WaitForQueue(SvcQueueSystem.QueueMsgType jobType, 
                                        SvcQueueSystem.QueueSystemClient queueSystemClient,
                                        int maxSeconds)
        {
            int numJobs = 1;         // Number of jobs in the queue, of the same type; one in this example.
            bool completed = false;  // Queue job completed.
            DateTime startTime = DateTime.Now;
            SvcQueueSystem.QueueStatusDataSet queueStatusDs = new SvcQueueSystem.QueueStatusDataSet();

            int timeout = 0;         // Number of seconds waited.
            Console.Write("\nWaiting for job " + jobType.ToString());

            SvcQueueSystem.QueueMsgType[] messageTypes = { jobType };
            SvcQueueSystem.JobState[] jobStates = { SvcQueueSystem.JobState.Success };

            while ((timeout &amp;lt; maxSeconds) &amp;amp;&amp;amp; (queueStatusDs.Status.Count &amp;lt; numJobs))
            {
                System.Threading.Thread.Sleep(1000);    // Sleep one second.

                queueStatusDs = queueSystemClient.ReadMyJobStatus(
                    messageTypes,
                    jobStates,
                    startTime,
                    DateTime.Now,
                    numJobs,
                    true,
                    SvcQueueSystem.SortColumn.QueuePosition,
                    SvcQueueSystem.SortOrder.LastOrder);

                timeout++;
                Console.Write(".");
            }
            //Console.WriteLine("\n\tQueue Correlation GUID: {0}\n", 
            //    queueStatusDs.Status[0].CorrelationGUID.ToString());

            if (queueStatusDs.Status.Count == numJobs)
            {
                completed = true;
            }
            return completed;
        }
    }
}
</code>
          <para>Following is the output from the program. It shows that two projects have been created, published, and deleted in the elapsed time.</para>
          <code>
Start Time: 5/12/2011 1:05:27 PM

Creating 2 projects via WCF...

Waiting for job ProjectCreate.
Waiting for job ProjectPublish.
Project created and published: QDelProjTest_057714bf-acf6-4d62-ab3d-d50f88704f5b

        Elapsed time: 4.0213 seconds (0.07 minutes)

Waiting for job ProjectCreate.
Waiting for job ProjectPublish.
Project created and published: QDelProjTest_3e92d726-59df-4cb7-943a-39970fc90ae9

        Elapsed time: 6.8441 seconds (0.11 minutes)


Deleting 2 projects...

Waiting for job ProjectDelete.
Projects Deleted.
        Elapsed time: 8.3478 seconds (0.14 minutes)

Press any key to exit...
</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="QueueImportTaskLists">
      <MemberSignature Language="C#" Value="public WebSvcProject.ImportResult[] QueueImportTaskLists (WebSvcProject.TaskListImportInfo[] taskListImportInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcProject.ImportResult[] QueueImportTaskLists(class WebSvcProject.TaskListImportInfo[] taskListImportInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueueImportTaskLists(WebSvcProject.TaskListImportInfo[])" />
      <MemberSignature Language="VB.NET" Value="Public Function QueueImportTaskLists (taskListImportInfo As TaskListImportInfo()) As ImportResult()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;WebSvcProject::ImportResult ^&gt; ^ QueueImportTaskLists(cli::array &lt;WebSvcProject::TaskListImportInfo ^&gt; ^ taskListImportInfo);" />
      <MemberSignature Language="F#" Value="member this.QueueImportTaskLists : WebSvcProject.TaskListImportInfo[] -&gt; WebSvcProject.ImportResult[]" Usage="project.QueueImportTaskLists taskListImportInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueueImportTaskLists", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcProject.ImportResult[]</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Xml.Serialization.XmlArrayItem(IsNullable=false)</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskListImportInfo" Type="WebSvcProject.TaskListImportInfo[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.Xml.Serialization.XmlArrayItem(IsNullable=false)</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="taskListImportInfo">Array of task list information objects, where each object includes the list GUID, web GUID, and project name.</param>
        <summary>Import the specified SharePoint task lists as new visibility projects.</summary>
        <returns>Array of import result objects for the imported projects, where each object includes the error list and Project Server Queue job GUID.</returns>
        <remarks>
          <para>A visibility project is visible in Project Web App, but the project management is maintained within SharePoint.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.NewProject" />
              </term>
              <description>Allows a user to create a new project. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuePublish">
      <MemberSignature Language="C#" Value="public WebSvcProject.ProjectRelationsDataSet QueuePublish (Guid jobUid, Guid projectUid, bool fullPublish, string WssURL);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcProject.ProjectRelationsDataSet QueuePublish(valuetype System.Guid jobUid, valuetype System.Guid projectUid, bool fullPublish, string WssURL) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueuePublish(System.Guid,System.Guid,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function QueuePublish (jobUid As Guid, projectUid As Guid, fullPublish As Boolean, WssURL As String) As ProjectRelationsDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcProject::ProjectRelationsDataSet ^ QueuePublish(Guid jobUid, Guid projectUid, bool fullPublish, System::String ^ WssURL);" />
      <MemberSignature Language="F#" Value="member this.QueuePublish : Guid * Guid * bool * string -&gt; WebSvcProject.ProjectRelationsDataSet" Usage="project.QueuePublish (jobUid, projectUid, fullPublish, WssURL)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueuePublish", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcProject.ProjectRelationsDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUid" Type="System.Guid" />
        <Parameter Name="projectUid" Type="System.Guid" />
        <Parameter Name="fullPublish" Type="System.Boolean" />
        <Parameter Name="WssURL" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="jobUid">The GUID of the queue job.</param>
        <param name="projectUid">The GUID of the project.</param>
        <param name="fullPublish">If <b>True</b>, removes any previous data saved for this project in the Published database before publishing.</param>
        <param name="WssURL">The URL of the SharePoint site to be created for the project.</param>
        <summary>Moves the project from the Drafts database and saves it to the Published database. </summary>
        <returns>Contains information about any parent projects that contain the current project as a subproject.</returns>
        <remarks>
          <para>
            <b>QueuePublish</b> is an asynchronous method that sends a publish message to the Project Server Queuing Service. </para>
          <para>Following are options for the <paramref name="WssURL" /> parameter:</para>
          <list type="bullet">
            <item>
              <description>If <paramref name="WssURL" /> is a null value, <b>QueuePublish</b> does not create a project site for the published project. </description>
            </item>
            <item>
              <description>If <paramref name="WssURL" /> is <b>String.Empty</b>, <b>QueuePublish</b> creates the default project site with the name of the project. For example, if the base project team site is http://ServerName and the project name is Project Name, the project project site home page is http://ServerName/Project%20Name/default.aspx.</description>
            </item>
            <item>
              <description>If <paramref name="WssURL" /> is <b>New Name</b>, the project project site name is New Name instead of the project name.</description>
            </item>
            <item>
              <description>If <paramref name="WssURL" /> is <b>subsite/Project Name</b>, the subsite must exist in the SharePoint farm. If the subsite does not exist, Project Server returns error 16407 (<b>WSSWebHierarchyDoesNotExist</b>). </description>
            </item>
          </list>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.PublishProject" />
              </term>
              <description>Allows a user to publish the specified project. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example creates a sample project and then publishes it.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.QueuePublish
{
   class Program
   {
      [STAThread]
      static void Main(string[] args)
      {
         try
         {
            #region Setup
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";

            Guid jobId;

            // Set up the web service objects.
            SvcProject.Project projectSvc = new SvcProject.Project();

            SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();

            projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
            projectSvc.Credentials = CredentialCache.DefaultCredentials;

            SvcQueueSystem.QueueSystem q = new SvcQueueSystem.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;

            // Create a sample project.
            Console.WriteLine("Creating sample project");
            Guid projectId = CreateSampleProject(projectSvc, q);
            #endregion
            #region Publish Project
            // Publish the project.
            Console.WriteLine("Publishing project");
            jobId = Guid.NewGuid();
            projectSvc.QueuePublish(jobId, projectId, true, String.Empty);
            WaitForQueue(q, jobId);
            #endregion
         }
         #region Exceptions and Final
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
         #endregion
      }
      static private void WaitForQueue(SvcQueueSystem.QueueSystem q, Guid jobId)
      {
         SvcQueueSystem.JobState jobState;
         const int QUEUE_WAIT_TIME = 2; // two seconds
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         // Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Thread.Sleep(wait * 1000);
         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == SvcQueueSystem.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == SvcQueueSystem.JobState.Unknown
               || jobState == SvcQueueSystem.JobState.Failed
               || jobState == SvcQueueSystem.JobState.FailedNotBlocking
               || jobState == SvcQueueSystem.JobState.CorrelationBlocked
               || jobState == SvcQueueSystem.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
      }
      static private Guid CreateSampleProject(SvcProject.Project projectSvc, SvcQueueSystem.QueueSystem q)
      {
         SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();
         Guid jobId;
         // Create the project.
         SvcProject.ProjectDataSet.ProjectRow projectRow = projectDs.Project.NewProjectRow();
         projectRow.PROJ_UID = Guid.NewGuid();
         projectRow.PROJ_NAME = "Its a wonderful project at " + 
            DateTime.Now.ToShortDateString().Replace("/", "") + " " + 
            DateTime.Now.ToShortTimeString().Replace(":", "");
         projectRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
         projectDs.Project.AddProjectRow(projectRow);


         // Add some tasks.
         SvcProject.ProjectDataSet.TaskRow taskOne = projectDs.Task.NewTaskRow();
         taskOne.PROJ_UID = projectRow.PROJ_UID;
         taskOne.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskOne.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskOne.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskOne.TASK_NAME = "Task One";
         taskOne.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskOne);

         SvcProject.ProjectDataSet.TaskRow taskTwo = projectDs.Task.NewTaskRow();
         taskTwo.PROJ_UID = projectRow.PROJ_UID;
         taskTwo.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskTwo.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskTwo.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskTwo.TASK_NAME = "Task Two";
         taskTwo.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskTwo);

         // Save the project to the database.
         jobId = Guid.NewGuid();
         projectSvc.QueueCreateProject(jobId, projectDs, false);
         WaitForQueue(q, jobId);
         return projectRow.PROJ_UID;
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="QueuePublishSummary">
      <MemberSignature Language="C#" Value="public WebSvcProject.ProjectRelationsDataSet QueuePublishSummary (Guid jobUid, Guid projectUid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcProject.ProjectRelationsDataSet QueuePublishSummary(valuetype System.Guid jobUid, valuetype System.Guid projectUid) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueuePublishSummary(System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function QueuePublishSummary (jobUid As Guid, projectUid As Guid) As ProjectRelationsDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcProject::ProjectRelationsDataSet ^ QueuePublishSummary(Guid jobUid, Guid projectUid);" />
      <MemberSignature Language="F#" Value="member this.QueuePublishSummary : Guid * Guid -&gt; WebSvcProject.ProjectRelationsDataSet" Usage="project.QueuePublishSummary (jobUid, projectUid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueuePublishSummary", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcProject.ProjectRelationsDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUid" Type="System.Guid" />
        <Parameter Name="projectUid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="jobUid">The GUID of the queue job.</param>
        <param name="projectUid">The GUID of the project.</param>
        <summary>Publishes the stage summaries of the specified project, in a partial publish operation.</summary>
        <returns>The <b>ProjectRelationsDataSet</b> is empty when doing a partial publish of stage summaries. It is returned to provide parity with the <b>QueuePublish</b> method.</returns>
        <remarks>
          <para>The <b>QueuePublishSummary</b> method checks whether the Published database contains a lower version number of the project than the Drafts database. If so, <b>QueuePublishSummary</b> calls <see cref="M:WebSvcProject.Project.QueuePublish(System.Guid,System.Guid,System.Boolean,System.String)" /> to do a full publish.</para>
          <para>
            <b>QueuePublishSummary</b> is a new method in Project Server 2013. <b>QueuePublishSummary</b> is an asynchronous method that sends a publish summary message to the Project Server queue.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.EditProjectProperties" />
              </term>
              <description>Allows a user to edit the new project. Category permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.SaveProject" />
              </term>
              <description>Allows a user to save the specified project. Category permission.</description>
            </item>
          </list>
          <para>If the user does not have both permissions, Project Server issues a <see cref="F:Microsoft.Office.Project.Server.Library.PSErrorID.GeneralSecurityAccessDenied" /> error.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueRenameProject">
      <MemberSignature Language="C#" Value="public void QueueRenameProject (Guid jobUid, Guid sessionUid, Guid projectUid, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueRenameProject(valuetype System.Guid jobUid, valuetype System.Guid sessionUid, valuetype System.Guid projectUid, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueueRenameProject(System.Guid,System.Guid,System.Guid,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueRenameProject (jobUid As Guid, sessionUid As Guid, projectUid As Guid, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueRenameProject(Guid jobUid, Guid sessionUid, Guid projectUid, System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.QueueRenameProject : Guid * Guid * Guid * string -&gt; unit" Usage="project.QueueRenameProject (jobUid, sessionUid, projectUid, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueueRenameProject", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUid" Type="System.Guid" />
        <Parameter Name="sessionUid" Type="System.Guid" />
        <Parameter Name="projectUid" Type="System.Guid" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="jobUid">The GUID of the queue job.</param>
        <param name="sessionUid">The GUID of the session in which the queue job is submitted.</param>
        <param name="projectUid">The GUID of the project.</param>
        <param name="name">The new project name.</param>
        <summary>Renames the specified project.</summary>
        <remarks>
          <para>
            <b>QueueRenameProject</b> is an asynchronous method that sends a message to the Project Server Queuing Service.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.SaveProject" />
              </term>
              <description>Allows a user to save the specified project. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example creates a sample project, checks it out, renames it, and then checks it back in.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Threading;
using System.Web.Services.Protocols;
using PSLibrary = Microsoft.Office.Project.Server.Library;
[assembly: CLSCompliant(true)]
namespace Microsoft.SDK.Project.Samples.CheckOutProject
{
   class Program
   {
      [STAThread]
      static void Main(string[] args)
      {
         try
         {
            #region Setup
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";

            Guid jobId;
            Guid sessionId = Guid.NewGuid();
            const string SESSION_DESCRIPTION = "Check out sample utility";

            // Set up the web service objects.
            SvcProject.Project projectSvc = new SvcProject.Project();

            projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
            projectSvc.UseDefaultCredentials = true;

            SvcQueueSystem.QueueSystem q = new SvcQueueSystem.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;
 
            // Create a sample project.
            Console.WriteLine("Creating sample project");
            Guid projectId = CreateSampleProject(projectSvc, q);
            Console.WriteLine("Created Project UID: " + projectId.ToString());
            #endregion
            #region Check out, rename, and check in
            // Check out the project.
            // The session ID is used later to check in the project. 
            Console.WriteLine("Checking out sample project");
            projectSvc.CheckOutProject(projectId, sessionId, SESSION_DESCRIPTION);
           
            // Rename the project. 
            Console.WriteLine("Renaming the project");
            jobId = Guid.NewGuid();
            projectSvc.QueueRenameProject(jobId, sessionId, projectId, "My Renamed Project at " + DateTime.Now.ToShortTimeString().Replace(":", ""));
            WaitForQueue(q, jobId);

            // Check in the project. 
            Console.WriteLine("Checking in the project");
            jobId = Guid.NewGuid();
            projectSvc.QueueCheckInProject(jobId, projectId, false, sessionId, SESSION_DESCRIPTION);
            WaitForQueue(q, jobId);
            #endregion
         }
         #region Exception handling
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         #endregion
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }
      static private void WaitForQueue(SvcQueueSystem.QueueSystem q, Guid jobId)
      {
         SvcQueueSystem.JobState jobState;
         const int QUEUE_WAIT_TIME = 2; // two seconds
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         // Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Thread.Sleep(wait * 1000);
         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == SvcQueueSystem.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == SvcQueueSystem.JobState.Unknown
               || jobState == SvcQueueSystem.JobState.Failed
               || jobState == SvcQueueSystem.JobState.FailedNotBlocking
               || jobState == SvcQueueSystem.JobState.CorrelationBlocked
               || jobState == SvcQueueSystem.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request failed \"" + jobState + "\" Job ID: " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  Console.WriteLine("Job State: " + jobState + " Job ID: " + jobId);
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
      }
      static private Guid CreateSampleProject(SvcProject.Project projectSvc, SvcQueueSystem.QueueSystem q)
      {
         SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();
         Guid jobId;
         // Create the project.
         SvcProject.ProjectDataSet.ProjectRow projectRow = projectDs.Project.NewProjectRow();
         projectRow.PROJ_UID = Guid.NewGuid();
         projectRow.PROJ_NAME = "Its a wonderful project at " + 
            DateTime.Now.ToShortDateString().Replace("/", "") + " " + 
            DateTime.Now.ToShortTimeString().Replace(":", "");
         projectRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
         projectDs.Project.AddProjectRow(projectRow);

         // Add some tasks.
         SvcProject.ProjectDataSet.TaskRow taskOne = projectDs.Task.NewTaskRow();
         taskOne.PROJ_UID = projectRow.PROJ_UID;
         taskOne.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskOne.TASK_DUR_FMT =(int) PSLibrary.Task.DurationFormat.Day;
         taskOne.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskOne.TASK_NAME = "Task One";
         taskOne.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskOne);

         SvcProject.ProjectDataSet.TaskRow taskTwo = projectDs.Task.NewTaskRow();
         taskTwo.PROJ_UID = projectRow.PROJ_UID;
         taskTwo.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskTwo.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskTwo.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskTwo.TASK_NAME = "Task Two";
         taskTwo.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskTwo);

         // Save the project to the database.
         jobId = Guid.NewGuid();
         projectSvc.QueueCreateProject(jobId, projectDs, false);
         WaitForQueue(q, jobId);
         return projectRow.PROJ_UID;
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="QueueSynchronizeProjectWorkspace">
      <MemberSignature Language="C#" Value="public void QueueSynchronizeProjectWorkspace (Guid jobUid, Guid projectUid, bool forceFullSync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueSynchronizeProjectWorkspace(valuetype System.Guid jobUid, valuetype System.Guid projectUid, bool forceFullSync) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueueSynchronizeProjectWorkspace(System.Guid,System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueSynchronizeProjectWorkspace (jobUid As Guid, projectUid As Guid, forceFullSync As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueSynchronizeProjectWorkspace(Guid jobUid, Guid projectUid, bool forceFullSync);" />
      <MemberSignature Language="F#" Value="member this.QueueSynchronizeProjectWorkspace : Guid * Guid * bool -&gt; unit" Usage="project.QueueSynchronizeProjectWorkspace (jobUid, projectUid, forceFullSync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueueSynchronizeProjectWorkspace", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUid" Type="System.Guid" />
        <Parameter Name="projectUid" Type="System.Guid" />
        <Parameter Name="forceFullSync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="jobUid">The GUID of the queue job.</param>
        <param name="projectUid">The GUID of the project.</param>
        <param name="forceFullSync">If <b>true</b>, forces full synchronization.</param>
        <summary>Synchronizes the SharePoint data in the Reporting database for the specified project.</summary>
        <remarks>
          <para>
            <b>QueueSynchronizeProjectWorkspace</b> is an asynchronous method that sends a message to the Project Server Queuing Service.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.PublishProject" />
              </term>
              <description>Allows a user to publish the specified project. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example creates a sample project, creates a project site for it while publishing it, and then synchronizes the project site information with the reporting database.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Web.Services.Protocols;
using System.Threading;
using System.Data;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.QueueSynchronizeProjectWorkspace
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            #region Setup
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";

            Guid sessionId = Guid.NewGuid();
            Guid jobId;

            // Set up the web service objects.
            SvcProject.Project projectSvc = new SvcProject.Project();

            projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
            projectSvc.Credentials = CredentialCache.DefaultCredentials;

            SvcQueueSystem.QueueSystem q = new SvcQueueSystem.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.Credentials = CredentialCache.DefaultCredentials;

            // Create a sample project.
            Console.WriteLine("Creating sample project");

            Guid projectId = CreateSampleProject(projectSvc, q);

            // Publish the project and create a workspace for it.
            // Note: A blank workspace name will cause Project Server to 
            //       create a workspace name from the project name.
            Console.WriteLine("Publishing and creating a workspace");
            jobId = Guid.NewGuid();
            projectSvc.QueuePublish(jobId, projectId, true, string.Empty);
            WaitForQueue(q, jobId);
            #endregion
            #region Synchronize Project Workspace
            // Synchronize the project in the Reporting database.
            Console.WriteLine("Synchronizing workspace info with the reporting database");
            jobId = Guid.NewGuid();
            projectSvc.QueueSynchronizeProjectWorkspace(jobId, projectId, true);
            WaitForQueue(q, jobId);
            #endregion

         }
         #region Exception Handling and Final
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
         #endregion
      }
       static private void WaitForQueue(SvcQueueSystem.QueueSystem q, Guid jobId)
      {
         SvcQueueSystem.JobState jobState;
         const int QUEUE_WAIT_TIME = 2; // two seconds
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         // Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Thread.Sleep(wait * 1000);
         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == SvcQueueSystem.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == SvcQueueSystem.JobState.Unknown
               || jobState == SvcQueueSystem.JobState.Failed
               || jobState == SvcQueueSystem.JobState.FailedNotBlocking
               || jobState == SvcQueueSystem.JobState.CorrelationBlocked
               || jobState == SvcQueueSystem.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
      }
      static private Guid CreateSampleProject(SvcProject.Project projectSvc, SvcQueueSystem.QueueSystem q)
      {
         SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();
         Guid jobId;
         // Create the project.
         SvcProject.ProjectDataSet.ProjectRow projectRow = projectDs.Project.NewProjectRow();
         projectRow.PROJ_UID = Guid.NewGuid();
         projectRow.PROJ_NAME = "Its a wonderful project at " + 
            DateTime.Now.ToShortDateString().Replace("/", "") + " " + 
            DateTime.Now.ToShortTimeString().Replace(":", "");
         projectRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
         projectDs.Project.AddProjectRow(projectRow);

         // Add some tasks.
         SvcProject.ProjectDataSet.TaskRow taskOne = projectDs.Task.NewTaskRow();
         taskOne.PROJ_UID = projectRow.PROJ_UID;
         taskOne.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskOne.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskOne.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskOne.TASK_NAME = "Task One";
         taskOne.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskOne);

         SvcProject.ProjectDataSet.TaskRow taskTwo = projectDs.Task.NewTaskRow();
         taskTwo.PROJ_UID = projectRow.PROJ_UID;
         taskTwo.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskTwo.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskTwo.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskTwo.TASK_NAME = "Task Two";
         taskTwo.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskTwo);

         // Save the project to the database.
         jobId = Guid.NewGuid();
         projectSvc.QueueCreateProject(jobId, projectDs, false);
         WaitForQueue(q, jobId);
         return projectRow.PROJ_UID;
      }

   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="QueueUpdateProject">
      <MemberSignature Language="C#" Value="public void QueueUpdateProject (Guid jobUid, Guid sessionUid, WebSvcProject.ProjectDataSet dataset, bool validateOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueUpdateProject(valuetype System.Guid jobUid, valuetype System.Guid sessionUid, class WebSvcProject.ProjectDataSet dataset, bool validateOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueueUpdateProject(System.Guid,System.Guid,WebSvcProject.ProjectDataSet,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueUpdateProject (jobUid As Guid, sessionUid As Guid, dataset As ProjectDataSet, validateOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueUpdateProject(Guid jobUid, Guid sessionUid, WebSvcProject::ProjectDataSet ^ dataset, bool validateOnly);" />
      <MemberSignature Language="F#" Value="member this.QueueUpdateProject : Guid * Guid * WebSvcProject.ProjectDataSet * bool -&gt; unit" Usage="project.QueueUpdateProject (jobUid, sessionUid, dataset, validateOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueueUpdateProject", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUid" Type="System.Guid" />
        <Parameter Name="sessionUid" Type="System.Guid" />
        <Parameter Name="dataset" Type="WebSvcProject.ProjectDataSet" />
        <Parameter Name="validateOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="jobUid">The GUID of the queue job.</param>
        <param name="sessionUid">The GUID of the session in which the queue job is submitted.</param>
        <param name="dataset">Contains the project entities to update.</param>
        <param name="validateOnly">If <b>true</b>, only validates the input data and does not perform the action.</param>
        <summary>Updates entities in a checked-out project. Also adds, modifies, or deletes custom field values.</summary>
        <remarks>
          <para>
            <b>QueueUpdateProject</b> does not create or delete project entities; it modifies existing entities such as tasks, assignments, and project resources. <b>QueueUpdateProject</b> can also add, modify, or delete custom field values in a project, but cannot create or delete a custom field itself (use <b>CreateCustomFields</b> or <b>DeleteCustomFields</b>). <b>QueueUpdateProject</b> is an asynchronous method that sends a message to the Project Server Queuing Service. </para>
          <para>The <b>Project</b> class methods, such as <b>QueueUpdateProject</b>, cannot create, edit, or delete cost resources. If the <b>ProjectDataSet</b> in the <paramref name="dataset" /> parameter includes a cost resource, the method returns the <b>ProjectCannotEditCostResource</b> error 1050. You can use the <see cref="M:WebSvcResource.Resource.CreateResources(WebSvcResource.ResourceDataSet,System.Boolean,System.Boolean)" /> method to create cost resources, but <b>Resource</b> class methods cannot edit them. For more information, see What the PSI does and does not do.</para>
          <para>
            <b>Note</b>: When you create or update a project, the PSI can process up to 1000 rows of data at the same time. If the total number of rows of new or updated data in all tables of <see cref="T:WebSvcProject.ProjectDataSet" /> exceeds 1000, the PSI returns the <see cref="F:Microsoft.Office.Project.Server.Library.PSErrorID.ProjectExceededItemsLimit" /> error.When creating a <see cref="T:WebSvcProject.ProjectDataSet.TaskRow" />, you must specify <see cref="P:WebSvcProject.ProjectDataSet.TaskRow.TASK_DUR_FMT" />. Otherwise, later use of the project in Project Professional can result in unpredictable behavior, including possible data loss.Any changes made to enterprise resource properties in <see cref="T:WebSvcProject.ProjectDataSet.ProjectResourceRow" /> will be lost the next time Project Professional refreshes the data from Project Server.</para>
          <para>When you modify a task in a <b>ProjectDataSet</b>, do not set the <see cref="P:WebSvcProject.ProjectDataSet.TaskRow.TASK_WBS" /> property. The <b>TASK_WBS</b> property is read-only, although it is marked as read/write in the PSI. If you add a task with the <b>TASK_WBS</b> property set to a specified value, Project Professional ignores the value set from the PSI and assigns a value according to the task outline position when you open the project. To see the result in Project Professional, check the WBS code value on the Advanced tab of the Task Information dialog box.</para>
          <para>
            <b>QueueUpdateProject</b> cannot change a a null reference (Nothing in Visual Basic) task to a real task. For example, if you create tasks by using Project Professional and leave one or more empty lines between some of the tasks, the empty lines are a null reference (Nothing in Visual Basic) tasks.</para>
          <para>Changing the TASK_IS_ACTIVE Property</para>
          <para>The Project Server scheduling engine can show inconsistent start or finish times when you use the <b>QueueUpdateProject</b> method to change the active status of a task, if there are multiple changes in the <b>ProjectDataSet</b> object for the <paramref name="dataset" /> parameter. If the <b>TASK_IS_ACTIVE</b> property is the only change in the <paramref name="dataset" /> parameter, you can update the project.</para>
          <para>For more information, see the Project Scheduling on the Server section in Project Server Programmability.</para>
          <para>Changing the TASK_OUTLINE_LEVEL Property</para>
          <para>If you try to change the <b>TASK_OUTLINE_LEVEL</b>, you can get a <b>ProjectSchedulingEngineException</b> error from the Project Server Queuing Service. The error contents include exception="Microsoft.Office.Project.Scheduling.SchedulingCycleException: Cycle detected … . The Project Server scheduling engine does not handle bulk edits where you change the <b>TASK_OUTLINE_LEVEL</b> or change a task with a Start-to-Finish (SF) link into a summary task. A workaround is to check the Project Server Queue and handle the specific value in the <b>QueueStatusDataSet.Status</b> table. The following example modifies the <b>WaitForQueueJobCompletion</b> method in the ProjTool application (see Using the ProjTool Test Application). The modification uses <b>ReadJobStatus</b> in the <b>QueueSystem</b> web service and shows an appropriate message.</para>
          <code>SvcQueueSystem.QueueStatusDataSet queueStatusDataSet = 
    new SvcQueueSystem.QueueStatusDataSet();
. . .
queueStatusDataSet = queueSystem.ReadJobStatus(queueStatusRequestDataSet, false,
    SvcQueueSystem.SortColumn.Undefined, SvcQueueSystem.SortOrder.Undefined);

foreach (SvcQueueSystem.QueueStatusDataSet.StatusRow statusRow in queueStatusDataSet.Status)
{
    if ((statusRow["ErrorInfo"] != System.DBNull.Value 
        &amp;amp;&amp;amp; checkStatusRowHasError(statusRow["ErrorInfo"].ToString()) == true) 
        || statusRow.JobCompletionState == blockedState 
        || statusRow.JobCompletionState == failedState)
    {
        if (statusRow.ErrorInfo.Contains("SchedulingCycleException"))
        {
            string schedulingError = 
                "The Project Server Queue reported an error in the scheduling engine.\n";
            scheculingError += "The scheduling engine cannot change the TASK_OUTLINE_LEVEL\n";
            schedulingError += "or change a task with a Start-to-Finish (SF) link into a summary task.\n";
            schedulingError += "Use Project Professional to make those types of changes.";
            MessageBox.Show(schedulingError, "Queue Error", 
                MessageBoxButtons.OK, MessageBoxIcon.Warning);
        }
        else
        {
            MessageBox.Show(AppendErrorString(statusRow.ErrorInfo), "Queue Error" , 
                MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    . . .
}</code>
          <para>Deleting Custom Field Values</para>
          <para>Use <b>QueueUpdateProject</b> instead of <b>QueueDeleteFromProject</b> to delete custom field values from a project. The correct way to delete a custom field value is to get a <b>ProjectDataSet</b>, set the <b>RowState</b> property of a custom field <b>DataRow</b> to <b>Deleted</b>, and then use the modified <b>ProjectDataSet</b> to update the project. To set a <b>DataRow</b> to <b>Deleted</b>, call the <b>Delete</b> method on the row object rather than setting the value to a null reference (Nothing in Visual Basic).</para>
          <para>To use the following sample code in a test application, create a task custom field of type <b>text</b>, and then create a project with one task. Assign a value to the custom field in the task properties, and then find the GUID values of the project and the task custom field. If you are working on a test installation of Project Server, you can use ProjTool to easily find the <b>PROJ_UID</b> of a project. Select the project in ProjTool, click Read Project Details, and then click the TaskCustomFields tab to find the <b>CUSTOM_FIELD_UID</b>. For more information about ProjTool, see Using the ProjTool Test Application. </para>
          <code>// Sample project and task custom field GUIDs:
Guid projectId = new Guid("B6064244-101A-4139-A2F8-697620458AAE");
Guid taskCustomFieldId = new Guid("a3549fbc-b49c-42c9-9c56-ba045e438d94");

Guid sessionId = Guid.NewGuid();
Guid jobId = Guid.NewGuid();

WebSvcProject.ProjectDataSet dsProject = 
    project.ReadProject(projectId, WebSvcProject.DataStoreEnum.WorkingStore);

// Do not use QueueDeleteFromProject to delete a custom field.
// Guid[] taskCustomFields = { taskCustomFieldId };
// project.QueueDeleteFromProject(jobId, sessionId, projectId, taskCustomFields);

bool deleteCF = false;

foreach (WebSvcProject.ProjectDataSet.TaskCustomFieldsRow taskCFRow in dsProject.TaskCustomFields)
{
    if ((Guid)taskCFRow[dsProject.TaskCustomFields.CUSTOM_FIELD_UIDColumn] == taskCustomFieldId)
    {
        // Set the rowstate to be deleted.
        taskCFRow.Delete();
        deleteCF = true;
        break;
    }
}
if (deleteCF)
{
    project.CheckOutProject(projectId, sessionId, "Test checkout");
    bool validateOnly = false;
    project.QueueUpdateProject(jobId, sessionId, dsProject, validateOnly);

    // Wait approximately four seconds for the queue to finish.
    // Or, add a routine that checks the QueueSystem for job completion.
    System.Threading.Thread.Sleep(4000);

    sessionId = Guid.NewGuid();
    jobId = Guid.NewGuid();
    bool force = false;
    string sessionDescription = "Removed task custom field " + taskCustomFieldId.ToString();
    project.QueueCheckInProject(jobId, projectId, force, sessionId, sessionDescription);

    // Wait approximately four seconds for queue to finish.
    // Or, use a routine that checks the QueueSystem for job completion.
    System.Threading.Thread.Sleep(4000);
}</code>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.SaveProject" />
              </term>
              <description>Allows a user to save the specified project. Category permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.SaveProjectTemplate" />
              </term>
              <description>Allows a user to create and save a project as an enterprise project template.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example creates a sample project, checks it out, modifies a task name, saves the update, and then checks the project back in.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.QueueUpdateProject
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            #region Setup
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            const string SESSION_DESC = "Sample utility";

            Guid sessionId = Guid.NewGuid();
            Guid jobId;

            // Set up the web service objects.
            SvcProject.Project projectSvc = new SvcProject.Project();

            projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
            projectSvc.Credentials = CredentialCache.DefaultCredentials;
            
            SvcQueueSystem.QueueSystem q = new SvcQueueSystem.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.Credentials = CredentialCache.DefaultCredentials;
            
            // Create the sample project.
            Console.WriteLine("Creating sample project");
            Guid projectId = CreateSampleProject(projectSvc, q);
            
            // Read the project that you want.
            Console.WriteLine("Reading project from database");

            SvcProject.ProjectDataSet projectDs = projectSvc.ReadProject(projectId, SvcProject.DataStoreEnum.WorkingStore);
            #endregion
            #region Change task name and update
            // Check out the project.
            Console.WriteLine("Checking out project");
            projectSvc.CheckOutProject(projectId, sessionId, SESSION_DESC);

            // Make changes.
            // Note: Task 0 is the summary task, which cannot be changed.
            projectDs.Task[1].TASK_NAME += " Changed";
                        
            // Save the changes.
            Console.WriteLine("Saving changes to the database");
            jobId = Guid.NewGuid();
            projectSvc.QueueUpdateProject(jobId, sessionId, projectDs, false);
            WaitForQueue(q, jobId);
            #endregion
            #region Check in
            // Check in the project. 
            Console.WriteLine("Checking in the project");
            jobId = Guid.NewGuid();
            projectSvc.QueueCheckInProject(jobId, projectId, false, sessionId, SESSION_DESC);
            WaitForQueue(q, jobId);
            #endregion
         }
         #region Exception Handling and Final
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
         #endregion
      }
      static private void WaitForQueue(SvcQueueSystem.QueueSystem q, Guid jobId)
      {
         SvcQueueSystem.JobState jobState;
         const int QUEUE_WAIT_TIME = 2; // two seconds
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         // Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Thread.Sleep(wait * 1000);
         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == SvcQueueSystem.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == SvcQueueSystem.JobState.Unknown
               || jobState == SvcQueueSystem.JobState.Failed
               || jobState == SvcQueueSystem.JobState.FailedNotBlocking
               || jobState == SvcQueueSystem.JobState.CorrelationBlocked
               || jobState == SvcQueueSystem.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
      }
      static private Guid CreateSampleProject(SvcProject.Project projectSvc, SvcQueueSystem.QueueSystem q)
      {
         SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();
         Guid jobId;
         // Create the project.
         SvcProject.ProjectDataSet.ProjectRow projectRow = projectDs.Project.NewProjectRow();
         projectRow.PROJ_UID = Guid.NewGuid();
         projectRow.PROJ_NAME = "Its a wonderful project at " + 
            DateTime.Now.ToShortDateString().Replace("/", "") + " " + 
            DateTime.Now.ToShortTimeString().Replace(":", "");
         projectRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
         projectDs.Project.AddProjectRow(projectRow);

         // Add some tasks.
         SvcProject.ProjectDataSet.TaskRow taskOne = projectDs.Task.NewTaskRow();
         taskOne.PROJ_UID = projectRow.PROJ_UID;
         taskOne.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskOne.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskOne.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskOne.TASK_NAME = "Task One";
         taskOne.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskOne);

         SvcProject.ProjectDataSet.TaskRow taskTwo = projectDs.Task.NewTaskRow();
         taskTwo.PROJ_UID = projectRow.PROJ_UID;
         taskTwo.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskTwo.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskTwo.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskTwo.TASK_NAME = "Task Two";
         taskTwo.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskTwo);
          
         // Save the project to the database.
         jobId = Guid.NewGuid();
         projectSvc.QueueCreateProject(jobId, projectDs, false);
         WaitForQueue(q, jobId);
         return projectRow.PROJ_UID;
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="QueueUpdateProject2">
      <MemberSignature Language="C#" Value="public void QueueUpdateProject2 (Guid jobUid, Guid sessionUid, WebSvcProject.ProjectDataSet dataset, bool validateOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueUpdateProject2(valuetype System.Guid jobUid, valuetype System.Guid sessionUid, class WebSvcProject.ProjectDataSet dataset, bool validateOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueueUpdateProject2(System.Guid,System.Guid,WebSvcProject.ProjectDataSet,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueUpdateProject2 (jobUid As Guid, sessionUid As Guid, dataset As ProjectDataSet, validateOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueUpdateProject2(Guid jobUid, Guid sessionUid, WebSvcProject::ProjectDataSet ^ dataset, bool validateOnly);" />
      <MemberSignature Language="F#" Value="member this.QueueUpdateProject2 : Guid * Guid * WebSvcProject.ProjectDataSet * bool -&gt; unit" Usage="project.QueueUpdateProject2 (jobUid, sessionUid, dataset, validateOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueueUpdateProject2", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUid" Type="System.Guid" />
        <Parameter Name="sessionUid" Type="System.Guid" />
        <Parameter Name="dataset" Type="WebSvcProject.ProjectDataSet" />
        <Parameter Name="validateOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="jobUid">The GUID of the queue job.</param>
        <param name="sessionUid">The GUID of the session in which the queue job is submitted.</param>
        <param name="dataset">Contains the project entities to update or add.</param>
        <param name="validateOnly">If <b>true</b>, only validates the input data and does not perform the action.</param>
        <summary>Updates, adds, or removes entities in a checked-out project, and reschedules the project.</summary>
        <remarks>
          <para>Rescheduling the updated project uses the scheduling engine in Project Server 2013, which duplicates the scheduling engine in Project Professional 2013. When you use the <b>QueueUpdateProject2</b> method, it is not necessary to open the project in Project Professional 2013 to update the schedule.</para>
          <para>The <b>Project</b> class methods, such as <b>QueueUpdateProject2</b>, cannot create, edit, or delete cost resources. If the <b>ProjectDataSet</b> in the <paramref name="dataset" /> parameter includes a cost resource, the method returns the <b>ProjectCannotEditCostResource</b> error 1050. You can use the <see cref="M:WebSvcResource.Resource.CreateResources(WebSvcResource.ResourceDataSet,System.Boolean,System.Boolean)" /> method to create cost resources, but <b>Resource</b> class methods cannot edit them. For more information, see What the PSI does and does not do.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.SaveProject" />
              </term>
              <description>Allows a user to save the specified project. Category permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.SaveProjectTemplate" />
              </term>
              <description>Allows a user to create and save a project as an enterprise project template.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueUpdateProjectImpacts">
      <MemberSignature Language="C#" Value="public void QueueUpdateProjectImpacts (Guid jobUid, Guid sessionUid, WebSvcProject.ProjectImpactDataSet projectImpactDataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueUpdateProjectImpacts(valuetype System.Guid jobUid, valuetype System.Guid sessionUid, class WebSvcProject.ProjectImpactDataSet projectImpactDataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueueUpdateProjectImpacts(System.Guid,System.Guid,WebSvcProject.ProjectImpactDataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueUpdateProjectImpacts(Guid jobUid, Guid sessionUid, WebSvcProject::ProjectImpactDataSet ^ projectImpactDataSet);" />
      <MemberSignature Language="F#" Value="member this.QueueUpdateProjectImpacts : Guid * Guid * WebSvcProject.ProjectImpactDataSet -&gt; unit" Usage="project.QueueUpdateProjectImpacts (jobUid, sessionUid, projectImpactDataSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueueUpdateProjectImpacts", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUid" Type="System.Guid" />
        <Parameter Name="sessionUid" Type="System.Guid" />
        <Parameter Name="projectImpactDataSet" Type="WebSvcProject.ProjectImpactDataSet" />
      </Parameters>
      <Docs>
        <param name="jobUid">The GUID of the queue job.</param>
        <param name="sessionUid">The GUID of the session in which the queue job is submitted.</param>
        <param name="projectImpactDataSet">Contains the project impact data.</param>
        <summary>Updates the project impact data, for portfolio analysis.</summary>
        <remarks>
          <para>Inserts an update project impact values message into the Project Server queue. <b>QueueUpdateProjectImpacts</b> is a new method in Project Server 2013.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.SaveProject" />
              </term>
              <description>Allows a user to save the specified project. Category permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.EditProjectProperties" />
              </term>
              <description>Allows a user to edit project custom fields, the project name, and the project owner for specified projects.</description>
            </item>
          </list>
          <para>If the user does not have both permissions, Project Server issues a <see cref="F:Microsoft.Office.Project.Server.Library.PSErrorID.GeneralSecurityAccessDenied" /> error.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueUpdateProjectTeam">
      <MemberSignature Language="C#" Value="public void QueueUpdateProjectTeam (Guid JobUid, Guid sessionUid, Guid projectUid, WebSvcProject.ProjectTeamDataSet dataset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueUpdateProjectTeam(valuetype System.Guid JobUid, valuetype System.Guid sessionUid, valuetype System.Guid projectUid, class WebSvcProject.ProjectTeamDataSet dataset) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueueUpdateProjectTeam(System.Guid,System.Guid,System.Guid,WebSvcProject.ProjectTeamDataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueUpdateProjectTeam (JobUid As Guid, sessionUid As Guid, projectUid As Guid, dataset As ProjectTeamDataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueUpdateProjectTeam(Guid JobUid, Guid sessionUid, Guid projectUid, WebSvcProject::ProjectTeamDataSet ^ dataset);" />
      <MemberSignature Language="F#" Value="member this.QueueUpdateProjectTeam : Guid * Guid * Guid * WebSvcProject.ProjectTeamDataSet -&gt; unit" Usage="project.QueueUpdateProjectTeam (JobUid, sessionUid, projectUid, dataset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueueUpdateProjectTeam", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="JobUid" Type="System.Guid" />
        <Parameter Name="sessionUid" Type="System.Guid" />
        <Parameter Name="projectUid" Type="System.Guid" />
        <Parameter Name="dataset" Type="WebSvcProject.ProjectTeamDataSet" />
      </Parameters>
      <Docs>
        <param name="JobUid">The GUID of the queue job.</param>
        <param name="sessionUid">The GUID of the session in which the queue job is submitted.</param>
        <param name="projectUid">The GUID of the project.</param>
        <param name="dataset">Contains the project team data to update.</param>
        <summary>Updates the project team for a specified project. </summary>
        <remarks>
          <para>
            <b>QueueUpdateProjectTeam</b> cleans up resource data within a project. Old resources are removed, enterprise resource changes are incorporated, and new data is reconciled with enterprise data.</para>
          <para>
            <b>QueueUpdateProjectTeam</b> is an asynchronous method that sends a message to the Project Server Queuing Service.</para>
          <para>Wait for the queue to process the changes before trying to read the project team. If you read the project team before the changes are completed, you will not receive any team members that are still in the queue.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.BuildTeamOnProject" />
              </term>
              <description>Allows a user to make resource assignments from the resource pool to the specified project. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueUpdateVisibilityMode">
      <MemberSignature Language="C#" Value="public void QueueUpdateVisibilityMode (Guid jobUid, Guid projectUid, WebSvcProject.ProjectDataSet dataset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueUpdateVisibilityMode(valuetype System.Guid jobUid, valuetype System.Guid projectUid, class WebSvcProject.ProjectDataSet dataset) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueueUpdateVisibilityMode(System.Guid,System.Guid,WebSvcProject.ProjectDataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueUpdateVisibilityMode (jobUid As Guid, projectUid As Guid, dataset As ProjectDataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueUpdateVisibilityMode(Guid jobUid, Guid projectUid, WebSvcProject::ProjectDataSet ^ dataset);" />
      <MemberSignature Language="F#" Value="member this.QueueUpdateVisibilityMode : Guid * Guid * WebSvcProject.ProjectDataSet -&gt; unit" Usage="project.QueueUpdateVisibilityMode (jobUid, projectUid, dataset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueueUpdateVisibilityMode", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUid" Type="System.Guid" />
        <Parameter Name="projectUid" Type="System.Guid" />
        <Parameter Name="dataset" Type="WebSvcProject.ProjectDataSet" />
      </Parameters>
      <Docs>
        <param name="jobUid">The GUID of the queued project update job.</param>
        <param name="projectUid">The GUID of the project to be updated.</param>
        <param name="dataset">The project dataset.</param>
        <summary>Updates a project when it is in Visibility mode.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueUpgradeProject">
      <MemberSignature Language="C#" Value="public void QueueUpgradeProject (Guid projectUID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueUpgradeProject(valuetype System.Guid projectUID) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.QueueUpgradeProject(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueUpgradeProject (projectUID As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueUpgradeProject(Guid projectUID);" />
      <MemberSignature Language="F#" Value="member this.QueueUpgradeProject : Guid -&gt; unit" Usage="project.QueueUpgradeProject projectUID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/QueueUpgradeProject", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectUID" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="projectUID">The GUID of the project.</param>
        <summary>Deprecated in Project Server 2013.</summary>
        <remarks>
          <para>
            <b>Note</b>: In Office Project Server 2007, Project Web App uses methods in the private <b>PWA</b> web service to import a SharePoint task list as a project proposal, and <b>QueueUpgradeProject</b> upgrades the project proposal to a full project. In Project 2013, Project Professional can import and update a SharePoint task list. You can also use <see cref="M:WebSvcProject.Project.CreateWssListSyncedProject(WebSvcProject.SyncDataSet,System.String)" /> to create a project from a SharePoint task list.</para>
          <para>For information about how <b>QueueUpgradeProject</b> works in Office Project Server 2007, see the QueueUpgradeProject method in the Project 2007 SDK. </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadProject">
      <MemberSignature Language="C#" Value="public WebSvcProject.ProjectDataSet ReadProject (Guid projectUid, WebSvcProject.DataStoreEnum dataStore);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcProject.ProjectDataSet ReadProject(valuetype System.Guid projectUid, valuetype WebSvcProject.DataStoreEnum dataStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.ReadProject(System.Guid,WebSvcProject.DataStoreEnum)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadProject (projectUid As Guid, dataStore As DataStoreEnum) As ProjectDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcProject::ProjectDataSet ^ ReadProject(Guid projectUid, WebSvcProject::DataStoreEnum dataStore);" />
      <MemberSignature Language="F#" Value="member this.ReadProject : Guid * WebSvcProject.DataStoreEnum -&gt; WebSvcProject.ProjectDataSet" Usage="project.ReadProject (projectUid, dataStore)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/ReadProject", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcProject.ProjectDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectUid" Type="System.Guid" />
        <Parameter Name="dataStore" Type="WebSvcProject.DataStoreEnum" />
      </Parameters>
      <Docs>
        <param name="projectUid">The GUID of the project.</param>
        <param name="dataStore">Specifies the database in which the project data is located (Drafts, Published, or Archive).</param>
        <summary>Gets data for the specified project in the specified Project Server database.</summary>
        <returns>Contains the full set of data for the specified project and entities within the project.</returns>
        <remarks>
          <para>
            <see cref="T:WebSvcProject.ProjectDataSet.ProjectResourceRow" /> in the returned <see cref="T:WebSvcProject.ProjectDataSet" /> may be an enterprise resource, as indicated by <see cref="P:WebSvcProject.ProjectDataSet.ProjectResourceRow.RES_IS_ENTERPRISE_RESOURCE" />. If it is an enterprise resource, data in this table may not reflect the current state of the resource on the enterprise level. Properties may be copied from the enterprise properties when the resource is added to the project. If the enterprise properties of the enterprise resource are changed later, they may not be fully reflected in data in this row. Likewise, changes made in this row will not be made to the enterprise properties and may be overwritten if the resource properties are refreshed from the enterprise data.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.OpenProject" />
              </term>
              <description>Allows a user to open the project. Category permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.LogOnToProjectServerFromProjectProfessional" />
              </term>
              <description>Allows a user to load the enterprise global template.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>Example for WCF:   The <b>ReadMyProjects</b> example does the following:</para>
          <list type="number">
            <item>
              <description>Gets the GUID of the current user.</description>
            </item>
            <item>
              <description>Reads the list of all projects visible to the user, by using <b>ReadProjectStatus</b>.</description>
            </item>
            <item>
              <description>Reads each project in the list, by using <b>ReadProject</b>.</description>
            </item>
            <item>
              <description>If the project owner matches the current user:</description>
            </item>
            <item>
              <description>Writes each output <b>ProjectDataSet</b> to an XML file, for comparison of the schemas.</description>
            </item>
            <item>
              <description>For example output of the exception handler, see the Code Example for WCF section in Project Server Error Codes.</description>
            </item>
          </list>
          <para>
            <b>Tip</b>: If there are a large number of projects to read, a query of the Reporting database can be more efficient. Alternately, a PSI extension can do all of the calls to <b>ReadProjectStatus</b> and <b>ReadProject</b> on the server, and return just the final <b>ProjectDataSet</b>.</para>
          <para>For information about using the code sample in a Microsoft Visual Studio 2010 project and creating an app.config file for configuration of the WCF endpoints, see Prerequisites for WCF-Based Code Samples.</para>
          <code>using System;
using System.Text;
using System.ServiceModel;
using System.Xml;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.ReadMyProjects
{
    class Program
    {
        private const string ENDPOINT_PROJECT = "basicHttp_Project";
        private const string ENDPOINT_RESOURCE = "basicHttp_Resource";

        // Change the output directory for your computer.
        private const string OUTPUT_FILES = @"C:\Project\Samples\Output\";
        private const string XML_FILE = "MyProjects.xml";
        private const string XML_FILE2 = "MyProjects2.xml";

        private static SvcProject.ProjectClient projectClient;
        private static SvcResource.ResourceClient resourceClient;
 
        static void Main(string[] args)
        {
            string outFilePath = OUTPUT_FILES + XML_FILE;
            string outFilePath2 = OUTPUT_FILES + XML_FILE2;

            try
            {
                ConfigClientEndpoints(ENDPOINT_PROJECT);
                ConfigClientEndpoints(ENDPOINT_RESOURCE);

                Guid myUid = resourceClient.GetCurrentUserUid();
                Console.WriteLine("My GUID: {0}", myUid.ToString());

                // Get the list of all projects visible to the user.
                SvcProject.ProjectDataSet projectDs = projectClient.ReadProjectStatus(
                    Guid.Empty, SvcProject.DataStoreEnum.WorkingStore,
                    string.Empty, (int)PSLibrary.Project.ProjectType.Project);

                SvcProject.ProjectDataSet tempProjDs = null;

                // Create an empty ProjectDataSet for projects the user owns.
                // By cloning the projectDs object, you get the same schema 
                // that is created by ReadProjectStatus.
                SvcProject.ProjectDataSet myProjectsDs = 
                    (SvcProject.ProjectDataSet)projectDs.Clone();

                // Create an empty ProjectDataSet that contains the complete schema.
                SvcProject.ProjectDataSet myProjectsDs2 = new SvcProject.ProjectDataSet();

                Console.WriteLine("Projects I own:");

                for (int i = 0; i &amp;lt; projectDs.Project.Count; i++)
                {
                    tempProjDs = projectClient.ReadProject(projectDs.Project[i].PROJ_UID,
                        SvcProject.DataStoreEnum.WorkingStore);

                    if (tempProjDs.Project[0].ProjectOwnerID == myUid)
                    {
                        Console.WriteLine("\t" + tempProjDs.Project[0].PROJ_NAME);
                        myProjectsDs.Project.ImportRow(
                            (SvcProject.ProjectDataSet.ProjectRow)tempProjDs.Project[0]);
                        myProjectsDs2.Project.ImportRow(
                            (SvcProject.ProjectDataSet.ProjectRow)tempProjDs.Project[0]);

                        // You can add task data to either ProjectDataSet. However,
                        // only myProjectsDs2 contains the complete Project table schema.
                        for (int t = 0; t &amp;lt; tempProjDs.Task.Count; t++)
                        {
                            // To get all of the task data, use the following statement
                            // instead of adding a new task row with specific fields.
                            //myProjectsDs2.Task.ImportRow(
                            //    (SvcProject.ProjectDataSet.TaskRow)tempProjDs.Task[t]);

                            // Add specific data in a new task row.
                            SvcProject.ProjectDataSet.TaskRow taskRow = 
                                myProjectsDs2.Task.NewTaskRow();

                            // If you comment-out the following line, you get a constraint error.
                            taskRow.PROJ_UID = tempProjDs.Task[t].PROJ_UID;

                            taskRow.TASK_UID = tempProjDs.Task[t].TASK_UID;
                            taskRow.TASK_NAME = tempProjDs.Task[t].TASK_NAME;
                            taskRow.TASK_IS_MANUAL = tempProjDs.Task[t].TASK_IS_MANUAL;
                            myProjectsDs2.Task.AddTaskRow(taskRow);
                        }
                    }
                }
                Console.WriteLine(
                    "\nXML output of myProjectsDs and myProjectDs2:\n\t{0}",
                    outFilePath);

                // Write both XML files for comparison of the ProjectDataSet schemas.
                myProjectsDs.WriteXml(outFilePath);
                myProjectsDs2.WriteXml(outFilePath2);
            }
            catch (FaultException fault)
            {
                // Use the WCF FaultException, because the ASMX SoapException does not 
                // exist in a WCF-based application.
                WriteFaultOutput(fault);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            Console.Write("\nPress any key to exit... ");
            Console.ReadKey(true);
        }

        // Extract a PSClientError object from the WCF FaultException object, and
        // then display the exception details and each error in the PSClientError stack.
        private static void WriteFaultOutput(FaultException fault)
        {
            string errAttributeName;
            string errAttribute;
            string errOut;
            string errMess = "".PadRight(30, '=') + "\r\n"
                + "Error details: " + "\r\n";

            PSLibrary.PSClientError error = Helpers.GetPSClientError(fault, out errOut);
            errMess += errOut;

            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            PSLibrary.PSErrorInfo thisError;

            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
                thisError = errors[i];
                errMess += "\r\n".PadRight(30, '=') + "\r\nPSClientError output:\r\n";
                errMess += thisError.ErrId.ToString() + "\n";

                for (int j = 0; j &amp;lt; thisError.ErrorAttributes.Length; j++)
                {
                    errAttributeName = thisError.ErrorAttributeNames()[j];
                    errAttribute = thisError.ErrorAttributes[j];
                    errMess += "\r\n\t" + errAttributeName
                        + ": " + errAttribute;
                }
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
            Console.ResetColor();
        }

        // Use the endpoints defined in app.config to configure the client.
        public static void ConfigClientEndpoints(string endpt)
        {
            if (endpt == ENDPOINT_PROJECT)
                projectClient = new SvcProject.ProjectClient(endpt);
            else if (endpt == ENDPOINT_RESOURCE)
                resourceClient = new SvcResource.ResourceClient(endpt);
        }            
    }

    // Helper method: GetPSClientError.
    class Helpers
    {
        /// &amp;lt;summary&amp;gt;
        /// Extract a PSClientError object from the ServiceModel.FaultException,
        /// for use in output of the GetPSClientError stack of errors.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="e"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name="errOut"&amp;gt;Shows that FaultException has more information 
        /// about the errors than PSClientError has. FaultException can also contain 
        /// other types of errors, such as failure to connect to the server.&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;PSClientError object, for enumerating errors.&amp;lt;/returns&amp;gt;
        public static PSLibrary.PSClientError GetPSClientError(FaultException e, 
                                                               out string errOut)
        {
            const string PREFIX = "GetPSClientError() returns null: ";
            errOut = string.Empty;
            PSLibrary.PSClientError psClientError = null;

            if (e == null)
            {
                errOut = PREFIX + "Null parameter (FaultException e) passed in.";
                psClientError = null;
            }
            else
            {
                // Get a ServiceModel.MessageFault object.
                var messageFault = e.CreateMessageFault();

                if (messageFault.HasDetail)
                {
                    using (var xmlReader = messageFault.GetReaderAtDetailContents())
                    {
                        var xml = new XmlDocument();
                        xml.Load(xmlReader);

                        var serverExecutionFault = xml["ServerExecutionFault"];
                        if (serverExecutionFault != null)
                        {
                            var exceptionDetails = serverExecutionFault["ExceptionDetails"];
                            if (exceptionDetails != null)
                            {
                                try
                                {
                                    errOut = exceptionDetails.InnerXml + "\r\n";
                                    psClientError = 
                                        new PSLibrary.PSClientError(exceptionDetails.InnerXml);
                                }
                                catch (InvalidOperationException ex)
                                {
                                    errOut = PREFIX + "Unable to convert fault exception info ";
                                    errOut += "a valid Project Server error message. Message: \n\t";
                                    errOut += ex.Message;
                                    psClientError = null;
                                }
                            }
                            else
                            {
                                errOut = PREFIX 
                                    + "The FaultException e is a ServerExecutionFault, "
                                    + "but does not have ExceptionDetails.";
                            }
                        }
                        else
                        {
                            errOut = PREFIX 
                                + "The FaultException e is not a ServerExecutionFault.";
                        }
                    }
                }
                else // No detail in the MessageFault.
                {
                    errOut = PREFIX + "The FaultException e does not have any detail.";
                }
            }
            errOut += "\r\n" + e.ToString() + "\r\n";
            return psClientError;
        }
    }
}</code>
          <para>Example for ASMX:   The following example creates a sample project, reads it back in, and dumps the contents to the console.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.ReadProject
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            #region Setup
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
            const string RESOURCEPLAN_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";

            // Set up the web service objects.
            SvcProject.Project projectSvc = new SvcProject.Project();

            projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
            projectSvc.UseDefaultCredentials = true;

            SvcResource.Resource resourceSvc = new SvcResource.Resource();
            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.UseDefaultCredentials = true;

            SvcResourcePlan.ResourcePlan resourcePlanSvc = new SvcResourcePlan.ResourcePlan();
            resourcePlanSvc.Url = PROJECT_SERVER_URI + RESOURCEPLAN_SERVICE_PATH;
            resourcePlanSvc.UseDefaultCredentials = true;
         
            SvcQueueSystem.QueueSystem q = new SvcQueueSystem.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;


            // Create a sample project.
            Console.WriteLine("Creating the project");
            Guid projectId = CreateSampleProject(projectSvc, q, resourceSvc);
            #endregion
            #region Read Sample Project
            Console.WriteLine("Reading in the project");
            SvcProject.ProjectDataSet projectDs = projectSvc.ReadProject(projectId, SvcProject.DataStoreEnum.WorkingStore);
            #endregion

            #region Write out project
            // Write the project tables to the console.
            Console.WriteLine("And here it is:");
            WriteTablesToConsole(projectDs.Tables);
            #endregion
         }
         #region Exception Handling and Final
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
         #endregion
      }

      // Wait for the job to finish.
      // Outputs job status to the console.
      static private void WaitForQueue(SvcQueueSystem.QueueSystem q, Guid jobId)
      {
         SvcQueueSystem.JobState jobState;
         const int QUEUE_WAIT_TIME = 1; // one second
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         // Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Console.Write("Waiting on queue. Estimate: {0} seconds.\r\n ", wait);

         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == SvcQueueSystem.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == SvcQueueSystem.JobState.Unknown
               || jobState == SvcQueueSystem.JobState.Failed
               || jobState == SvcQueueSystem.JobState.FailedNotBlocking
               || jobState == SvcQueueSystem.JobState.CorrelationBlocked
               || jobState == SvcQueueSystem.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  //Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                  Console.Write("~");
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
         Console.Write("\r\n");

      }

      static private Guid CreateSampleProject(SvcProject.Project projectSvc, SvcQueueSystem.QueueSystem q, SvcResource.Resource resourceSvc)
      {
         SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();
         Guid jobId;
         Guid sessionUid = Guid.NewGuid();
         const string SESSION_DESC = "Test Utility";

         // Create the project.
         SvcProject.ProjectDataSet.ProjectRow projectRow = projectDs.Project.NewProjectRow();
         Guid projectId = Guid.NewGuid();
         projectRow.PROJ_UID =projectId;
         projectRow.PROJ_NAME = "Its a wonderful project at " + 
            DateTime.Now.ToShortDateString().Replace("/", "") + " " + 
            DateTime.Now.ToShortTimeString().Replace(":", "") +" "+ 
            DateTime.Now.Millisecond.ToString() ;
         projectRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
         projectDs.Project.AddProjectRow(projectRow);

         // Add some tasks.
         SvcProject.ProjectDataSet.TaskRow taskOne = projectDs.Task.NewTaskRow();
         taskOne.PROJ_UID = projectId;
         taskOne.TASK_UID = Guid.NewGuid();
         taskOne.TASK_NAME = "Task One";
         taskOne.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Hour;
         taskOne.TASK_DUR = 10*60*8*3;  //Three eight hour days
         taskOne.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskOne);

         SvcProject.ProjectDataSet.TaskRow taskTwo = projectDs.Task.NewTaskRow();
         taskTwo.PROJ_UID = projectId;
         taskTwo.TASK_UID = Guid.NewGuid();
         taskTwo.TASK_NAME = "Task Two";
         taskTwo.TASK_DUR = 10 * 60 * 6;  // 6 hours
         taskTwo.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.EHour; // Duration Estimate and shoudl be displayed in hours
         projectDs.Task.AddTaskRow(taskTwo);

         // Make task two dependent on task one.
         SvcProject.ProjectDataSet.DependencyRow dependency = projectDs.Dependency.NewDependencyRow();
         dependency.LINK_UID = Guid.NewGuid();
         dependency.PROJ_UID = projectId;
         dependency.LINK_PRED_UID = taskOne.TASK_UID;
         dependency.LINK_SUCC_UID = taskTwo.TASK_UID;
         dependency.LINK_TYPE = 1;  //Finish to Start
         dependency.LINK_LAG_FMT =(int) PSLibrary.Task.DurationFormat.Hour;
         dependency.LINK_LAG = 0;
         projectDs.Dependency.AddDependencyRow(dependency);

         // Add a summary task.
         SvcProject.ProjectDataSet.TaskRow taskOthers = projectDs.Task.NewTaskRow();
         taskOthers.PROJ_UID = projectId;
         taskOthers.TASK_UID = Guid.NewGuid();
         taskOthers.TASK_NAME = "Related Tasks";
         projectDs.Task.AddTaskRow(taskOthers);

         // Add some subtasks.

         SvcProject.ProjectDataSet.TaskRow taskThree = projectDs.Task.NewTaskRow();
         taskThree.PROJ_UID = projectId;
         taskThree.TASK_UID = Guid.NewGuid();
         taskThree.TASK_NAME = "Task Three";
         taskThree.TASK_PARENT_UID = taskOthers.TASK_UID;
         taskThree.TASK_OUTLINE_LEVEL = 2;
         taskThree.TASK_DUR = 9600; //Two days
         taskThree.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         projectDs.Task.AddTaskRow(taskThree);

         SvcProject.ProjectDataSet.TaskRow taskFour = projectDs.Task.NewTaskRow();
         taskFour.PROJ_UID = projectId;
         taskFour.TASK_UID = Guid.NewGuid();
         taskFour.TASK_NAME = "Task Four";
         taskFour.TASK_PARENT_UID = taskOthers.TASK_UID;
         taskFour.TASK_DUR = 4800; //One day
         taskFour.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Hour;
         taskFour.TASK_OUTLINE_LEVEL = 2;
         projectDs.Task.AddTaskRow(taskFour);


         // Make task four dependent on task three.
         dependency = projectDs.Dependency.NewDependencyRow();
         dependency.LINK_UID = Guid.NewGuid();
         dependency.PROJ_UID = projectId;
         dependency.LINK_PRED_UID = taskThree.TASK_UID;
         dependency.LINK_SUCC_UID = taskFour.TASK_UID;
         dependency.LINK_TYPE = 1;  //Finish to Start
         dependency.LINK_LAG = 0;
         projectDs.Dependency.AddDependencyRow(dependency);

         // Make others task dependent on task two.
         dependency = projectDs.Dependency.NewDependencyRow();
         dependency.LINK_UID = Guid.NewGuid();
         dependency.PROJ_UID = projectId;
         dependency.LINK_PRED_UID = taskTwo.TASK_UID;
         dependency.LINK_SUCC_UID = taskOthers.TASK_UID;
         dependency.LINK_TYPE = 1;  //Finish to Start
         dependency.LINK_LAG = 0;
         projectDs.Dependency.AddDependencyRow(dependency);

         //Add some local project resources.
         SvcProject.ProjectDataSet.ProjectResourceRow resourceOne = projectDs.ProjectResource.NewProjectResourceRow();
         resourceOne.PROJ_UID = projectId;
         resourceOne.RES_UID = Guid.NewGuid();
         resourceOne.RES_NAME = "Brynja Sigrídur Blomsterberg";
         resourceOne.RES_INITIALS = "BSB";
         projectDs.ProjectResource.AddProjectResourceRow(resourceOne);
         CreateAssignment(projectDs, taskOne.TASK_UID, resourceOne.RES_UID);
         CreateAssignment(projectDs, taskTwo.TASK_UID, resourceOne.RES_UID);

         SvcProject.ProjectDataSet.ProjectResourceRow resourceTwo = projectDs.ProjectResource.NewProjectResourceRow();
         resourceTwo.PROJ_UID = projectId;
         resourceTwo.RES_UID = Guid.NewGuid();
         resourceTwo.RES_NAME = "Ioannis Xylaras";
         resourceTwo.RES_INITIALS = "IX";
         projectDs.ProjectResource.AddProjectResourceRow(resourceTwo);
         CreateAssignment(projectDs, taskOne.TASK_UID, resourceTwo.RES_UID);
         CreateAssignment(projectDs, taskTwo.TASK_UID, resourceTwo.RES_UID);
         CreateAssignment(projectDs, taskThree.TASK_UID, resourceTwo.RES_UID);
         CreateAssignment(projectDs, taskFour.TASK_UID, resourceTwo.RES_UID);
     
         // Save the project to the database.
         jobId = Guid.NewGuid();
         projectSvc.QueueCreateProject(jobId, projectDs, false);
         WaitForQueue(q, jobId);

         // Add or retrieve an enterprise resource.
         SvcResource.ResourceDataSet resourceDs = EnsureEnterpriseResource(resourceSvc);

         // Add the resource to the team.
         SvcProject.ProjectTeamDataSet projectTeamDs = new SvcProject.ProjectTeamDataSet();
         ProjectTeamAddResource(projectTeamDs, projectId, resourceDs.Resources[0].RES_UID, resourceDs.Resources[0].RES_UID);

         projectSvc.CheckOutProject(projectId, sessionUid, SESSION_DESC);
  
         // Save the team.
         jobId = Guid.NewGuid();
         projectSvc.QueueUpdateProjectTeam(jobId, sessionUid, projectId, projectTeamDs);
         WaitForQueue(q, jobId);

         // Read the project back in to get the updated team.
         //projectDs = projectSvc.ReadProject(projectId, SvcProject.DataStoreEnum.WorkingStore);

         projectDs = new SvcProject.ProjectDataSet();
         // Add the resource to an assignment.
         CreateAssignment(projectDs, taskOne.TASK_UID, resourceDs.Resources[0].RES_UID,projectId);

         // Save the enterprise assignment.
         jobId = Guid.NewGuid();
         // Get only the added rows.
         projectDs = (SvcProject.ProjectDataSet) projectDs.GetChanges(DataRowState.Added);
         projectSvc.QueueAddToProject(jobId, sessionUid, projectDs, false);
         WaitForQueue(q,jobId);
         
         // Check in the project. 
         jobId = Guid.NewGuid();
         projectSvc.QueueCheckInProject(jobId, projectId, false, sessionUid, SESSION_DESC);
         WaitForQueue(q, jobId);

         return projectRow.PROJ_UID;
      }
      // A helper function for CreateSampleProject.
      // Makes a simple assignment.
      private static void CreateAssignment(SvcProject.ProjectDataSet projectDs, Guid taskGuid, Guid resourceGuid)
      {
         CreateAssignment(projectDs, taskGuid, resourceGuid, projectDs.Project[0].PROJ_UID);
      }
      private static void CreateAssignment(SvcProject.ProjectDataSet projectDs, Guid taskGuid, Guid resourceGuid, Guid projectId)
      {
         SvcProject.ProjectDataSet.AssignmentRow assnRow = projectDs.Assignment.NewAssignmentRow();
         assnRow.PROJ_UID = projectId;
         assnRow.ASSN_UID = Guid.NewGuid();
         assnRow.TASK_UID = taskGuid;
         assnRow.RES_UID = resourceGuid;
         projectDs.Assignment.AddAssignmentRow(assnRow);
      }
      // A helper function for Create Project.
      // Adds an enterprise resource to the project
      // so that is can be used on the project.
      public static void ProjectTeamAddResource(SvcProject.ProjectTeamDataSet projTeamDataSet, Guid projGuid, Guid resGuid, Guid newResGuid)
      {
         SvcProject.ProjectTeamDataSet.ProjectTeamRow projTeamRow = projTeamDataSet.ProjectTeam.NewProjectTeamRow();
         projTeamRow.PROJ_UID = projGuid;
         projTeamRow.RES_UID = resGuid;
         projTeamRow.NEW_RES_UID = newResGuid;
         projTeamDataSet.ProjectTeam.AddProjectTeamRow(projTeamRow);
      }
      // A helper function for Create Project.
      // Creates or retrieves an enterprise resource.
      private static SvcResource.ResourceDataSet EnsureEnterpriseResource(SvcResource.Resource resourceSvc)
      {
         const string RES_NAME = "Lertchai Treetawatchaiwong";
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, RES_NAME);
         resourceFilter.Criteria = existingResource;
         resourceDs = resourceSvc.ReadResources(resourceFilter.GetXml(), false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs;
         }
         else
         {
            resourceDs = new SvcResource.ResourceDataSet();
            SvcResource.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
            resourceRow.RES_UID = Guid.NewGuid();
            resourceRow.RES_NAME = RES_NAME;
            resourceRow.RES_INITIALS = "LT";
            resourceDs.Resources.AddResourcesRow(resourceRow);
            resourceSvc.CreateResources(resourceDs, false, true);
            return resourceDs;
         }
      }

      // Write all contents of a table collection to the console.
      private static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {
           
            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);
           
            // Write out the column names and get their spacing.
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // Add a space so that it will not wrap.
            tableWidth += 1;
            // make the console as wide as the widest table
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data.
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  dataString = row[i].ToString();
                  // Truncate output, if it is wider than 
                  // the desired column width.
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // Add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // A helper function for WriteTablesToConsole.
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: May not handle byte[]data types well.
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         //Return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise use the max col width.
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // Truncate, if over the max length.
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // Always be at least as wide as the colum name.
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadProjectEntities">
      <MemberSignature Language="C#" Value="public WebSvcProject.ProjectDataSet ReadProjectEntities (Guid projectUid, int ProjectEntityType, WebSvcProject.DataStoreEnum dataStore);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcProject.ProjectDataSet ReadProjectEntities(valuetype System.Guid projectUid, int32 ProjectEntityType, valuetype WebSvcProject.DataStoreEnum dataStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.ReadProjectEntities(System.Guid,System.Int32,WebSvcProject.DataStoreEnum)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadProjectEntities (projectUid As Guid, ProjectEntityType As Integer, dataStore As DataStoreEnum) As ProjectDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcProject::ProjectDataSet ^ ReadProjectEntities(Guid projectUid, int ProjectEntityType, WebSvcProject::DataStoreEnum dataStore);" />
      <MemberSignature Language="F#" Value="member this.ReadProjectEntities : Guid * int * WebSvcProject.DataStoreEnum -&gt; WebSvcProject.ProjectDataSet" Usage="project.ReadProjectEntities (projectUid, ProjectEntityType, dataStore)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/ReadProjectEntities", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcProject.ProjectDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectUid" Type="System.Guid" />
        <Parameter Name="ProjectEntityType" Type="System.Int32" />
        <Parameter Name="dataStore" Type="WebSvcProject.DataStoreEnum" />
      </Parameters>
      <Docs>
        <param name="projectUid">The GUID of the project. Required.</param>
        <param name="ProjectEntityType">Specifies one or more types of entities. You can perform a binary <b>OR</b> on the values to specify multiple entities.</param>
        <param name="dataStore">The <see cref="T:WebSvcProject.DataStoreEnum" /> that specifys the database in which the project data is located (Drafts, Published, or Archive).</param>
        <summary>Gets one or more types of information within a project, such as tasks, resources, and assignments.</summary>
        <returns>Contains the entities of the specified types.</returns>
        <remarks>
          <para>The <paramref name="ProjectEntityType" /> takes the following values:</para>
          <list type="bullet">
            <item>
              <description>Project = 1</description>
            </item>
            <item>
              <description>Task = 2</description>
            </item>
            <item>
              <description>Resource = 4</description>
            </item>
            <item>
              <description>Assignment = 8</description>
            </item>
            <item>
              <description>Dependency = 16</description>
            </item>
            <item>
              <description>ProjectCustomFields = 32</description>
            </item>
            <item>
              <description>TaskCustomFields = 64</description>
            </item>
            <item>
              <description>ResourceCustomFields = 128</description>
            </item>
            <item>
              <description>AssignmentCustomFields = 256</description>
            </item>
            <item>
              <description>AssignmentCore = 512</description>
            </item>
            <item>
              <description>ProjectDefaults = 1024</description>
            </item>
            <item>
              <description>AssignmentOwnerDefaults = 2048</description>
            </item>
            <item>
              <description>AssignmentCustomFieldsNoRolldown = 4096</description>
            </item>
          </list>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.LogOnToProjectServerFromProjectProfessional" />
              </term>
              <description>Allows a user to access the server. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.OpenProject" />
              </term>
              <description>Allows a user to open the specified project. Category permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.NewProject" />
              </term>
              <description>Allows a user to add a new project to the Project Server database.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example creates a sample project, and then reads selected items from the project.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Web.Services.Protocols;
using System.Data;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.ReadProjectEntities
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            #region Setup
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            const int PROJECT_ENTITY_TYPE_TASK = 2;
            const int PROJECT_ENTITY_TYPE_RESOURCE = 4;
            const int PROJECT_ENTITY_TYPE_TASK_AND_RESOURCE = PROJECT_ENTITY_TYPE_TASK | PROJECT_ENTITY_TYPE_RESOURCE;

            // Set up the web service objects.
            SvcProject.Project projectSvc = new SvcProject.Project();

            projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
            projectSvc.Credentials = CredentialCache.DefaultCredentials;

            SvcQueueSystem.QueueSystem q = new SvcQueueSystem.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.Credentials = CredentialCache.DefaultCredentials;

            // Create a sample project.
            Console.WriteLine("Creating sample project");

            Guid projectId = CreateSampleProject(projectSvc, q);
            #endregion
            #region Synchronize the project in the reporting database
            Console.WriteLine("Reading tasks and resources\r\n");
            SvcProject.ProjectDataSet readProjDs = projectSvc.ReadProjectEntities(projectId, PROJECT_ENTITY_TYPE_TASK_AND_RESOURCE, SvcProject.DataStoreEnum.WorkingStore);
            #endregion
            #region Write out project
            // Write the project tables to the console.
            Console.WriteLine("And here it is:");
            WriteTablesToConsole(readProjDs.Tables);
            #endregion
         }
         #region Exception Handling and Final
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
         #endregion
      }
      static private void WaitForQueue(SvcQueueSystem.QueueSystem q, Guid jobId)
      {
         SvcQueueSystem.JobState jobState;
         const int QUEUE_WAIT_TIME = 2; // two seconds
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         // Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Thread.Sleep(wait * 1000);
         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == SvcQueueSystem.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == SvcQueueSystem.JobState.Unknown
               || jobState == SvcQueueSystem.JobState.Failed
               || jobState == SvcQueueSystem.JobState.FailedNotBlocking
               || jobState == SvcQueueSystem.JobState.CorrelationBlocked
               || jobState == SvcQueueSystem.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
      }
      static private Guid CreateSampleProject(SvcProject.Project projectSvc, SvcQueueSystem.QueueSystem q)
      {
         SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();
         Guid jobId;
         // Create the project.
         SvcProject.ProjectDataSet.ProjectRow projectRow = projectDs.Project.NewProjectRow();
         projectRow.PROJ_UID = Guid.NewGuid();
         projectRow.PROJ_NAME = "Its a wonderful project at " + 
            DateTime.Now.ToShortDateString().Replace("/", "") + " " + 
            DateTime.Now.ToShortTimeString().Replace(":", "");
         projectRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
         projectDs.Project.AddProjectRow(projectRow);

         // Add some tasks.
         SvcProject.ProjectDataSet.TaskRow taskOne = projectDs.Task.NewTaskRow();
         taskOne.PROJ_UID = projectRow.PROJ_UID;
         taskOne.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskOne.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskOne.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskOne.TASK_NAME = "Task One";
         taskOne.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskOne);

         SvcProject.ProjectDataSet.TaskRow taskTwo = projectDs.Task.NewTaskRow();
         taskTwo.PROJ_UID = projectRow.PROJ_UID;
         taskTwo.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskTwo.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskTwo.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskTwo.TASK_NAME = "Task Two";
         taskTwo.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskTwo);
         
         // Add a couple of resources.
         SvcProject.ProjectDataSet.ProjectResourceRow resOne = projectDs.ProjectResource.NewProjectResourceRow();
         resOne.PROJ_UID = projectRow.PROJ_UID;
         resOne.RES_UID = Guid.NewGuid();
         resOne.RES_NAME = "Brynja Sigrídur Blomsterberg";
         resOne.RES_INITIALS= "BSB";
         resOne.RES_TYPE = (int) PSLibrary.Resource.Type.WorkResource;
         projectDs.ProjectResource.AddProjectResourceRow(resOne);

         SvcProject.ProjectDataSet.ProjectResourceRow resTwo = projectDs.ProjectResource.NewProjectResourceRow();
         resTwo.PROJ_UID = projectRow.PROJ_UID;
         resTwo.RES_UID = Guid.NewGuid();
         resTwo.RES_NAME = "Worapon Pitayaphongpat";
         resTwo.RES_INITIALS = "WP";
         resTwo.RES_TYPE = (int) PSLibrary.Resource.Type.WorkResource;
         projectDs.ProjectResource.AddProjectResourceRow(resTwo);

         // Save the project to the database.
         jobId = Guid.NewGuid();
         projectSvc.QueueCreateProject(jobId, projectDs, false);
         WaitForQueue(q, jobId);
         return projectRow.PROJ_UID;
      }
      // Write all contents of a table collection to the console.
      private static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing.
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // Add a space so that it will not wrap.
            tableWidth += 1;
            // Make the console as wide as the widest table.
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data.
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  dataString = row[i].ToString();
                  // Truncate output, if it is wider than 
                  // the desired column width.
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // Add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // A helper function for WriteTablesToConsole.
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: May not handle byte[]data types well.
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         //Return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it.
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise, use the max col width.
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // Truncate, if over the max length.
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // Always be at least as wide as the colum name.
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadProjectImpacts">
      <MemberSignature Language="C#" Value="public WebSvcProject.ProjectImpactDataSet ReadProjectImpacts (Guid projectUid, WebSvcProject.DataStoreEnum store);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcProject.ProjectImpactDataSet ReadProjectImpacts(valuetype System.Guid projectUid, valuetype WebSvcProject.DataStoreEnum store) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.ReadProjectImpacts(System.Guid,WebSvcProject.DataStoreEnum)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadProjectImpacts (projectUid As Guid, store As DataStoreEnum) As ProjectImpactDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcProject::ProjectImpactDataSet ^ ReadProjectImpacts(Guid projectUid, WebSvcProject::DataStoreEnum store);" />
      <MemberSignature Language="F#" Value="member this.ReadProjectImpacts : Guid * WebSvcProject.DataStoreEnum -&gt; WebSvcProject.ProjectImpactDataSet" Usage="project.ReadProjectImpacts (projectUid, store)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/ReadProjectImpacts", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcProject.ProjectImpactDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectUid" Type="System.Guid" />
        <Parameter Name="store" Type="WebSvcProject.DataStoreEnum" />
      </Parameters>
      <Docs>
        <param name="projectUid">The GUID of the project.</param>
        <param name="store">Specifies the Draft, Published, or Archive database.</param>
        <summary>Reads impacts of the specified project, for portfolio analysys.</summary>
        <returns>Contains the project impact data.</returns>
        <remarks>
          <para>
            <b>ReadProjectImpacts</b> is a new method in Project Server 2013.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.OpenProject" />
              </term>
              <description>Allows a user to open a project from Project Server. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadProjectList">
      <MemberSignature Language="C#" Value="public WebSvcProject.ProjectDataSet ReadProjectList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcProject.ProjectDataSet ReadProjectList() cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.ReadProjectList" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadProjectList () As ProjectDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcProject::ProjectDataSet ^ ReadProjectList();" />
      <MemberSignature Language="F#" Value="member this.ReadProjectList : unit -&gt; WebSvcProject.ProjectDataSet" Usage="project.ReadProjectList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/ReadProjectList", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcProject.ProjectDataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the project name, GUID, and type of each project that is available on the Project Web App instance.</summary>
        <returns>The <b>ProjectDataSet</b> schema contains only the <b>Project</b> table, with the following fields: <b>PROJ_UID</b>, <b>PROJ_NAME</b>, and <b>PROJ_TYPE</b>.</returns>
        <remarks>
          <para>
            <see cref="M:WebSvcProject.Project.ReadProjectStatus(System.Guid,WebSvcProject.DataStoreEnum,System.String,System.Int32)" /> can be used to get a list of projects that are visible to any Project Server user. Because it gets a list of all projects, <b>ReadProjectList</b> is intended for use with administrative utilities and requires a high level of permissions.</para>
          <para>An application must be logged on to a Project Server instance with valid user credentials before it can execute <b>ReadProjectList</b>. </para>
          <para>Use the <see cref="P:WebSvcProject.ProjectDataSet.Project" /> property of the <see cref="T:WebSvcProject.ProjectDataSet" /> to access the list of projects.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageQueue" />
              </term>
              <description>Allows a user to manage the Queuing Service. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageSecurity" />
              </term>
              <description>Allows a user to manage security settings. Global Permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example creates a sample project, and then lists the projects that are found.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Web.Services.Protocols;
using System.Data;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.ReadProjectList
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
          
            // Set up the web service objects.
            SvcProject.Project projectSvc = new SvcProject.Project();

            projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
            projectSvc.Credentials = CredentialCache.DefaultCredentials;

            // Read and display the project list.
            Console.WriteLine("Reading the project list");

            SvcProject.ProjectDataSet projectDs = projectSvc.ReadProjectList();
            foreach (SvcProject.ProjectDataSet.ProjectRow projectRow in projectDs.Project)
            {
               Console.WriteLine(projectRow.PROJ_NAME + " (" + projectRow.PROJ_UID + ")");
            }

         }
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadProjectListByDepartment">
      <MemberSignature Language="C#" Value="public WebSvcProject.ProjectDataSet ReadProjectListByDepartment (Nullable&lt;Guid&gt; departmentUid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcProject.ProjectDataSet ReadProjectListByDepartment(valuetype System.Nullable`1&lt;valuetype System.Guid&gt; departmentUid) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.ReadProjectListByDepartment(System.Nullable{System.Guid})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadProjectListByDepartment (departmentUid As Nullable(Of Guid)) As ProjectDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcProject::ProjectDataSet ^ ReadProjectListByDepartment(Nullable&lt;Guid&gt; departmentUid);" />
      <MemberSignature Language="F#" Value="member this.ReadProjectListByDepartment : Nullable&lt;Guid&gt; -&gt; WebSvcProject.ProjectDataSet" Usage="project.ReadProjectListByDepartment departmentUid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/ReadProjectListByDepartment", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcProject.ProjectDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="departmentUid" Type="System.Nullable&lt;System.Guid&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>System.Xml.Serialization.XmlElement(IsNullable=true)</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="departmentUid">To be added.</param>
        <summary>Returns GUIDs and names for all projects within the specified department for which the user has <b>OpenProject</b> permission.</summary>
        <returns>Contains the list of projects for the specified department.</returns>
        <remarks>
          <para>
            <b>ReadProjectListByDepartment</b> is a new method in Project Server 2013.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.LogOn" />
              </term>
              <description>Allows a user to log on to Project Server. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadProjectStatus">
      <MemberSignature Language="C#" Value="public WebSvcProject.ProjectDataSet ReadProjectStatus (Guid projGuid, WebSvcProject.DataStoreEnum dataStore, string projName, int projType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcProject.ProjectDataSet ReadProjectStatus(valuetype System.Guid projGuid, valuetype WebSvcProject.DataStoreEnum dataStore, string projName, int32 projType) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.ReadProjectStatus(System.Guid,WebSvcProject.DataStoreEnum,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadProjectStatus (projGuid As Guid, dataStore As DataStoreEnum, projName As String, projType As Integer) As ProjectDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcProject::ProjectDataSet ^ ReadProjectStatus(Guid projGuid, WebSvcProject::DataStoreEnum dataStore, System::String ^ projName, int projType);" />
      <MemberSignature Language="F#" Value="member this.ReadProjectStatus : Guid * WebSvcProject.DataStoreEnum * string * int -&gt; WebSvcProject.ProjectDataSet" Usage="project.ReadProjectStatus (projGuid, dataStore, projName, projType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/ReadProjectStatus", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcProject.ProjectDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projGuid" Type="System.Guid" />
        <Parameter Name="dataStore" Type="WebSvcProject.DataStoreEnum" />
        <Parameter Name="projName" Type="System.String" />
        <Parameter Name="projType" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="projGuid">The GUID of the project. Default is <b>Guid.Empty</b>.</param>
        <param name="dataStore">The database in which the project data is located (Drafts, Published, or Archive). Defaults to <see cref="F:WebSvcProject.DataStoreEnum.PublishedStore" />.</param>
        <param name="projName">The name of the project. The default is <b>String.Empty</b>, to get all projects visible to the user.</param>
        <param name="projType">The type of project. Specify by using <see cref="T:Microsoft.Office.Project.Server.Library.Project.ProjectType" /> and cast to an <b>int</b>. The default is <see cref="F:Microsoft.Office.Project.Server.Library.Project.ProjectType.Project" />.</param>
        <summary>Gets the status of the specified project.</summary>
        <returns>The status and permissions of the current user determines the list of projects that are visible. The <b>ProjectDataSet</b> schema contains only the <b>Project</b> table, with the following fields: <b>PROJ_UID</b>, <b>PROJ_NAME</b>, <b>PROJ_TYPE</b>, <b>PROJ_CHECKOUTDATE</b>, <b>PROJ_SESSION_DESCRIPTION</b>, <b>WPROJ_LAST_PUB</b>, <b>PROJ_LAST_SAVED</b>, <b>CREATED_DATE</b>, <b>ENTERPRISE_PROJECT_TYPE_UID</b>, <b>ENTERPRISE_PROJECT_TYPE_NAME</b>, and <b>PROJ_WINPROJ_VERSION_NUMBER</b>.</returns>
        <remarks>
          <para>Because it takes into account the user permissions, the <b>ReadProjectStatus</b> method is the preferred method for obtaining a list of projects. This method populates only certain fields in the <see cref="P:WebSvcProject.ProjectDataSet.Project" /> table. To populate other fields in the <b>Project</b> table, the <see cref="P:WebSvcProject.ProjectDataSet.Task" /> table, or other tables, use <see cref="M:WebSvcProject.Project.ReadProject(System.Guid,WebSvcProject.DataStoreEnum)" /> with the GUID of the desired project.</para>
          <para>The <b>ReadProjectStatus</b> method enables you to get a project by using the name. You must use the full name of the project. To get a project by name only, set <paramref name="projGuid" /> to <b>Guid.Empty</b>, specify the <paramref name="dataStore" />, pass the project name in <paramref name="projName" />, and specify the project type. The example in <see cref="M:WebSvcProject.Project.CreateProjectFromTemplate(System.Guid,System.String)" /> uses the <b>ReadProjectStatus</b> method to retrieve the template.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ViewProjectCenter" />
              </term>
              <description>Allows a user to view the Project Center in Project Web App. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.OpenProject" />
              </term>
              <description>Allows a user to open the specified project. Required only if they do not have <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ViewProjectCenter" />. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>Example for WCF:   The <b>ReadMyProjects</b> example does the following:</para>
          <list type="number">
            <item>
              <description>Gets the GUID of the current user.</description>
            </item>
            <item>
              <description>Reads the list of all projects visible to the user, by using <b>ReadProjectStatus</b>.</description>
            </item>
            <item>
              <description>Reads each project in the list, by using <b>ReadProject</b>.</description>
            </item>
            <item>
              <description>If the project owner matches the current user:</description>
            </item>
            <item>
              <description>Writes each output <b>ProjectDataSet</b> to an XML file, for comparison of the schemas.</description>
            </item>
            <item>
              <description>For example output of the exception handler, see the Code Example for WCF section in Project Server Error Codes.</description>
            </item>
          </list>
          <para>
            <b>Tip</b>: If there are a large number of projects to read, a query of the Reporting database can be more efficient. Alternately, a PSI extension can do all of the calls to <b>ReadProjectStatus</b> and <b>ReadProject</b> on the server, and return just the final <b>ProjectDataSet</b>.</para>
          <para>For information about using the code sample in a Microsoft Visual Studio 2010 project and creating an app.config file for configuration of the WCF endpoints, see Prerequisites for WCF-Based Code Samples.</para>
          <code>using System;
using System.Text;
using System.ServiceModel;
using System.Xml;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.ReadMyProjects
{
    class Program
    {
        private const string ENDPOINT_PROJECT = "basicHttp_Project";
        private const string ENDPOINT_RESOURCE = "basicHttp_Resource";

        // Change the output directory for your computer.
        private const string OUTPUT_FILES = @"C:\Project\Samples\Output\";
        private const string XML_FILE = "MyProjects.xml";
        private const string XML_FILE2 = "MyProjects2.xml";

        private static SvcProject.ProjectClient projectClient;
        private static SvcResource.ResourceClient resourceClient;
 
        static void Main(string[] args)
        {
            string outFilePath = OUTPUT_FILES + XML_FILE;
            string outFilePath2 = OUTPUT_FILES + XML_FILE2;

            try
            {
                ConfigClientEndpoints(ENDPOINT_PROJECT);
                ConfigClientEndpoints(ENDPOINT_RESOURCE);

                Guid myUid = resourceClient.GetCurrentUserUid();
                Console.WriteLine("My GUID: {0}", myUid.ToString());

                // Get the list of all projects visible to the user.
                SvcProject.ProjectDataSet projectDs = projectClient.ReadProjectStatus(
                    Guid.Empty, SvcProject.DataStoreEnum.WorkingStore,
                    string.Empty, (int)PSLibrary.Project.ProjectType.Project);

                SvcProject.ProjectDataSet tempProjDs = null;

                // Create an empty ProjectDataSet for projects the user owns.
                // By cloning the projectDs object, you get the same schema 
                // that is created by ReadProjectStatus.
                SvcProject.ProjectDataSet myProjectsDs = 
                    (SvcProject.ProjectDataSet)projectDs.Clone();

                // Create an empty ProjectDataSet that contains the complete schema.
                SvcProject.ProjectDataSet myProjectsDs2 = new SvcProject.ProjectDataSet();

                Console.WriteLine("Projects I own:");

                for (int i = 0; i &amp;lt; projectDs.Project.Count; i++)
                {
                    tempProjDs = projectClient.ReadProject(projectDs.Project[i].PROJ_UID,
                        SvcProject.DataStoreEnum.WorkingStore);

                    if (tempProjDs.Project[0].ProjectOwnerID == myUid)
                    {
                        Console.WriteLine("\t" + tempProjDs.Project[0].PROJ_NAME);
                        myProjectsDs.Project.ImportRow(
                            (SvcProject.ProjectDataSet.ProjectRow)tempProjDs.Project[0]);
                        myProjectsDs2.Project.ImportRow(
                            (SvcProject.ProjectDataSet.ProjectRow)tempProjDs.Project[0]);

                        // You can add task data to either ProjectDataSet. However,
                        // only myProjectsDs2 contains the complete Project table schema.
                        for (int t = 0; t &amp;lt; tempProjDs.Task.Count; t++)
                        {
                            // To get all of the task data, use the following statement
                            // instead of adding a new task row with specific fields.
                            //myProjectsDs2.Task.ImportRow(
                            //    (SvcProject.ProjectDataSet.TaskRow)tempProjDs.Task[t]);

                            // Add specific data in a new task row.
                            SvcProject.ProjectDataSet.TaskRow taskRow = 
                                myProjectsDs2.Task.NewTaskRow();

                            // If you comment-out the following line, you get a constraint error.
                            taskRow.PROJ_UID = tempProjDs.Task[t].PROJ_UID;

                            taskRow.TASK_UID = tempProjDs.Task[t].TASK_UID;
                            taskRow.TASK_NAME = tempProjDs.Task[t].TASK_NAME;
                            taskRow.TASK_IS_MANUAL = tempProjDs.Task[t].TASK_IS_MANUAL;
                            myProjectsDs2.Task.AddTaskRow(taskRow);
                        }
                    }
                }
                Console.WriteLine(
                    "\nXML output of myProjectsDs and myProjectDs2:\n\t{0}",
                    outFilePath);

                // Write both XML files for comparison of the ProjectDataSet schemas.
                myProjectsDs.WriteXml(outFilePath);
                myProjectsDs2.WriteXml(outFilePath2);
            }
            catch (FaultException fault)
            {
                // Use the WCF FaultException, because the ASMX SoapException does not 
                // exist in a WCF-based application.
                WriteFaultOutput(fault);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            Console.Write("\nPress any key to exit... ");
            Console.ReadKey(true);
        }

        // Extract a PSClientError object from the WCF FaultException object, and
        // then display the exception details and each error in the PSClientError stack.
        private static void WriteFaultOutput(FaultException fault)
        {
            string errAttributeName;
            string errAttribute;
            string errOut;
            string errMess = "".PadRight(30, '=') + "\r\n"
                + "Error details: " + "\r\n";

            PSLibrary.PSClientError error = Helpers.GetPSClientError(fault, out errOut);
            errMess += errOut;

            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            PSLibrary.PSErrorInfo thisError;

            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
                thisError = errors[i];
                errMess += "\r\n".PadRight(30, '=') + "\r\nPSClientError output:\r\n";
                errMess += thisError.ErrId.ToString() + "\n";

                for (int j = 0; j &amp;lt; thisError.ErrorAttributes.Length; j++)
                {
                    errAttributeName = thisError.ErrorAttributeNames()[j];
                    errAttribute = thisError.ErrorAttributes[j];
                    errMess += "\r\n\t" + errAttributeName
                        + ": " + errAttribute;
                }
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
            Console.ResetColor();
        }

        // Use the endpoints defined in app.config to configure the client.
        public static void ConfigClientEndpoints(string endpt)
        {
            if (endpt == ENDPOINT_PROJECT)
                projectClient = new SvcProject.ProjectClient(endpt);
            else if (endpt == ENDPOINT_RESOURCE)
                resourceClient = new SvcResource.ResourceClient(endpt);
        }            
    }

    // Helper method: GetPSClientError.
    class Helpers
    {
        /// &amp;lt;summary&amp;gt;
        /// Extract a PSClientError object from the ServiceModel.FaultException,
        /// for use in output of the GetPSClientError stack of errors.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="e"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name="errOut"&amp;gt;Shows that FaultException has more information 
        /// about the errors than PSClientError has. FaultException can also contain 
        /// other types of errors, such as failure to connect to the server.&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;PSClientError object, for enumerating errors.&amp;lt;/returns&amp;gt;
        public static PSLibrary.PSClientError GetPSClientError(FaultException e, 
                                                               out string errOut)
        {
            const string PREFIX = "GetPSClientError() returns null: ";
            errOut = string.Empty;
            PSLibrary.PSClientError psClientError = null;

            if (e == null)
            {
                errOut = PREFIX + "Null parameter (FaultException e) passed in.";
                psClientError = null;
            }
            else
            {
                // Get a ServiceModel.MessageFault object.
                var messageFault = e.CreateMessageFault();

                if (messageFault.HasDetail)
                {
                    using (var xmlReader = messageFault.GetReaderAtDetailContents())
                    {
                        var xml = new XmlDocument();
                        xml.Load(xmlReader);

                        var serverExecutionFault = xml["ServerExecutionFault"];
                        if (serverExecutionFault != null)
                        {
                            var exceptionDetails = serverExecutionFault["ExceptionDetails"];
                            if (exceptionDetails != null)
                            {
                                try
                                {
                                    errOut = exceptionDetails.InnerXml + "\r\n";
                                    psClientError = 
                                        new PSLibrary.PSClientError(exceptionDetails.InnerXml);
                                }
                                catch (InvalidOperationException ex)
                                {
                                    errOut = PREFIX + "Unable to convert fault exception info ";
                                    errOut += "a valid Project Server error message. Message: \n\t";
                                    errOut += ex.Message;
                                    psClientError = null;
                                }
                            }
                            else
                            {
                                errOut = PREFIX 
                                    + "The FaultException e is a ServerExecutionFault, "
                                    + "but does not have ExceptionDetails.";
                            }
                        }
                        else
                        {
                            errOut = PREFIX 
                                + "The FaultException e is not a ServerExecutionFault.";
                        }
                    }
                }
                else // No detail in the MessageFault.
                {
                    errOut = PREFIX + "The FaultException e does not have any detail.";
                }
            }
            errOut += "\r\n" + e.ToString() + "\r\n";
            return psClientError;
        }
    }
}</code>
          <para>Example for ASMX:   The following example creates a sample project, and then gets the status of all projects in the working store and reports it to the console.</para>
          <para>For critical information about running this code sample, see Prerequisites for ASMX-Based Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.ReadProjectStatus
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            #region Setup
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";

            // Set up the web service objects.
            SvcProject.Project projectSvc = new SvcProject.Project();

            projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
            projectSvc.Credentials = CredentialCache.DefaultCredentials;

            SvcQueueSystem.QueueSystem q = new SvcQueueSystem.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.Credentials = CredentialCache.DefaultCredentials;

            // Create a sample project.
            Console.WriteLine("Creating sample project");
            Guid projectId = CreateSampleProject(projectSvc, q);
            #endregion
            #region Read Project Status
            // Read all the projects.
            Console.WriteLine("Read the projects");
            SvcProject.ProjectDataSet readProjDs = projectSvc.ReadProjectStatus(Guid.Empty, SvcProject.DataStoreEnum.WorkingStore,string.Empty,(int) PSLibrary.Project.ProjectType.Project);
            #endregion
            #region Write out projects
            Console.ForegroundColor = ConsoleColor.DarkCyan;
            foreach (SvcProject.ProjectDataSet.ProjectRow project in readProjDs.Project)
            {
               Console.WriteLine(project.PROJ_NAME + " was last saved " + project.PROJ_LAST_SAVED);
            }
            Console.ResetColor();
            #endregion
         }
         #region Exception Handling and Final
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
         #endregion
      }
      static private void WaitForQueue(SvcQueueSystem.QueueSystem q, Guid jobId)
      {
         SvcQueueSystem.JobState jobState;
         const int QUEUE_WAIT_TIME = 2; // two seconds
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         // Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Thread.Sleep(wait * 1000);
         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == SvcQueueSystem.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == SvcQueueSystem.JobState.Unknown
               || jobState == SvcQueueSystem.JobState.Failed
               || jobState == SvcQueueSystem.JobState.FailedNotBlocking
               || jobState == SvcQueueSystem.JobState.CorrelationBlocked
               || jobState == SvcQueueSystem.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
      }
      static private Guid CreateSampleProject(SvcProject.Project projectSvc,SvcQueueSystem.QueueSystem q)
      {
         SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();
         Guid jobId;
         // Create the project.
         SvcProject.ProjectDataSet.ProjectRow projectRow = projectDs.Project.NewProjectRow();
         projectRow.PROJ_UID = Guid.NewGuid();
         projectRow.PROJ_NAME = "Its a wonderful project at " + 
            DateTime.Now.ToShortDateString().Replace("/", "") + " " + 
            DateTime.Now.ToShortTimeString().Replace(":", "");
         projectRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
         projectDs.Project.AddProjectRow(projectRow);

         // Add some tasks.
         SvcProject.ProjectDataSet.TaskRow taskOne = projectDs.Task.NewTaskRow();
         taskOne.PROJ_UID = projectRow.PROJ_UID;
         taskOne.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskOne.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskOne.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskOne.TASK_NAME = "Task One";
         taskOne.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskOne);

         SvcProject.ProjectDataSet.TaskRow taskTwo = projectDs.Task.NewTaskRow();
         taskTwo.PROJ_UID = projectRow.PROJ_UID;
         taskTwo.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskTwo.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskTwo.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskTwo.TASK_NAME = "Task Two";
         taskTwo.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskTwo);

         //Add some resources.
         SvcProject.ProjectDataSet.ProjectResourceRow resourceOne = projectDs.ProjectResource.NewProjectResourceRow();
         resourceOne.PROJ_UID = projectRow.PROJ_UID;
         resourceOne.RES_UID = Guid.NewGuid();
         resourceOne.RES_NAME = "Brynja Sigrídur Blomsterberg";
         resourceOne.RES_INITIALS = "BSB";
         projectDs.ProjectResource.AddProjectResourceRow(resourceOne);
         CreateAssignment(projectDs, taskOne.TASK_UID, resourceOne.RES_UID);
         CreateAssignment(projectDs, taskTwo.TASK_UID, resourceOne.RES_UID);


         SvcProject.ProjectDataSet.ProjectResourceRow resourceTwo = projectDs.ProjectResource.NewProjectResourceRow();
         resourceTwo.PROJ_UID = projectRow.PROJ_UID;
         resourceTwo.RES_UID = Guid.NewGuid();
         resourceTwo.RES_NAME = "Ioannis Xylaras";
         resourceTwo.RES_INITIALS = "IX";
         projectDs.ProjectResource.AddProjectResourceRow(resourceTwo);
         CreateAssignment(projectDs, taskOne.TASK_UID, resourceTwo.RES_UID);
         CreateAssignment(projectDs, taskTwo.TASK_UID, resourceTwo.RES_UID);

         // Save the project to the database.
         jobId = Guid.NewGuid();
         projectSvc.QueueCreateProject(jobId, projectDs, false);
         WaitForQueue(q, jobId);
         return projectRow.PROJ_UID;
      }
      private static void CreateAssignment(SvcProject.ProjectDataSet projectDs, Guid taskGuid, Guid resourceGuid)
      {
         SvcProject.ProjectDataSet.AssignmentRow assnRow = projectDs.Assignment.NewAssignmentRow();
         assnRow.PROJ_UID = projectDs.Project[0].PROJ_UID;
         assnRow.ASSN_UID = Guid.NewGuid();
         assnRow.TASK_UID = taskGuid;
         assnRow.RES_UID = resourceGuid;
         projectDs.Assignment.AddAssignmentRow(assnRow);
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadProjectSyncErrorInfo">
      <MemberSignature Language="C#" Value="public WebSvcProject.SyncErrorsDataSet ReadProjectSyncErrorInfo (Guid wssListUid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcProject.SyncErrorsDataSet ReadProjectSyncErrorInfo(valuetype System.Guid wssListUid) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.ReadProjectSyncErrorInfo(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadProjectSyncErrorInfo (wssListUid As Guid) As SyncErrorsDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcProject::SyncErrorsDataSet ^ ReadProjectSyncErrorInfo(Guid wssListUid);" />
      <MemberSignature Language="F#" Value="member this.ReadProjectSyncErrorInfo : Guid -&gt; WebSvcProject.SyncErrorsDataSet" Usage="project.ReadProjectSyncErrorInfo wssListUid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/ReadProjectSyncErrorInfo", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcProject.SyncErrorsDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wssListUid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="wssListUid">The GUID of the SharePoint task list.</param>
        <summary>Retrieves the error status for a synchronization request of the specified SharePoint task list with Project Server.</summary>
        <returns>Contains synchronization errors for the specified SharePoint task list.</returns>
        <remarks>
          <para>This is a new method in Project Server 2013. The <b>ReadProjectSyncErrorInfo</b> method gets the error status from an attempted syncyronization or settings update that uses one of the following methods: <b>CreateWssListSyncedProject</b>, <b>SyncProjectWithWss</b>, or <b>UpdateProjectSyncSettings</b>.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.NewProject" />
              </term>
              <description>Allows a user to create a project. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.PublishProject" />
              </term>
              <description>Allows a user to publish a project to the Project Server Published database.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadProjectSyncSettings">
      <MemberSignature Language="C#" Value="public WebSvcProject.SyncDataSet ReadProjectSyncSettings (Guid[] syncEntityUids, WebSvcProject.SyncEntityUidType syncEntityUidType, bool includeMappingData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcProject.SyncDataSet ReadProjectSyncSettings(valuetype System.Guid[] syncEntityUids, valuetype WebSvcProject.SyncEntityUidType syncEntityUidType, bool includeMappingData) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.ReadProjectSyncSettings(System.Guid[],WebSvcProject.SyncEntityUidType,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcProject::SyncDataSet ^ ReadProjectSyncSettings(cli::array &lt;Guid&gt; ^ syncEntityUids, WebSvcProject::SyncEntityUidType syncEntityUidType, bool includeMappingData);" />
      <MemberSignature Language="F#" Value="member this.ReadProjectSyncSettings : Guid[] * WebSvcProject.SyncEntityUidType * bool -&gt; WebSvcProject.SyncDataSet" Usage="project.ReadProjectSyncSettings (syncEntityUids, syncEntityUidType, includeMappingData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/ReadProjectSyncSettings", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcProject.SyncDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncEntityUids" Type="System.Guid[]" />
        <Parameter Name="syncEntityUidType" Type="WebSvcProject.SyncEntityUidType" />
        <Parameter Name="includeMappingData" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="syncEntityUids">The GUIDs of the projects or SharePoint task lists that have been synchronized.</param>
        <param name="syncEntityUidType">Specifies whether to read the synchronization settings for a set of projects or SharePoint task lists. </param>
        <param name="includeMappingData">Specifies whether to include synchronization mapping data.</param>
        <summary>Retrieves the synchronization data for a set of projects or SharePoint task lists that are synchronized.</summary>
        <returns>Contains the synchronization settings for each synchronized project or SharePoint task list.</returns>
        <remarks>
          <para>This is a new method in Project Server 2013. The <b>ReadProjectSyncSettings</b> method requires that the projects or SharePoint task lists that are specified by <paramref name="syncEntityUids" /> have already been synchronized by the <b>CreateWssListSyncedProject</b> method or the <b>SyncProjectWithWss</b> method. For a code sample that includes the <b>ReadProjectSyncSettings</b> method, see <see cref="M:WebSvcProject.Project.UpdateProjectSyncSettings(WebSvcProject.SyncDataSet)" />.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.PublishProject" />
              </term>
              <description>Allows a user to publish a project to the Project Server Published database.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadProjectTeam">
      <MemberSignature Language="C#" Value="public WebSvcProject.ProjectTeamDataSet ReadProjectTeam (Guid projectUid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcProject.ProjectTeamDataSet ReadProjectTeam(valuetype System.Guid projectUid) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.ReadProjectTeam(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadProjectTeam (projectUid As Guid) As ProjectTeamDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcProject::ProjectTeamDataSet ^ ReadProjectTeam(Guid projectUid);" />
      <MemberSignature Language="F#" Value="member this.ReadProjectTeam : Guid -&gt; WebSvcProject.ProjectTeamDataSet" Usage="project.ReadProjectTeam projectUid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/ReadProjectTeam", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcProject.ProjectTeamDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectUid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="projectUid">The GUID of the project.</param>
        <summary>Gets information about the local project resources and the enterprise resources that are referenced in a specified project.</summary>
        <returns> Contains the resource data for the specified project.</returns>
        <remarks>
          <para>Wait for the queue to be emptied of any pending team member additions before trying to read the team. If you read the team before the team member additions are finished being processed, you will not receive those team members that are still in the queue.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.BuildTeamOnProject" />
              </term>
              <description>Allows a user to make resource assignments from the resource pool to the specified project. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example creates a sample project, reads the resources for the team, and then lists them to the console.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.ReadProjectTeam
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            #region Setup
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";

            Guid sessionId = Guid.NewGuid();

            // Set up the web service objects.
            SvcProject.Project projectSvc = new SvcProject.Project();
            projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
            projectSvc.Credentials = CredentialCache.DefaultCredentials;

            SvcResource.Resource resourceSvc = new SvcResource.Resource();
            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.UseDefaultCredentials = true;

            SvcQueueSystem.QueueSystem q = new SvcQueueSystem.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.Credentials = CredentialCache.DefaultCredentials;

            // Create a sample project.
            Guid projectId = CreateSampleProject(projectSvc, q,resourceSvc);
            #endregion
            #region Read Project Team
            // Read the team for the project.
            SvcProject.ProjectTeamDataSet teamDs = projectSvc.ReadProjectTeam(projectId);

            // Write out the team dataset.
            WriteTablesToConsole(teamDs.Tables);
            #endregion
         }

         #region Exception Handling and Final
         catch (SoapException ex)
         {
            DisplaySoapException(ex);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
            Console.ResetColor();
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
            Console.ResetColor();
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
         #endregion
      }
      #region Supporting Classes
      static private void DisplaySoapException(SoapException ex)
      {
         string errMess = "==============================\r\nError: \r\n";
         PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
         PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
         for (int i = 0; i &amp;lt; errors.Length; i++)
         {
            errMess += "\n" + ex.Message.ToString() + "\r\n";
            errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
            errMess += errors[i].ErrId.ToString() + "\n";

            for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
            {
               errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
            }
            errMess += "\r\n".PadRight(30, '=');
         }
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine(errMess);
         Console.ResetColor();
      }
      static private void WaitForQueue(SvcQueueSystem.QueueSystem q, Guid jobId)
      {
         SvcQueueSystem.JobState jobState;
         const int QUEUE_WAIT_TIME = 2; // two seconds
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         // Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Thread.Sleep(wait * 1000);
         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == SvcQueueSystem.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == SvcQueueSystem.JobState.Unknown
               || jobState == SvcQueueSystem.JobState.Failed
               || jobState == SvcQueueSystem.JobState.FailedNotBlocking
               || jobState == SvcQueueSystem.JobState.CorrelationBlocked
               || jobState == SvcQueueSystem.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
      }
      static private Guid CreateSampleProject(SvcProject.Project projectSvc, SvcQueueSystem.QueueSystem q, SvcResource.Resource resourceSvc)
      {
         SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();
         Guid jobId;
         Guid sessionUid = Guid.NewGuid();
         const string SESSION_DESC = "Test Utility";

         // Create the project.
         SvcProject.ProjectDataSet.ProjectRow projectRow = projectDs.Project.NewProjectRow();
         Guid projectId = Guid.NewGuid();
         projectRow.PROJ_UID = projectId;
         projectRow.PROJ_NAME = "Its a wonderful project at " + 
            DateTime.Now.ToShortDateString().Replace("/", "") + " " + 
            DateTime.Now.ToShortTimeString().Replace(":", "") + " " + 
            DateTime.Now.Millisecond.ToString();
         projectRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
         projectDs.Project.AddProjectRow(projectRow);

         // Add some tasks.
         SvcProject.ProjectDataSet.TaskRow taskOne = projectDs.Task.NewTaskRow();
         taskOne.PROJ_UID = projectId;
         taskOne.TASK_UID = Guid.NewGuid();
         taskOne.TASK_NAME = "Task One";
         taskOne.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Hour;
         taskOne.TASK_DUR = 10 * 60 * 8 * 3;  //Three eight hour days
         taskOne.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskOne);

         SvcProject.ProjectDataSet.TaskRow taskTwo = projectDs.Task.NewTaskRow();
         taskTwo.PROJ_UID = projectId;
         taskTwo.TASK_UID = Guid.NewGuid();
         taskTwo.TASK_NAME = "Task Two";
         taskTwo.TASK_DUR = 10 * 60 * 6;  // 6 hours
         taskTwo.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.EHour; // Duration Estimate and shoudl be displayed in hours
         projectDs.Task.AddTaskRow(taskTwo);

         // Make task two dependent on task one.
         SvcProject.ProjectDataSet.DependencyRow dependency = projectDs.Dependency.NewDependencyRow();
         dependency.LINK_UID = Guid.NewGuid();
         dependency.PROJ_UID = projectId;
         dependency.LINK_PRED_UID = taskOne.TASK_UID;
         dependency.LINK_SUCC_UID = taskTwo.TASK_UID;
         dependency.LINK_TYPE = 1;  //Finish to Start
         dependency.LINK_LAG_FMT = (int)PSLibrary.Task.DurationFormat.Hour;
         dependency.LINK_LAG = 0;
         projectDs.Dependency.AddDependencyRow(dependency);

         // Add a summary task.
         SvcProject.ProjectDataSet.TaskRow taskOthers = projectDs.Task.NewTaskRow();
         taskOthers.PROJ_UID = projectId;
         taskOthers.TASK_UID = Guid.NewGuid();
         taskOthers.TASK_NAME = "Related Tasks";
         projectDs.Task.AddTaskRow(taskOthers);

         // Add some subtasks.

         SvcProject.ProjectDataSet.TaskRow taskThree = projectDs.Task.NewTaskRow();
         taskThree.PROJ_UID = projectId;
         taskThree.TASK_UID = Guid.NewGuid();
         taskThree.TASK_NAME = "Task Three";
         taskThree.TASK_PARENT_UID = taskOthers.TASK_UID;
         taskThree.TASK_OUTLINE_LEVEL = 2;
         taskThree.TASK_DUR = 9600; //Two days
         taskThree.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         projectDs.Task.AddTaskRow(taskThree);

         SvcProject.ProjectDataSet.TaskRow taskFour = projectDs.Task.NewTaskRow();
         taskFour.PROJ_UID = projectId;
         taskFour.TASK_UID = Guid.NewGuid();
         taskFour.TASK_NAME = "Task Four";
         taskFour.TASK_PARENT_UID = taskOthers.TASK_UID;
         taskFour.TASK_DUR = 4800; //One day
         taskFour.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Hour;
         taskFour.TASK_OUTLINE_LEVEL = 2;
         projectDs.Task.AddTaskRow(taskFour);


         // Make task four dependent on task three.
         dependency = projectDs.Dependency.NewDependencyRow();
         dependency.LINK_UID = Guid.NewGuid();
         dependency.PROJ_UID = projectId;
         dependency.LINK_PRED_UID = taskThree.TASK_UID;
         dependency.LINK_SUCC_UID = taskFour.TASK_UID;
         dependency.LINK_TYPE = 1;  //Finish to Start
         dependency.LINK_LAG = 0;
         projectDs.Dependency.AddDependencyRow(dependency);

         // Make others tasks dependent on task two.
         dependency = projectDs.Dependency.NewDependencyRow();
         dependency.LINK_UID = Guid.NewGuid();
         dependency.PROJ_UID = projectId;
         dependency.LINK_PRED_UID = taskTwo.TASK_UID;
         dependency.LINK_SUCC_UID = taskOthers.TASK_UID;
         dependency.LINK_TYPE = 1;  //Finish to Start
         dependency.LINK_LAG = 0;
         projectDs.Dependency.AddDependencyRow(dependency);

         //Add some local project resources.
         SvcProject.ProjectDataSet.ProjectResourceRow resourceOne = projectDs.ProjectResource.NewProjectResourceRow();
         resourceOne.PROJ_UID = projectId;
         resourceOne.RES_UID = Guid.NewGuid();
         resourceOne.RES_NAME = "Brynja Sigrídur Blomsterberg";
         resourceOne.RES_INITIALS = "BSB";
         projectDs.ProjectResource.AddProjectResourceRow(resourceOne);
         CreateAssignment(projectDs, taskOne.TASK_UID, resourceOne.RES_UID);
         CreateAssignment(projectDs, taskTwo.TASK_UID, resourceOne.RES_UID);

         SvcProject.ProjectDataSet.ProjectResourceRow resourceTwo = projectDs.ProjectResource.NewProjectResourceRow();
         resourceTwo.PROJ_UID = projectId;
         resourceTwo.RES_UID = Guid.NewGuid();
         resourceTwo.RES_NAME = "Ioannis Xylaras";
         resourceTwo.RES_INITIALS = "IX";
         projectDs.ProjectResource.AddProjectResourceRow(resourceTwo);
         CreateAssignment(projectDs, taskOne.TASK_UID, resourceTwo.RES_UID);
         CreateAssignment(projectDs, taskTwo.TASK_UID, resourceTwo.RES_UID);
         CreateAssignment(projectDs, taskThree.TASK_UID, resourceTwo.RES_UID);
         CreateAssignment(projectDs, taskFour.TASK_UID, resourceTwo.RES_UID);

         // Save the project to the database.
         jobId = Guid.NewGuid();
         projectSvc.QueueCreateProject(jobId, projectDs, false);
         WaitForQueue(q, jobId);

         // Add or retrieve an enterprise resource.
         SvcResource.ResourceDataSet resourceDs = EnsureEnterpriseResource(resourceSvc);

         // Add the resource to the team.
         SvcProject.ProjectTeamDataSet projectTeamDs = new SvcProject.ProjectTeamDataSet();
         ProjectTeamAddResource(projectTeamDs, projectId, resourceDs.Resources[0].RES_UID, resourceDs.Resources[0].RES_UID);

         projectSvc.CheckOutProject(projectId, sessionUid, SESSION_DESC);

         // Save the team.
         jobId = Guid.NewGuid();
         projectSvc.QueueUpdateProjectTeam(jobId, sessionUid, projectId, projectTeamDs);
         WaitForQueue(q, jobId);

         // Read the project back in to get the updated team.
         //projectDs = projectSvc.ReadProject(projectId, SvcProject.DataStoreEnum.WorkingStore);

         projectDs = new SvcProject.ProjectDataSet();
         // Add the resource to an assignment
         CreateAssignment(projectDs, taskOne.TASK_UID, resourceDs.Resources[0].RES_UID, projectId);

         // Save the enterprise assignment.
         jobId = Guid.NewGuid();
         // Get only the added rows.
         projectDs = (SvcProject.ProjectDataSet)projectDs.GetChanges(DataRowState.Added);
         projectSvc.QueueAddToProject(jobId, sessionUid, projectDs, false);
         WaitForQueue(q, jobId);

         // Check in the project. 
         jobId = Guid.NewGuid();
         projectSvc.QueueCheckInProject(jobId, projectId, false, sessionUid, SESSION_DESC);
         WaitForQueue(q, jobId);

         return projectRow.PROJ_UID;
      }
      // A helper function for CreateSampleProject.
      // Makes a simple assignment.
      private static void CreateAssignment(SvcProject.ProjectDataSet projectDs, Guid taskGuid, Guid resourceGuid)
      {
         CreateAssignment(projectDs, taskGuid, resourceGuid, projectDs.Project[0].PROJ_UID);
      }
      private static void CreateAssignment(SvcProject.ProjectDataSet projectDs, Guid taskGuid, Guid resourceGuid, Guid projectId)
      {
         SvcProject.ProjectDataSet.AssignmentRow assnRow = projectDs.Assignment.NewAssignmentRow();
         assnRow.PROJ_UID = projectId;
         assnRow.ASSN_UID = Guid.NewGuid();
         assnRow.TASK_UID = taskGuid;
         assnRow.RES_UID = resourceGuid;
         projectDs.Assignment.AddAssignmentRow(assnRow);
      }
      // A helper function for Create Project.
      // Adds an enterprise resource to the project
      // so that it can be used on the project.
      public static void ProjectTeamAddResource(SvcProject.ProjectTeamDataSet projTeamDataSet, Guid projGuid, Guid resGuid, Guid newResGuid)
      {
         SvcProject.ProjectTeamDataSet.ProjectTeamRow projTeamRow = projTeamDataSet.ProjectTeam.NewProjectTeamRow();
         projTeamRow.PROJ_UID = projGuid;
         projTeamRow.RES_UID = resGuid;
         projTeamRow.NEW_RES_UID = newResGuid;
         projTeamDataSet.ProjectTeam.AddProjectTeamRow(projTeamRow);
      }
      // A helper function for Create Project.
      // Creates or retrieves an enterprise resource.
      private static SvcResource.ResourceDataSet EnsureEnterpriseResource(SvcResource.Resource resourceSvc)
      {
         const string RES_NAME = "Lertchai Treetawatchaiwong";
         SvcResource.ResourceDataSet resourceDs = new SvcResource.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_INITIALSColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_TYPEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));

         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, RES_NAME);
         resourceFilter.Criteria = existingResource;
         resourceDs = resourceSvc.ReadResources(resourceFilter.GetXml(), false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs;
         }
         else
         {
            resourceDs = new SvcResource.ResourceDataSet();
            SvcResource.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
            resourceRow.RES_UID = Guid.NewGuid();
            resourceRow.RES_NAME = RES_NAME;
            resourceRow.RES_INITIALS = "LT";
            resourceDs.Resources.AddResourcesRow(resourceRow);
            resourceSvc.CreateResources(resourceDs, false, true);
            return resourceDs;
         }
      }
      // Write all contents of a table collection to the console.
      private static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {
            int[] columnWidths=new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString ;
            Console.WriteLine("Table: " + table.TableName);
            // Write out the column names and get their spacing
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
              columnWidths[i]=GetColumnWidth(table.Columns[i]);
              tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

              tableWidth += columnWidths[i];
            }
            tableWidth += 1;
            // make the console as wide as the widest table
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth?Console.BufferWidth:tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  dataString = row[i].ToString();
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth,'-'));
         }
         Console.ResetColor();
      }
      // A helper function for WriteTablesToConsole.
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: may not handle byte[]
         const int MAX_COL_WIDTH = 40;
         int dataWidth=0;

         // Return 12 for numbers, 30 for dates, and string width for strings.
         switch(column.DataType.UnderlyingSystemType.ToString()){
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth=12;
               break;
            case "System.DateTime": 
            case "System.TimeSpan":
               dataWidth =30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
      private static void CopyDissimilarRows(DataRow target, DataRow source)
      {
         for (int i = 0; i &amp;lt; source.Table.Columns.Count; i++)
         {
            if (target.Table.Columns.Contains(source.Table.Columns[i].ColumnName))
            {

               target[source.Table.Columns[i].ColumnName] = source[i];
            }
         }
      }
      #endregion
   }
}

</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadSchedulingContext">
      <MemberSignature Language="C#" Value="public WebSvcProject.ProjectContextDataSet ReadSchedulingContext (Guid[] projectUids, Guid[] resourceUids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcProject.ProjectContextDataSet ReadSchedulingContext(valuetype System.Guid[] projectUids, valuetype System.Guid[] resourceUids) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.ReadSchedulingContext(System.Guid[],System.Guid[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadSchedulingContext (projectUids As Guid(), resourceUids As Guid()) As ProjectContextDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcProject::ProjectContextDataSet ^ ReadSchedulingContext(cli::array &lt;Guid&gt; ^ projectUids, cli::array &lt;Guid&gt; ^ resourceUids);" />
      <MemberSignature Language="F#" Value="member this.ReadSchedulingContext : Guid[] * Guid[] -&gt; WebSvcProject.ProjectContextDataSet" Usage="project.ReadSchedulingContext (projectUids, resourceUids)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/ReadSchedulingContext", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcProject.ProjectContextDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectUids" Type="System.Guid[]" />
        <Parameter Name="resourceUids" Type="System.Guid[]" />
      </Parameters>
      <Docs>
        <param name="projectUids">An array of project GUIDs.</param>
        <param name="resourceUids">An array of resource GUIDs.</param>
        <summary>Gets the scheduling context based on a set of projects and resources.</summary>
        <returns>Contains the scheduling context that is derived from the specified projects and resources.</returns>
        <remarks>
          <para>Gets a list of projects that are related to specified projects or resources. A relationship exists if one of the following conditions is met:</para>
          <list type="bullet">
            <item>
              <description>Projects share enterprise resources (either those on the project team or in the input list).</description>
            </item>
            <item>
              <description>Projects have interproject dependencies (cross-project links).</description>
            </item>
            <item>
              <description>Projects share resources with or have cross-project links with projects that are related to projects in the input list (an indirect relationship).</description>
            </item>
          </list>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.OpenProject" />
              </term>
              <description>Allows a user to open the specified projects. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>Consider two projects that share one enterprise resource, as in the following table.</para>
          <list type="table">
            <item>
              <term>Project1f0e98e26-2c9c-4f74-b40a-640f3f3f03f5</term>
              <description>Resource1; d58fd816-d380-46e3-aff1-6cef617d32a2Resource2; b3dab395-bc33-4dd7-a3a7-a45522857369 </description>
            </item>
            <item>
              <term>Project2a9d03b87-37f1-473d-90f6-77ba3c521a40</term>
              <description>Resource1; d58fd816-d380-46e3-aff1-6cef617d32a2 </description>
            </item>
          </list>
          <para>In the following code fragment for a test application, <b>WebSvcProject</b> is an arbitrary name for a reference to the Project web service, and <b>project</b> is an initialized instance of the <b>WebSvcProject.Project</b> class.</para>
          <code>try
{
    Guid[] projectUids = { new Guid("a9d03b87-37f1-473d-90f6-77ba3c521a40") };
    Guid[] resourceUids = null;
    
    WebSvcProject.ProjectContextDataSet dsProjectContext =
        project.ReadSchedulingContext(projectUids, resourceUids);
    dsProjectContext.WriteXml(@"C:\Tests\SchedulingContextOut.txt");
}
catch (SoapException ex)
{
    . . .
}</code>
          <para>The value of the <see cref="P:WebSvcProject.ProjectContextDataSet.RelationshipsRow.Relationship" /> element in the SchedulingContextOut.txt file shows that Project2 is related to Project1 by a shared resource. If you add one or both resource GUIDs to the <b>resourceUids</b> array, the result is the same.</para>
          <para>
            <b>Note</b>: If you add both project GUIDs to the <b>projectUids</b> array, <b>dsProjectContext</b> is empty. </para>
          <code>&amp;lt;?xml version="1.0" standalone="yes"?&amp;gt;
&amp;lt;ProjectContextDataSet xmlns="http://schemas.microsoft.com/office/project/server/webservices/ProjectContextDataSet/"&amp;gt;
  &amp;lt;Relationships&amp;gt;
    &amp;lt;PROJ_UID&amp;gt;a9d03b87-37f1-473d-90f6-77ba3c521a40&amp;lt;/PROJ_UID&amp;gt;
    &amp;lt;RelatedTo_UID&amp;gt;f0e98e26-2c9c-4f74-b40a-640f3f3f03f5&amp;lt;/RelatedTo_UID&amp;gt;
    &amp;lt;RelatedTo_NAME&amp;gt;Project1&amp;lt;/RelatedTo_NAME&amp;gt;
    &amp;lt;Relationship&amp;gt;2&amp;lt;/Relationship&amp;gt;
    &amp;lt;HasBuildTeamPermission&amp;gt;true&amp;lt;/HasBuildTeamPermission&amp;gt;
  &amp;lt;/Relationships&amp;gt;
&amp;lt;/ProjectContextDataSet&amp;gt;</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadServerListSeparator">
      <MemberSignature Language="C#" Value="public char ReadServerListSeparator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance char ReadServerListSeparator() cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.ReadServerListSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadServerListSeparator () As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; char ReadServerListSeparator();" />
      <MemberSignature Language="F#" Value="member this.ReadServerListSeparator : unit -&gt; char" Usage="project.ReadServerListSeparator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/ReadServerListSeparator", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the list separator character that is specified in the server settings.</summary>
        <returns>The character of the list separator for Project Server. The default value is a comma (,).</returns>
        <remarks>
          <para>The list separator character is used in validating lookup table code masks, creating custom fields, and concatenating values such as department names for use in portfolio management routines.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.LogOn" />
              </term>
              <description>Allows a user to log on to Project Server. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadServerTimelineData">
      <MemberSignature Language="C#" Value="public string ReadServerTimelineData (Guid timelineType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ReadServerTimelineData(valuetype System.Guid timelineType) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.ReadServerTimelineData(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadServerTimelineData (timelineType As Guid) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadServerTimelineData(Guid timelineType);" />
      <MemberSignature Language="F#" Value="member this.ReadServerTimelineData : Guid -&gt; string" Usage="project.ReadServerTimelineData timelineType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/ReadServerTimelineData", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timelineType" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="timelineType">The GUID that represents the timeline type.</param>
        <summary>Returns the items that are currently displayed on the connected timeline plus any special formatting data which has been set by the user.</summary>
        <returns>A string that contains timeline data and any special formatting data.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncProjectWithWss">
      <MemberSignature Language="C#" Value="public void SyncProjectWithWss (Guid syncEntityUid, WebSvcProject.SyncEntityUidType syncEntityUidType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SyncProjectWithWss(valuetype System.Guid syncEntityUid, valuetype WebSvcProject.SyncEntityUidType syncEntityUidType) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.SyncProjectWithWss(System.Guid,WebSvcProject.SyncEntityUidType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SyncProjectWithWss(Guid syncEntityUid, WebSvcProject::SyncEntityUidType syncEntityUidType);" />
      <MemberSignature Language="F#" Value="member this.SyncProjectWithWss : Guid * WebSvcProject.SyncEntityUidType -&gt; unit" Usage="project.SyncProjectWithWss (syncEntityUid, syncEntityUidType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/SyncProjectWithWss", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncEntityUid" Type="System.Guid" />
        <Parameter Name="syncEntityUidType" Type="WebSvcProject.SyncEntityUidType" />
      </Parameters>
      <Docs>
        <param name="syncEntityUid">The GUID of the project or the SharePoint task list.</param>
        <param name="syncEntityUidType">Specifies whether to update the project or the SharePoint task list. </param>
        <summary>Synchronizes the indicated project, or the SharePoint task list, as specified by the unique identifier.</summary>
        <remarks>
          <para>This is a new method in Project Server 2013. The <b>SyncProjectWithWss</b> method works on a project that has already been synchronized, where the synchronization data has been created by the <b>CreateWssListSyncedProject</b> method or updated by the <b>UpdateProjectSyncSettings</b> method.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.PublishProject" />
              </term>
              <description>Allows a user to publish a project to the Project Server Published database.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The example uses the <b>SvcProject</b> namespace in the ProjectServerServices.dll proxy assembly. The <b>ConfigClientEndpoints</b> method and the <b>SetClientEndPoints</b> method use an app.config file for setting the WCF binding, behavior, and endpoint. For information about creating a PSI proxy assembly and an app.config file, see Prerequisites for WCF-Based Code Samples.</para>
          <para>
            <b>Note</b>: The following example is designed to demonstrate the use of the <b>SyncProjectWithWss</b>, <b>UpdateSyncProjectSettings</b>, and <b>CreateWssListSyncedProject</b>methods; it is not a full solution. The GUIDs are hardcoded for the necessary fields. To use the example, first create a SharePoint task list. In the code, change the <b>LIST_TITLE</b>, the <b>SHAREPOINT_LIST_SITE</b>, and other URL values where applicable, to match those in your test installation of Project Server 2013.</para>
          <para>The <b>SyncProjectWithWss</b> method synchronizes the project with the SharePoint task list by using the updated <b>SyncDataSet</b>.</para>
          <para>The <b>Lists</b> web service provides methods for working with SharePoint lists and list items. To access this web service, set a reference to http://site/_vti_bin/Lists.asmx. </para>
          <para>The <b>Lists.GetListCollection</b> web method returns an XML document that includes the names and GUIDs of all lists in the SharePoint site. The sample uses the <b>XElement.Parse</b> method to change the XML document to an <b>XElement</b> object named <b>root</b>. The <b>GetListGuid</b> method then does a LINQ to XML query on the <b>root</b> object and returns the GUID of the list that corresponds to the list title.</para>
          <code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.IO;
using System.ServiceModel;
using System.Xml;
using System.Xml.Linq;
using PSLibrary = Microsoft.Office.Project.Server.Library;
using System.Data;
using System.Web.Services;
using WebSvcLists = Microsoft.SDK.Project.Samples.ReadArchivedProjectsList.WebSvcLists;

namespace Microsoft.SDK.Project.Samples.SyncProject
{
    class Program
    {
        // Change the URL of the SharePoint list site and the name of the task list.
        private const string SHAREPOINT_LIST_SITE = "http://jc2vm1";
        private const string LIST_TITLE = "Task List 102";

        private const string ENDPOINT_PROJECT = "basicHttp_Project";
        private const string OUTPUT_FILES = @"C:\Projects\Samples\Output\";
        private static string outFilePathSyncDataSet;
        private static string outFilePathUpdatedSyncDS;

        private static SvcProject.ProjectClient projectClient;
        private static WebSvcLists.Lists lists;
        
        // The GUIDs of the default fields are the same in all 
        // SharePoint 2010 default task lists.
        private const string PRIORITY_LIST_FIELD_GUID =
            "a8eb573e-9e11-481a-a8c9-1104a54b2fbd";
        private const string DUEDATE_LIST_FIELD_GUID =
            "cd21b4c2-6841-4f9e-a23a-738a65f99889";
        private const string STARTDATE_LIST_FIELD_GUID =
            "64cd368d-2f95-4bfc-a1f9-8d4324ecb007";
        private const string BODY_LIST_FIELD_GUID =
            "7662cd2c-f069-4dba-9e35-082cf976e170";
        private const string ASSIGNEDTO_LIST_FIELD_GUID =
            "53101f38-dd2e-458c-b245-0c236cc13d1a";
        private const string PERCENTCOMPLETE_LIST_FIELD_GUID =
            "d2311440-1ed6-46ea-b46d-daa643dc3886";
        private const string TITLE_LIST_FIELD_GUID =
            "fa564e0f-0c70-4ab9-b863-0177e6ddd247";
        private const string PRIORITY_FIELD_GUID = 
            "a8eb573e-9e11-481a-a8c9-1104a54b2fbd";

        private static XElement root;  // The root of the list XML data.

        static void Main(string[] args)
        {
            lists = new WebSvcLists.Lists();
            lists.Url = "http://jc2vm1/_vti_bin/lists.asmx";
            lists.Credentials = CredentialCache.DefaultCredentials;

            // Get the XML data for the lists in the specified 
            // SharePoint lists collection.
            XmlNode listData = lists.GetListCollection();

            root = XElement.Parse(listData.OuterXml);

            string projectName = string.Empty;
            Guid listUid = GetListGuid(root, LIST_TITLE, out projectName);
            
            // If the output directory does not exist, create it.
            if(!Directory.Exists(OUTPUT_FILES))
            {
                Directory.CreateDirectory(OUTPUT_FILES);
            }

            // Assign the path where the output XML file will be saved.
            outFilePathSyncDataSet = OUTPUT_FILES + "SyncDataSet.xml";
            outFilePathUpdatedSyncDS = OUTPUT_FILES + "UpdatedSyncDataSet.xml";

            // Configure the endpoints.
            ConfigClientEndpoints(ENDPOINT_PROJECT);

            try
            {
                // Create Sync Dataset.
                SvcProject.SyncDataSet syncDS = CreateSyncDataSet(listUid);

                // Create the project.
                Guid CreatedProject_Guid = projectClient.CreateWssListSyncedProject(
                    syncDS, projectName);
                Guid[] syncEntityGuids = new Guid[1];
                syncEntityGuids[0] = listUid;

                // Read back the SyncDataSet, and write it to a file.
                SvcProject.SyncEntityUidType syncEntityUidType =
                    SvcProject.SyncEntityUidType.WssListUid;
                syncDS = projectClient.ReadProjectSyncSettings
                        (syncEntityGuids, syncEntityUidType, true);
                syncDS.WriteXml(outFilePathSyncDataSet);

                // Update project synchronization settings.
                syncDS.SyncValueTranslations.Rows[0]["SYNC_PROJECT_VALUE"] = "900";

                // No values are allowed in the SyncItemTaskMappings table, 
                // when updating the project synchronization settings.
                syncDS.SyncItemTaskMappings.Clear();
                syncDS.AcceptChanges();

                projectClient.UpdateProjectSyncSettings(syncDS);
                syncDS.WriteXml(outFilePathUpdatedSyncDS);

                // Synchronize the updated project.
                projectClient.SyncProjectWithWss(listUid, syncEntityUidType);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            Console.WriteLine("\n\nPress any key to exit.");
            Console.ReadKey(false);
        }

        static Guid GetListGuid(XElement listCollection, string listTitle, 
            out string projectName)
        {
            string listId = string.Empty;
            XNamespace xmlns = "http://schemas.microsoft.com/sharepoint/soap/";

            var query = from el in root.Elements(xmlns + "List")
                        where el.Attribute("Title").Value.Equals(listTitle)
                        select el;

            int numElem = query.Count&amp;lt;XElement&amp;gt;();
            Console.WriteLine("Number of elements in query: " + numElem.ToString());

            projectName = query.First&amp;lt;XElement&amp;gt;().Attribute("Title").Value;
            Console.WriteLine(projectName);

            listId = query.First&amp;lt;XElement&amp;gt;().Attribute("ID").Value;
            Guid listUid = new Guid(listId);
            Console.WriteLine("List ID = " + listUid.ToString());
            return listUid;
        }

        // Create the initial SyncDataSet, to use for synchronizing
        // a project the first time.
        static SvcProject.SyncDataSet CreateSyncDataSet(Guid listUid)
        {
            SvcProject.SyncDataSet syncDS = new SvcProject.SyncDataSet();

            string priority = PSLibrary.WSSSync.PriorityFieldName;
            string wssDuedate = "Due Date";
            string projectDueDate = PSLibrary.WSSSync.FinishDateFieldName;
            string wssAssignedTo = "Assigned To";
            string projectAssignedTo = PSLibrary.WSSSync.AssignedToFieldName;
            string wssStartDate = "Start Date";
            string projectStartDate = PSLibrary.WSSSync.StartDateFieldName;
            string wssPercentComplete = "% Complete";
            string projectPercentComplete = PSLibrary.WSSSync.PercentCompleteFieldName;
            string wssBody = "Body";
            string projectNotes = PSLibrary.WSSSync.PercentCompleteFieldName;
            string title = "Title";
            string priorityHigh = "(1) High";
            string priorityNormal = "(2) Normal";
            string priorityLow = "(3) Low";
            string priorityHighValue = "600";
            string priorityNormalValue = "500";
            string priorityLowValue = "400";

            // Project field GUIDs are the same for all projects.
            Guid PRIORITY_PROJECT_FIELD_GUID = PSLibrary.WSSSync.PriorityFieldUid;
            Guid FINISHDATE_PROJECT_FIELD_GUID = PSLibrary.WSSSync.FinishDateFieldUid;
            Guid ASSIGNEDTO_PROJECT_FIELD_GUID = PSLibrary.WSSSync.AssignedToFieldUid;
            Guid STARTDATE_PROJECT_FIELD_GUID = PSLibrary.WSSSync.StartDateFieldUid;
            Guid PERCENTCOMPLETE_PROJECT_FIELD_GUID = PSLibrary.WSSSync.PercentCompleteFieldUid;
            Guid NOTES_PROJECT_FIELD_GUID = PSLibrary.WSSSync.DescriptionFieldUid;
            Guid TITLE_PROJECT_FIELD_GUID = PSLibrary.WSSSync.TitleFieldUid;

            // Create a SyncProjectSettings row.
            SvcProject.SyncDataSet.SyncProjectSettingsRow synProjectSettingRow = 
                syncDS.SyncProjectSettings.NewSyncProjectSettingsRow();
            synProjectSettingRow.SYNC_WSS_LIST_UID = listUid;
            synProjectSettingRow.PROJ_UID = Guid.NewGuid();
            synProjectSettingRow.SYNC_WSS_SERVER_URL = SHAREPOINT_LIST_SITE;
            syncDS.SyncProjectSettings.AddSyncProjectSettingsRow(
                synProjectSettingRow);

            // Add SyncFieldMappingsRows.
            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow.SYNC_WSS_FIELD_UID = 
                new Guid(PRIORITY_LIST_FIELD_GUID);
            syncFieldMappingsRow.SYNC_WSS_FIELD_NAME = priority;
            syncFieldMappingsRow.SYNC_PROJECT_FIELD_UID = 
                PRIORITY_PROJECT_FIELD_GUID;
            syncFieldMappingsRow.SYNC_PROJECT_FIELD_NAME = priority;
            syncFieldMappingsRow.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow1 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow1.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow1.SYNC_WSS_FIELD_UID = 
                new Guid(DUEDATE_LIST_FIELD_GUID);
            syncFieldMappingsRow1.SYNC_WSS_FIELD_NAME = wssDuedate;
            syncFieldMappingsRow1.SYNC_PROJECT_FIELD_UID = 
                FINISHDATE_PROJECT_FIELD_GUID;
            syncFieldMappingsRow1.SYNC_PROJECT_FIELD_NAME = projectDueDate;
            syncFieldMappingsRow1.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow1);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow2 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow2.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow2.SYNC_WSS_FIELD_UID = 
                new Guid(ASSIGNEDTO_LIST_FIELD_GUID);
            syncFieldMappingsRow2.SYNC_WSS_FIELD_NAME = wssAssignedTo;
            syncFieldMappingsRow2.SYNC_PROJECT_FIELD_UID = 
                ASSIGNEDTO_PROJECT_FIELD_GUID;
            syncFieldMappingsRow2.SYNC_PROJECT_FIELD_NAME = projectAssignedTo;
            syncFieldMappingsRow2.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow2);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow3 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow3.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow3.SYNC_WSS_FIELD_UID = 
                new Guid(STARTDATE_LIST_FIELD_GUID);
            syncFieldMappingsRow3.SYNC_WSS_FIELD_NAME = wssStartDate;
            syncFieldMappingsRow3.SYNC_PROJECT_FIELD_UID = 
                STARTDATE_PROJECT_FIELD_GUID;
            syncFieldMappingsRow3.SYNC_PROJECT_FIELD_NAME = projectStartDate;
            syncFieldMappingsRow3.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow3);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow4 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow4.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow4.SYNC_WSS_FIELD_UID = 
               new Guid(PERCENTCOMPLETE_LIST_FIELD_GUID);
            syncFieldMappingsRow4.SYNC_WSS_FIELD_NAME = wssPercentComplete;
            syncFieldMappingsRow4.SYNC_PROJECT_FIELD_UID = 
                PERCENTCOMPLETE_PROJECT_FIELD_GUID;
            syncFieldMappingsRow4.SYNC_PROJECT_FIELD_NAME = 
                projectPercentComplete;
            syncFieldMappingsRow4.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow4);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow5 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow5.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow5.SYNC_WSS_FIELD_UID = 
                new Guid(BODY_LIST_FIELD_GUID);
            syncFieldMappingsRow5.SYNC_WSS_FIELD_NAME = wssBody;
            syncFieldMappingsRow5.SYNC_PROJECT_FIELD_UID = 
                NOTES_PROJECT_FIELD_GUID;
            syncFieldMappingsRow5.SYNC_PROJECT_FIELD_NAME = projectNotes;
            syncFieldMappingsRow5.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow5);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow6 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow6.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow6.SYNC_WSS_FIELD_UID = 
                new Guid(TITLE_LIST_FIELD_GUID);
            syncFieldMappingsRow6.SYNC_WSS_FIELD_NAME = title;
            syncFieldMappingsRow6.SYNC_PROJECT_FIELD_UID = 
                TITLE_PROJECT_FIELD_GUID;
            syncFieldMappingsRow6.SYNC_PROJECT_FIELD_NAME = title;
            syncFieldMappingsRow6.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow6);

            // Add SyncValueTranslationsRow.        
            //SvcProject.SyncDataSet.SyncValueTranslationsRow
            //    syncValueTranslationsRow = 
            //    syncDS.SyncValueTranslations.NewSyncValueTranslationsRow();

            SvcProject.SyncDataSet.SyncValueTranslationsRow
                syncValueTranslationsRow1 = 
                syncDS.SyncValueTranslations.NewSyncValueTranslationsRow();
            syncValueTranslationsRow1.SYNC_WSS_LIST_UID = listUid;
            syncValueTranslationsRow1.SYNC_WSS_FIELD_UID = new Guid(PRIORITY_FIELD_GUID);
            syncValueTranslationsRow1.SYNC_WSS_FIELD_NAME = priority;
            syncValueTranslationsRow1.SYNC_WSS_VALUE = priorityHigh;
            syncValueTranslationsRow1.SYNC_PROJECT_VALUE = priorityHighValue;
            syncDS.SyncValueTranslations.AddSyncValueTranslationsRow(syncValueTranslationsRow1);

            SvcProject.SyncDataSet.SyncValueTranslationsRow
                syncValueTranslationsRow2 = syncDS.SyncValueTranslations.NewSyncValueTranslationsRow();
            syncValueTranslationsRow2.SYNC_WSS_LIST_UID = listUid;
            syncValueTranslationsRow2.SYNC_WSS_FIELD_UID = new Guid(PRIORITY_FIELD_GUID);
            syncValueTranslationsRow2.SYNC_WSS_FIELD_NAME = priority;
            syncValueTranslationsRow2.SYNC_WSS_VALUE = priorityNormal;
            syncValueTranslationsRow2.SYNC_PROJECT_VALUE = priorityNormalValue;
            syncDS.SyncValueTranslations.AddSyncValueTranslationsRow(syncValueTranslationsRow2);

            SvcProject.SyncDataSet.SyncValueTranslationsRow
                syncValueTranslationsRow3 = syncDS.SyncValueTranslations.NewSyncValueTranslationsRow();
            syncValueTranslationsRow3.SYNC_WSS_LIST_UID = listUid;
            syncValueTranslationsRow3.SYNC_WSS_FIELD_UID = new Guid(PRIORITY_FIELD_GUID);
            syncValueTranslationsRow3.SYNC_WSS_FIELD_NAME = priority;
            syncValueTranslationsRow3.SYNC_WSS_VALUE = priorityLow;
            syncValueTranslationsRow3.SYNC_PROJECT_VALUE = priorityLowValue;
            syncDS.SyncValueTranslations.AddSyncValueTranslationsRow(syncValueTranslationsRow3);
 
            return syncDS;
        }

        // Configure the client endpoints.
        public static void ConfigClientEndpoints(string endpt)
        {
            projectClient = new SvcProject.ProjectClient(endpt);
        }
    }
}


</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="UpdateProjectSyncSettings">
      <MemberSignature Language="C#" Value="public void UpdateProjectSyncSettings (WebSvcProject.SyncDataSet syncDataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateProjectSyncSettings(class WebSvcProject.SyncDataSet syncDataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.UpdateProjectSyncSettings(WebSvcProject.SyncDataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateProjectSyncSettings(WebSvcProject::SyncDataSet ^ syncDataSet);" />
      <MemberSignature Language="F#" Value="member this.UpdateProjectSyncSettings : WebSvcProject.SyncDataSet -&gt; unit" Usage="project.UpdateProjectSyncSettings syncDataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/UpdateProjectSyncSettings", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncDataSet" Type="WebSvcProject.SyncDataSet" />
      </Parameters>
      <Docs>
        <param name="syncDataSet">Contains the updated data for synchronizing a project with a SharePoint task list.</param>
        <summary>Updates the data in Project Server that specifies the mapping for synchronizing a project with a SharePoint task list.</summary>
        <remarks>
          <para>This is a new method in Project Server 2013. The <b>UpdateProjectSyncSettings</b> method works on a project that is already synchronized, where the synchronization data was created by the <b>CreateWssListSyncedProject</b> method.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.PublishProject" />
              </term>
              <description>Allows a user to publish a project to the Project Server Published database.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The example uses the <b>SvcProject</b> namespace in the ProjectServerServices.dll proxy assembly. The <b>ConfigClientEndpoints</b> method and the <b>SetClientEndPoints</b> method use an app.config file for setting the WCF binding, behavior, and endpoint. For information about creating a PSI proxy assembly and an app.config file, see Prerequisites for WCF-Based Code Samples.</para>
          <para>
            <b>Note</b>: The following example is designed to demonstrate the use of the <b>UpdateProjectSyncSettings</b>, <b>SyncProjectWithWss</b>, and <b>CreateWssListSyncedProject</b> methods; it is not a full solution. The GUIDs are hardcoded for the necessary fields. To use the example, first create a SharePoint list. In the code, change the <b>LIST_TITLE</b>, the <b>SHAREPOINT_LIST_SITE</b>, and other URL values where applicable, to match those in your test installation of Project Server 2013.</para>
          <para>The <b>Lists.GetListCollection</b> web method returns an XML document that includes the names and GUIDs of all lists in the SharePoint site. The sample uses the <b>XElement.Parse</b> method to change the XML document to an <b>XElement</b> object named <b>root</b>. The <b>GetListGuid</b> method then does a LINQ to XML query on the <b>root</b> object and returns the GUID of the list that corresponds to the list title.</para>
          <para>The contents of the <b>SyncDataSet</b> are written to <b>SyncDataSet.xml</b>. Next, the <b>priority high project settings</b> value is changed to 900. The <b>UpdateProjectSyncSettings</b> method updates the <b>SyncDataSet</b> with the new value.</para>
          <para>
            <b>Note</b>: The <b>SyncTaskItemsMapping</b> table should be empty when updating the project sync settings.</para>
          <para>Following is the content of <b>SyncDataSet</b> before updating:</para>
          <code>&amp;lt;?xml version="1.0" standalone="yes"?&amp;gt;
&amp;lt;SyncDataSet xmlns="http://schemas.microsoft.com/office/project/server/webservices/SyncDataSet"&amp;gt;
  &amp;lt;SyncProjectSettings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;PROJ_UID&amp;gt;&lt;/span&gt;58a75120-fcb3-43a0-a811-1c11fc0dfed1&amp;lt;/PROJ_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_SERVER_URL&amp;gt;&lt;/span&gt;http://jc2vm1&amp;lt;/SYNC_WSS_SERVER_URL&amp;gt;
    &amp;lt;SYNC_LAST_SYNC_DATE&amp;gt;2010-06-02T08:01:45.653-07:00&amp;lt;/SYNC_LAST_SYNC_DATE&amp;gt;
  &amp;lt;/SyncProjectSettings&amp;gt;
  &amp;lt;SyncFieldMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    a8eb573e-9e11-481a-a8c9-1104a54b2fbd&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Priority
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_UID&amp;gt;&lt;/span&gt;
    cda3b2ee-9af8-4d59-9581-1b682fd5fd6d&amp;lt;/SYNC_PROJECT_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_NAME&amp;gt;&lt;/span&gt;Priority
    &amp;lt;/SYNC_PROJECT_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;&lt;/span&gt;false
    &amp;lt;/SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;
  &amp;lt;/SyncFieldMappings&amp;gt;
  &amp;lt;SyncFieldMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    cd21b4c2-6841-4f9e-a23a-738a65f99889&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Due Date
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_UID&amp;gt;&lt;/span&gt;
    0328d1c7-fc8b-4c41-bd58-66c1a4ff390a&amp;lt;/SYNC_PROJECT_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_NAME&amp;gt;&lt;/span&gt;FinishDate
    &amp;lt;/SYNC_PROJECT_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;&lt;/span&gt;false
    &amp;lt;/SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;
  &amp;lt;/SyncFieldMappings&amp;gt;
  &amp;lt;SyncFieldMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    53101f38-dd2e-458c-b245-0c236cc13d1a&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Assigned To
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_UID&amp;gt;&lt;/span&gt;
    914829a1-3151-48c4-8f40-6d9e8d5bfd0f&amp;lt;/SYNC_PROJECT_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_NAME&amp;gt;&lt;/span&gt;Assigned To&amp;lt;/SYNC_PROJECT_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;&lt;/span&gt;false
    &amp;lt;/SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;
  &amp;lt;/SyncFieldMappings&amp;gt;
  &amp;lt;SyncFieldMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    64cd368d-2f95-4bfc-a1f9-8d4324ecb007&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Start Date
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_UID&amp;gt;&lt;/span&gt;
    870004dc-a44c-4f5d-9cc9-72ce3025481b&amp;lt;/SYNC_PROJECT_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_NAME&amp;gt;&lt;/span&gt;StartDate
    &amp;lt;/SYNC_PROJECT_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;&lt;/span&gt;false
    &amp;lt;/SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;
  &amp;lt;/SyncFieldMappings&amp;gt;
  &amp;lt;SyncFieldMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    d2311440-1ed6-46ea-b46d-daa643dc3886&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;% Complete
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_UID&amp;gt;&lt;/span&gt;
    041965eb-bb89-4be9-8843-7a40f78f8ee4&amp;lt;/SYNC_PROJECT_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_NAME&amp;gt;&lt;/span&gt;PercentComplete
    &amp;lt;/SYNC_PROJECT_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;&lt;/span&gt;false
    &amp;lt;/SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;
  &amp;lt;/SyncFieldMappings&amp;gt;
  &amp;lt;SyncFieldMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    7662cd2c-f069-4dba-9e35-082cf976e170&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Body
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_UID&amp;gt;&lt;/span&gt;
    9eb68d1f-caa3-41a8-8f6f-e97ae9fd0717&amp;lt;/SYNC_PROJECT_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_NAME&amp;gt;&lt;/span&gt;Notes
    &amp;lt;/SYNC_PROJECT_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;&lt;/span&gt;false
    &amp;lt;/SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;
  &amp;lt;/SyncFieldMappings&amp;gt;
  &amp;lt;SyncFieldMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    fa564e0f-0c70-4ab9-b863-0177e6ddd247&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Title
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_UID&amp;gt;&lt;/span&gt;
    9594ab82-f7fd-4336-a387-f5d842e53ea5&amp;lt;/SYNC_PROJECT_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_NAME&amp;gt;&lt;/span&gt;Title
    &amp;lt;/SYNC_PROJECT_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;&lt;/span&gt;false
    &amp;lt;/SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;
  &amp;lt;/SyncFieldMappings&amp;gt;
  &amp;lt;SyncItemTaskMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_ITEM_ID&amp;gt;&lt;/span&gt;1
    &amp;lt;/SYNC_WSS_LIST_ITEM_ID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_TASK_UID&amp;gt;&lt;/span&gt;
    36e2e450-3a57-4a80-b94e-fcb1cb56e3e7&amp;lt;/SYNC_TASK_UID&amp;gt;
  &amp;lt;/SyncItemTaskMappings&amp;gt;
  &amp;lt;SyncItemTaskMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_ITEM_ID&amp;gt;&lt;/span&gt;2
    &amp;lt;/SYNC_WSS_LIST_ITEM_ID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_TASK_UID&amp;gt;&lt;/span&gt;
    822adcfd-d358-44fe-9ed0-c6d557cb6458&amp;lt;/SYNC_TASK_UID&amp;gt;
  &amp;lt;/SyncItemTaskMappings&amp;gt;
  &amp;lt;SyncValueTranslations&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    a8eb573e-9e11-481a-a8c9-1104a54b2fbd&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Priority
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_VALUE&amp;gt;&lt;/span&gt;(1) High
    &amp;lt;/SYNC_WSS_VALUE&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_VALUE&amp;gt;&lt;/span&gt;600
    &amp;lt;/SYNC_PROJECT_VALUE&amp;gt;
  &amp;lt;/SyncValueTranslations&amp;gt;
  &amp;lt;SyncValueTranslations&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    a8eb573e-9e11-481a-a8c9-1104a54b2fbd&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Priority
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_VALUE&amp;gt;&lt;/span&gt;(2) Normal
    &amp;lt;/SYNC_WSS_VALUE&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_VALUE&amp;gt;&lt;/span&gt;500
    &amp;lt;/SYNC_PROJECT_VALUE&amp;gt;
  &amp;lt;/SyncValueTranslations&amp;gt;
  &amp;lt;SyncValueTranslations&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    a8eb573e-9e11-481a-a8c9-1104a54b2fbd&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Priority
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_VALUE&amp;gt;&lt;/span&gt;(3) Low
    &amp;lt;/SYNC_WSS_VALUE&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_VALUE&amp;gt;&lt;/span&gt;400
    &amp;lt;/SYNC_PROJECT_VALUE&amp;gt;
  &amp;lt;/SyncValueTranslations&amp;gt;
&amp;lt;/SyncDataSet&amp;gt;</code>
          <para>Following is the content of the updated <b>SyncDataSet</b>:</para>
          <code>&amp;lt;?xml version="1.0" standalone="yes"?&amp;gt;
&amp;lt;SyncDataSet xmlns="http://schemas.microsoft.com/office/project/server/webservices/SyncDataSet"&amp;gt;
  &amp;lt;SyncProjectSettings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;PROJ_UID&amp;gt;&lt;/span&gt;58a75120-fcb3-43a0-a811-1c11fc0dfed1&amp;lt;/PROJ_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_SERVER_URL&amp;gt;&lt;/span&gt;http://jc2vm1&amp;lt;/SYNC_WSS_SERVER_URL&amp;gt;
    &amp;lt;SYNC_LAST_SYNC_DATE&amp;gt;2010-06-02T08:01:45.653-07:00&amp;lt;/SYNC_LAST_SYNC_DATE&amp;gt;
  &amp;lt;/SyncProjectSettings&amp;gt;
  &amp;lt;SyncFieldMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    a8eb573e-9e11-481a-a8c9-1104a54b2fbd&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Priority
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_UID&amp;gt;&lt;/span&gt;
    cda3b2ee-9af8-4d59-9581-1b682fd5fd6d&amp;lt;/SYNC_PROJECT_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_NAME&amp;gt;&lt;/span&gt;Priority
    &amp;lt;/SYNC_PROJECT_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;&lt;/span&gt;false
    &amp;lt;/SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;
  &amp;lt;/SyncFieldMappings&amp;gt;
  &amp;lt;SyncFieldMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    cd21b4c2-6841-4f9e-a23a-738a65f99889&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Due Date
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_UID&amp;gt;&lt;/span&gt;
    0328d1c7-fc8b-4c41-bd58-66c1a4ff390a&amp;lt;/SYNC_PROJECT_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_NAME&amp;gt;&lt;/span&gt;FinishDate
    &amp;lt;/SYNC_PROJECT_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;&lt;/span&gt;false
    &amp;lt;/SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;
  &amp;lt;/SyncFieldMappings&amp;gt;
  &amp;lt;SyncFieldMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    53101f38-dd2e-458c-b245-0c236cc13d1a&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Assigned To
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_UID&amp;gt;&lt;/span&gt;
    914829a1-3151-48c4-8f40-6d9e8d5bfd0f&amp;lt;/SYNC_PROJECT_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_NAME&amp;gt;&lt;/span&gt;Assigned To&amp;lt;/SYNC_PROJECT_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;&lt;/span&gt;false
    &amp;lt;/SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;
  &amp;lt;/SyncFieldMappings&amp;gt;
  &amp;lt;SyncFieldMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    64cd368d-2f95-4bfc-a1f9-8d4324ecb007&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Start Date
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_UID&amp;gt;&lt;/span&gt;
    870004dc-a44c-4f5d-9cc9-72ce3025481b&amp;lt;/SYNC_PROJECT_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_NAME&amp;gt;&lt;/span&gt;StartDate
    &amp;lt;/SYNC_PROJECT_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;&lt;/span&gt;false
    &amp;lt;/SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;
  &amp;lt;/SyncFieldMappings&amp;gt;
  &amp;lt;SyncFieldMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    d2311440-1ed6-46ea-b46d-daa643dc3886&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;% Complete
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_UID&amp;gt;&lt;/span&gt;
    041965eb-bb89-4be9-8843-7a40f78f8ee4&amp;lt;/SYNC_PROJECT_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_NAME&amp;gt;&lt;/span&gt;PercentComplete
    &amp;lt;/SYNC_PROJECT_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;&lt;/span&gt;false
    &amp;lt;/SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;
  &amp;lt;/SyncFieldMappings&amp;gt;
  &amp;lt;SyncFieldMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    7662cd2c-f069-4dba-9e35-082cf976e170&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Body
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_UID&amp;gt;&lt;/span&gt;
    9eb68d1f-caa3-41a8-8f6f-e97ae9fd0717&amp;lt;/SYNC_PROJECT_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_NAME&amp;gt;&lt;/span&gt;Notes
    &amp;lt;/SYNC_PROJECT_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;&lt;/span&gt;false
    &amp;lt;/SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;
  &amp;lt;/SyncFieldMappings&amp;gt;
  &amp;lt;SyncFieldMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    fa564e0f-0c70-4ab9-b863-0177e6ddd247&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Title
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_UID&amp;gt;&lt;/span&gt;
    9594ab82-f7fd-4336-a387-f5d842e53ea5&amp;lt;/SYNC_PROJECT_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_FIELD_NAME&amp;gt;&lt;/span&gt;Title
    &amp;lt;/SYNC_PROJECT_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;&lt;/span&gt;false
    &amp;lt;/SYNC_IS_PROJECT_CUSTOM_FIELD&amp;gt;
  &amp;lt;/SyncFieldMappings&amp;gt;
  &amp;lt;SyncItemTaskMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_ITEM_ID&amp;gt;&lt;/span&gt;1
    &amp;lt;/SYNC_WSS_LIST_ITEM_ID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_TASK_UID&amp;gt;&lt;/span&gt;
    36e2e450-3a57-4a80-b94e-fcb1cb56e3e7&amp;lt;/SYNC_TASK_UID&amp;gt;
  &amp;lt;/SyncItemTaskMappings&amp;gt;
  &amp;lt;SyncItemTaskMappings&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_ITEM_ID&amp;gt;&lt;/span&gt;2
    &amp;lt;/SYNC_WSS_LIST_ITEM_ID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_TASK_UID&amp;gt;&lt;/span&gt;
    822adcfd-d358-44fe-9ed0-c6d557cb6458&amp;lt;/SYNC_TASK_UID&amp;gt;
  &amp;lt;/SyncItemTaskMappings&amp;gt;
  &amp;lt;SyncValueTranslations&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    a8eb573e-9e11-481a-a8c9-1104a54b2fbd&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Priority
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_VALUE&amp;gt;&lt;/span&gt;(1) High
    &amp;lt;/SYNC_WSS_VALUE&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_VALUE&amp;gt;&lt;/span&gt;900
    &amp;lt;/SYNC_PROJECT_VALUE&amp;gt;
  &amp;lt;/SyncValueTranslations&amp;gt;
  &amp;lt;SyncValueTranslations&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    a8eb573e-9e11-481a-a8c9-1104a54b2fbd&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Priority
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_VALUE&amp;gt;&lt;/span&gt;(2) Normal
    &amp;lt;/SYNC_WSS_VALUE&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_VALUE&amp;gt;&lt;/span&gt;500
    &amp;lt;/SYNC_PROJECT_VALUE&amp;gt;
  &amp;lt;/SyncValueTranslations&amp;gt;
  &amp;lt;SyncValueTranslations&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_LIST_UID&amp;gt;&lt;/span&gt;
    9419bc3c-8084-4d58-a0bf-c8c0df016254&amp;lt;/SYNC_WSS_LIST_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_UID&amp;gt;&lt;/span&gt;
    a8eb573e-9e11-481a-a8c9-1104a54b2fbd&amp;lt;/SYNC_WSS_FIELD_UID&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_FIELD_NAME&amp;gt;&lt;/span&gt;Priority
    &amp;lt;/SYNC_WSS_FIELD_NAME&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_WSS_VALUE&amp;gt;&lt;/span&gt;(3) Low
    &amp;lt;/SYNC_WSS_VALUE&amp;gt;
    &lt;span class="label"&gt;&amp;lt;SYNC_PROJECT_VALUE&amp;gt;&lt;/span&gt;400
    &amp;lt;/SYNC_PROJECT_VALUE&amp;gt;
  &amp;lt;/SyncValueTranslations&amp;gt;
&amp;lt;/SyncDataSet&amp;gt;</code>
          <para>The complete sample code is as follows:</para>
          <code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.IO;
using System.ServiceModel;
using System.Xml;
using System.Xml.Linq;
using PSLibrary = Microsoft.Office.Project.Server.Library;
using System.Data;
using System.Web.Services;
using WebSvcLists = Microsoft.SDK.Project.Samples.ReadArchivedProjectsList.WebSvcLists;

namespace Microsoft.SDK.Project.Samples.SyncProject
{
    class Program
    {
        // Change the URL of the SharePoint list site and the name of the task list.
        private const string SHAREPOINT_LIST_SITE = "http://jc2vm1";
        private const string LIST_TITLE = "Task List 102";

        private const string ENDPOINT_PROJECT = "basicHttp_Project";
        private const string OUTPUT_FILES = @"C:\Projects\Samples\Output\";
        private static string outFilePathSyncDataSet;
        private static string outFilePathUpdatedSyncDS;

        private static SvcProject.ProjectClient projectClient;
        private static WebSvcLists.Lists lists;
        
        // The GUIDs of the default fields are the same in all 
        // SharePoint 2010 default task lists.
        private const string PRIORITY_LIST_FIELD_GUID =
            "a8eb573e-9e11-481a-a8c9-1104a54b2fbd";
        private const string DUEDATE_LIST_FIELD_GUID =
            "cd21b4c2-6841-4f9e-a23a-738a65f99889";
        private const string STARTDATE_LIST_FIELD_GUID =
            "64cd368d-2f95-4bfc-a1f9-8d4324ecb007";
        private const string BODY_LIST_FIELD_GUID =
            "7662cd2c-f069-4dba-9e35-082cf976e170";
        private const string ASSIGNEDTO_LIST_FIELD_GUID =
            "53101f38-dd2e-458c-b245-0c236cc13d1a";
        private const string PERCENTCOMPLETE_LIST_FIELD_GUID =
            "d2311440-1ed6-46ea-b46d-daa643dc3886";
        private const string TITLE_LIST_FIELD_GUID =
            "fa564e0f-0c70-4ab9-b863-0177e6ddd247";
        private const string PRIORITY_FIELD_GUID = 
            "a8eb573e-9e11-481a-a8c9-1104a54b2fbd";

        private static XElement root;  // The root of the list XML data.

        static void Main(string[] args)
        {
            lists = new WebSvcLists.Lists();
            lists.Url = "http://jc2vm1/_vti_bin/lists.asmx";
            lists.Credentials = CredentialCache.DefaultCredentials;

            // Get the XML data for the lists in the specified 
            // SharePoint lists collection.
            XmlNode listData = lists.GetListCollection();

            root = XElement.Parse(listData.OuterXml);

            string projectName = string.Empty;
            Guid listUid = GetListGuid(root, LIST_TITLE, out projectName);
            
            // If the output directory does not exist, create it.
            if(!Directory.Exists(OUTPUT_FILES))
            {
                Directory.CreateDirectory(OUTPUT_FILES);
            }

            // Assign the path where the output XML file will be saved.
            outFilePathSyncDataSet = OUTPUT_FILES + "SyncDataSet.xml";
            outFilePathUpdatedSyncDS = OUTPUT_FILES + "UpdatedSyncDataSet.xml";

            // Configure the endpoints.
            ConfigClientEndpoints(ENDPOINT_PROJECT);

            try
            {
                // Create Sync Dataset.
                SvcProject.SyncDataSet syncDS = CreateSyncDataSet(listUid);

                // Create the project.
                Guid CreatedProject_Guid = projectClient.CreateWssListSyncedProject(
                    syncDS, projectName);
                Guid[] syncEntityGuids = new Guid[1];
                syncEntityGuids[0] = listUid;

                // Read back the SyncDataSet, and write it to a file.
                SvcProject.SyncEntityUidType syncEntityUidType =
                    SvcProject.SyncEntityUidType.WssListUid;
                syncDS = projectClient.ReadProjectSyncSettings
                        (syncEntityGuids, syncEntityUidType, true);
                syncDS.WriteXml(outFilePathSyncDataSet);

                // Update project synchronization settings.
                syncDS.SyncValueTranslations.Rows[0]["SYNC_PROJECT_VALUE"] = "900";

                // No values are allowed in the SyncItemTaskMappings table, 
                // when updating the project synchronization settings.
                syncDS.SyncItemTaskMappings.Clear();
                syncDS.AcceptChanges();

                projectClient.UpdateProjectSyncSettings(syncDS);
                syncDS.WriteXml(outFilePathUpdatedSyncDS);

                // Synchronize the updated project.
                projectClient.SyncProjectWithWss(listUid, syncEntityUidType);
            }
            catch (CommunicationException e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(
                    "\n***System.ServiceModel.CommunicationException:");
                Console.WriteLine(e.ToString());
                Console.ResetColor();
            }
            Console.WriteLine("\n\nPress any key to exit.");
            Console.ReadKey(false);
        }

        static Guid GetListGuid(XElement listCollection, string listTitle, 
            out string projectName)
        {
            string listId = string.Empty;
            XNamespace xmlns = "http://schemas.microsoft.com/sharepoint/soap/";

            var query = from el in root.Elements(xmlns + "List")
                        where el.Attribute("Title").Value.Equals(listTitle)
                        select el;

            int numElem = query.Count&amp;lt;XElement&amp;gt;();
            Console.WriteLine("Number of elements in query: " + numElem.ToString());

            projectName = query.First&amp;lt;XElement&amp;gt;().Attribute("Title").Value;
            Console.WriteLine(projectName);

            listId = query.First&amp;lt;XElement&amp;gt;().Attribute("ID").Value;
            Guid listUid = new Guid(listId);
            Console.WriteLine("List ID = " + listUid.ToString());
            return listUid;
        }

        // Create the initial SyncDataSet, to use for synchronizing
        // a project the first time.
        static SvcProject.SyncDataSet CreateSyncDataSet(Guid listUid)
        {
            SvcProject.SyncDataSet syncDS = new SvcProject.SyncDataSet();

            string priority = PSLibrary.WSSSync.PriorityFieldName;
            string wssDuedate = "Due Date";
            string projectDueDate = PSLibrary.WSSSync.FinishDateFieldName;
            string wssAssignedTo = "Assigned To";
            string projectAssignedTo = PSLibrary.WSSSync.AssignedToFieldName;
            string wssStartDate = "Start Date";
            string projectStartDate = PSLibrary.WSSSync.StartDateFieldName;
            string wssPercentComplete = "% Complete";
            string projectPercentComplete = PSLibrary.WSSSync.PercentCompleteFieldName;
            string wssBody = "Body";
            string projectNotes = PSLibrary.WSSSync.PercentCompleteFieldName;
            string title = "Title";
            string priorityHigh = "(1) High";
            string priorityNormal = "(2) Normal";
            string priorityLow = "(3) Low";
            string priorityHighValue = "600";
            string priorityNormalValue = "500";
            string priorityLowValue = "400";

            // Project field GUIDs are the same for all projects.
            Guid PRIORITY_PROJECT_FIELD_GUID = PSLibrary.WSSSync.PriorityFieldUid;
            Guid FINISHDATE_PROJECT_FIELD_GUID = PSLibrary.WSSSync.FinishDateFieldUid;
            Guid ASSIGNEDTO_PROJECT_FIELD_GUID = PSLibrary.WSSSync.AssignedToFieldUid;
            Guid STARTDATE_PROJECT_FIELD_GUID = PSLibrary.WSSSync.StartDateFieldUid;
            Guid PERCENTCOMPLETE_PROJECT_FIELD_GUID = PSLibrary.WSSSync.PercentCompleteFieldUid;
            Guid NOTES_PROJECT_FIELD_GUID = PSLibrary.WSSSync.DescriptionFieldUid;
            Guid TITLE_PROJECT_FIELD_GUID = PSLibrary.WSSSync.TitleFieldUid;

            // Create a SyncProjectSettings row.
            SvcProject.SyncDataSet.SyncProjectSettingsRow synProjectSettingRow = 
                syncDS.SyncProjectSettings.NewSyncProjectSettingsRow();
            synProjectSettingRow.SYNC_WSS_LIST_UID = listUid;
            synProjectSettingRow.PROJ_UID = Guid.NewGuid();
            synProjectSettingRow.SYNC_WSS_SERVER_URL = SHAREPOINT_LIST_SITE;
            syncDS.SyncProjectSettings.AddSyncProjectSettingsRow(
                synProjectSettingRow);

            // Add SyncFieldMappingsRows.
            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow.SYNC_WSS_FIELD_UID = 
                new Guid(PRIORITY_LIST_FIELD_GUID);
            syncFieldMappingsRow.SYNC_WSS_FIELD_NAME = priority;
            syncFieldMappingsRow.SYNC_PROJECT_FIELD_UID = 
                PRIORITY_PROJECT_FIELD_GUID;
            syncFieldMappingsRow.SYNC_PROJECT_FIELD_NAME = priority;
            syncFieldMappingsRow.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow1 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow1.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow1.SYNC_WSS_FIELD_UID = 
                new Guid(DUEDATE_LIST_FIELD_GUID);
            syncFieldMappingsRow1.SYNC_WSS_FIELD_NAME = wssDuedate;
            syncFieldMappingsRow1.SYNC_PROJECT_FIELD_UID = 
                FINISHDATE_PROJECT_FIELD_GUID;
            syncFieldMappingsRow1.SYNC_PROJECT_FIELD_NAME = projectDueDate;
            syncFieldMappingsRow1.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow1);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow2 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow2.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow2.SYNC_WSS_FIELD_UID = 
                new Guid(ASSIGNEDTO_LIST_FIELD_GUID);
            syncFieldMappingsRow2.SYNC_WSS_FIELD_NAME = wssAssignedTo;
            syncFieldMappingsRow2.SYNC_PROJECT_FIELD_UID = 
                ASSIGNEDTO_PROJECT_FIELD_GUID;
            syncFieldMappingsRow2.SYNC_PROJECT_FIELD_NAME = projectAssignedTo;
            syncFieldMappingsRow2.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow2);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow3 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow3.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow3.SYNC_WSS_FIELD_UID = 
                new Guid(STARTDATE_LIST_FIELD_GUID);
            syncFieldMappingsRow3.SYNC_WSS_FIELD_NAME = wssStartDate;
            syncFieldMappingsRow3.SYNC_PROJECT_FIELD_UID = 
                STARTDATE_PROJECT_FIELD_GUID;
            syncFieldMappingsRow3.SYNC_PROJECT_FIELD_NAME = projectStartDate;
            syncFieldMappingsRow3.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow3);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow4 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow4.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow4.SYNC_WSS_FIELD_UID = 
               new Guid(PERCENTCOMPLETE_LIST_FIELD_GUID);
            syncFieldMappingsRow4.SYNC_WSS_FIELD_NAME = wssPercentComplete;
            syncFieldMappingsRow4.SYNC_PROJECT_FIELD_UID = 
                PERCENTCOMPLETE_PROJECT_FIELD_GUID;
            syncFieldMappingsRow4.SYNC_PROJECT_FIELD_NAME = 
                projectPercentComplete;
            syncFieldMappingsRow4.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow4);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow5 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow5.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow5.SYNC_WSS_FIELD_UID = 
                new Guid(BODY_LIST_FIELD_GUID);
            syncFieldMappingsRow5.SYNC_WSS_FIELD_NAME = wssBody;
            syncFieldMappingsRow5.SYNC_PROJECT_FIELD_UID = 
                NOTES_PROJECT_FIELD_GUID;
            syncFieldMappingsRow5.SYNC_PROJECT_FIELD_NAME = projectNotes;
            syncFieldMappingsRow5.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow5);

            SvcProject.SyncDataSet.SyncFieldMappingsRow syncFieldMappingsRow6 =
                syncDS.SyncFieldMappings.NewSyncFieldMappingsRow();
            syncFieldMappingsRow6.SYNC_WSS_LIST_UID = listUid;
            syncFieldMappingsRow6.SYNC_WSS_FIELD_UID = 
                new Guid(TITLE_LIST_FIELD_GUID);
            syncFieldMappingsRow6.SYNC_WSS_FIELD_NAME = title;
            syncFieldMappingsRow6.SYNC_PROJECT_FIELD_UID = 
                TITLE_PROJECT_FIELD_GUID;
            syncFieldMappingsRow6.SYNC_PROJECT_FIELD_NAME = title;
            syncFieldMappingsRow6.SYNC_IS_PROJECT_CUSTOM_FIELD = false;
            syncDS.SyncFieldMappings.AddSyncFieldMappingsRow(
                syncFieldMappingsRow6);

            // Add SyncValueTranslationsRow.        
            //SvcProject.SyncDataSet.SyncValueTranslationsRow
            //    syncValueTranslationsRow = 
            //    syncDS.SyncValueTranslations.NewSyncValueTranslationsRow();

            SvcProject.SyncDataSet.SyncValueTranslationsRow
                syncValueTranslationsRow1 = 
                syncDS.SyncValueTranslations.NewSyncValueTranslationsRow();
            syncValueTranslationsRow1.SYNC_WSS_LIST_UID = listUid;
            syncValueTranslationsRow1.SYNC_WSS_FIELD_UID = new Guid(PRIORITY_FIELD_GUID);
            syncValueTranslationsRow1.SYNC_WSS_FIELD_NAME = priority;
            syncValueTranslationsRow1.SYNC_WSS_VALUE = priorityHigh;
            syncValueTranslationsRow1.SYNC_PROJECT_VALUE = priorityHighValue;
            syncDS.SyncValueTranslations.AddSyncValueTranslationsRow(syncValueTranslationsRow1);

            SvcProject.SyncDataSet.SyncValueTranslationsRow
                syncValueTranslationsRow2 = syncDS.SyncValueTranslations.NewSyncValueTranslationsRow();
            syncValueTranslationsRow2.SYNC_WSS_LIST_UID = listUid;
            syncValueTranslationsRow2.SYNC_WSS_FIELD_UID = new Guid(PRIORITY_FIELD_GUID);
            syncValueTranslationsRow2.SYNC_WSS_FIELD_NAME = priority;
            syncValueTranslationsRow2.SYNC_WSS_VALUE = priorityNormal;
            syncValueTranslationsRow2.SYNC_PROJECT_VALUE = priorityNormalValue;
            syncDS.SyncValueTranslations.AddSyncValueTranslationsRow(syncValueTranslationsRow2);

            SvcProject.SyncDataSet.SyncValueTranslationsRow
                syncValueTranslationsRow3 = syncDS.SyncValueTranslations.NewSyncValueTranslationsRow();
            syncValueTranslationsRow3.SYNC_WSS_LIST_UID = listUid;
            syncValueTranslationsRow3.SYNC_WSS_FIELD_UID = new Guid(PRIORITY_FIELD_GUID);
            syncValueTranslationsRow3.SYNC_WSS_FIELD_NAME = priority;
            syncValueTranslationsRow3.SYNC_WSS_VALUE = priorityLow;
            syncValueTranslationsRow3.SYNC_PROJECT_VALUE = priorityLowValue;
            syncDS.SyncValueTranslations.AddSyncValueTranslationsRow(syncValueTranslationsRow3);
 
            return syncDS;
        }

        // Configure the client endpoints.
        public static void ConfigClientEndpoints(string endpt)
        {
            projectClient = new SvcProject.ProjectClient(endpt);
        }
    }
}


</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="UpdateProjectWorkspaceAddress">
      <MemberSignature Language="C#" Value="public void UpdateProjectWorkspaceAddress (Guid projectUid, string newWebName, Guid newWSSServerUID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateProjectWorkspaceAddress(valuetype System.Guid projectUid, string newWebName, valuetype System.Guid newWSSServerUID) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.UpdateProjectWorkspaceAddress(System.Guid,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateProjectWorkspaceAddress (projectUid As Guid, newWebName As String, newWSSServerUID As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateProjectWorkspaceAddress(Guid projectUid, System::String ^ newWebName, Guid newWSSServerUID);" />
      <MemberSignature Language="F#" Value="member this.UpdateProjectWorkspaceAddress : Guid * string * Guid -&gt; unit" Usage="project.UpdateProjectWorkspaceAddress (projectUid, newWebName, newWSSServerUID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/UpdateProjectWorkspaceAddress", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectUid" Type="System.Guid" />
        <Parameter Name="newWebName" Type="System.String" />
        <Parameter Name="newWSSServerUID" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="projectUid">The project GUID.</param>
        <param name="newWebName">The new name of the project site.</param>
        <param name="newWSSServerUID">The GUID of the new SharePoint Server.</param>
        <summary>Updates the project site URL and name in a SharePoint site.</summary>
        <remarks>
          <para>The target project site must exist or a <see cref="F:Microsoft.Office.Project.Server.Library.PSErrorID.WSSWebDoesNotExist" /> error is thrown. <see cref="M:WebSvcWssInterop.WssInterop.CreateWssSite(System.Guid,System.Guid,System.String,System.Int32,System.String)" /> will create a new site for a given project.</para>
          <para>If the new project site is already in use, a <see cref="F:Microsoft.Office.Project.Server.Library.PSErrorID.WSSSpWebAlreadyLinkedToProject" /> error is thrown. </para>
          <para>The specified project must exist in the <b>Published</b> database. </para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ManageWindowsSharePointServices" />
              </term>
              <description>Allows a user to manage SharePoint sites for Project Server. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following example creates a new project, publishes it, and then changes the project site association to be one that you created.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <para>You will need to create a Project Server project site to use in the example. It will serve as the new project site for this project.</para>
          <list type="number">
            <item>
              <description>Open your Project Web App site (http://ServerName/ProjectServerName/. </description>
            </item>
            <item>
              <description>On the upper-right, click Site Actions. Choose Create.</description>
            </item>
            <item>
              <description>Under Web Pages, click Sites and Workspaces.</description>
            </item>
            <item>
              <description>Enter a Title, Description, and URL Name.</description>
              <description>Make a note of the URL Name that you entered; you need it for the example below.</description>
            </item>
            <item>
              <description>Select the Microsoft Office Project Workspace template.</description>
            </item>
            <item>
              <description>Click Create.</description>
            </item>
            <item>
              <description>Set the value of NEW WORKSPACE in the sample to match the URL Name that you entered previously.</description>
            </item>
          </list>
          <para>If you run the example two times in a row, you will get an error. That is because the site that you made previously becomes associated with the project that you create in the sample. You can either use the Project Web AppServer Settings area to delete the project that was just created (http://ServerName/ProjectServerName/admin/admin.aspx), or you can add an <b>UpdateProjectWorkspaceAddress</b> call to set the project site of the previous project to <b>string.Empty</b>. </para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.UpdateProjectWorkspaceAddress
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            #region Setup
            // Replace the NEW_WORKSPACE value with the workspace name
            // that you created above.
            const string NEW_WORKSPACE = "NEW WORKSPACE";
            const string PROJECT_SERVER_URI = "http://ServerName/ProjectServerName/";
            const string PROJECT_SERVICE_PATH = "_vti_bin/psi/project.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            const string WSSINTEROP_SERVICE_PATH = "_vti_bin/psi/wssinterop.asmx";
            const string SESSION_DESC = "Update Workspace Sample";

            Guid sessionId = Guid.NewGuid();
            Guid jobId;

            // Set up the web service objects.
            SvcProject.Project projectSvc = new SvcProject.Project();

            projectSvc.Url = PROJECT_SERVER_URI + PROJECT_SERVICE_PATH;
            projectSvc.Credentials = CredentialCache.DefaultCredentials;

            SvcQueueSystem.QueueSystem q = new SvcQueueSystem.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.Credentials = CredentialCache.DefaultCredentials;

            SvcWssInterop.WssInterop wssInterOpSvc = new SvcWssInterop.WssInterop();
            wssInterOpSvc.Url = PROJECT_SERVER_URI + WSSINTEROP_SERVICE_PATH;
            wssInterOpSvc.Credentials = CredentialCache.DefaultCredentials;

            // Create a sample project.
            Console.WriteLine("Creating the project");
            Guid projectId = CreateSampleProject(projectSvc, q);
            Console.WriteLine("\tProject UID: " + projectId);

            // Publish the project.
            Console.WriteLine("Publishing the project");
            jobId = Guid.NewGuid();
            projectSvc.QueuePublish(jobId, projectId, true, SESSION_DESC);
            WaitForQueue(q, jobId);
            #endregion
            #region Get workspace info
            // Get the admin settings that are necessary for site linking.
            Console.WriteLine("Getting the server info");
            SvcWssInterop.WssSettingsDataSet dsCurrentWssInfo = wssInterOpSvc.ReadWssSettings();
            SvcWssInterop.WssSettingsDataSet.WssAdminRow adminRow = dsCurrentWssInfo.WssAdmin[0];

            Guid wssWebAppUid = adminRow.WADMIN_CURRENT_STS_SERVER_UID;
            string siteCollection = string.Empty;
            if (!adminRow.IsWADMIN_DEFAULT_SITE_COLLECTIONNull())
            {
               siteCollection = adminRow.WADMIN_DEFAULT_SITE_COLLECTION;
            }
            #endregion
            #region Change Workspace Address
            Console.WriteLine("Changing the address");
            projectSvc.UpdateProjectWorkspaceAddress(projectId, siteCollection + "/"+ NEW_WORKSPACE , wssWebAppUid);
            #endregion
         }
         #region Exception Handling and Final
         catch (SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": " + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }
         catch (WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }
         catch (Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }
         finally
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
         #endregion
      }

      #region Supporting Classes
      // Wait for the job to finish.
      // Outputs job status to the console.
      static private void WaitForQueue(SvcQueueSystem.QueueSystem q, Guid jobId)
      {
         SvcQueueSystem.JobState jobState;
         const int QUEUE_WAIT_TIME = 2; // two seconds
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         // Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Thread.Sleep(wait * 1000);
         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == SvcQueueSystem.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == SvcQueueSystem.JobState.Unknown
               || jobState == SvcQueueSystem.JobState.Failed
               || jobState == SvcQueueSystem.JobState.FailedNotBlocking
               || jobState == SvcQueueSystem.JobState.CorrelationBlocked
               || jobState == SvcQueueSystem.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
      }
      static private Guid CreateSampleProject(SvcProject.Project projectSvc, SvcQueueSystem.QueueSystem q)
      {
         SvcProject.ProjectDataSet projectDs = new SvcProject.ProjectDataSet();
         Guid jobId;
         // Create the project.
         SvcProject.ProjectDataSet.ProjectRow projectRow = projectDs.Project.NewProjectRow();
         Guid projectId = Guid.NewGuid();
         projectRow.PROJ_UID = projectId;
         projectRow.PROJ_NAME = "Its a wonderful project at " + 
            DateTime.Now.ToShortDateString().Replace("/", "") + " " + 
            DateTime.Now.ToShortTimeString().Replace(":", "");
         projectRow.PROJ_TYPE = (int)PSLibrary.Project.ProjectType.Project;
         projectDs.Project.AddProjectRow(projectRow);

         // Add some tasks.
         SvcProject.ProjectDataSet.TaskRow taskOne = projectDs.Task.NewTaskRow();
         taskOne.PROJ_UID = projectId;
         taskOne.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskOne.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskOne.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskOne.TASK_NAME = "Task One";
         taskOne.TASK_START_DATE = System.DateTime.Now.AddDays(1);
         projectDs.Task.AddTaskRow(taskOne);

         SvcProject.ProjectDataSet.TaskRow taskTwo = projectDs.Task.NewTaskRow();
         taskTwo.PROJ_UID = projectId;
         taskTwo.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskTwo.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskTwo.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskTwo.TASK_NAME = "Task Two";
         projectDs.Task.AddTaskRow(taskTwo);

         // Make task two dependent on task one.
         SvcProject.ProjectDataSet.DependencyRow dependency = projectDs.Dependency.NewDependencyRow();
         dependency.LINK_UID = Guid.NewGuid();
         dependency.PROJ_UID = projectId;
         dependency.LINK_PRED_UID = taskOne.TASK_UID;
         dependency.LINK_SUCC_UID = taskTwo.TASK_UID;
         dependency.LINK_TYPE = 1;  //Finish to Start
         dependency.LINK_LAG_FMT = (int)PSLibrary.Task.DurationFormat.Hour;
         dependency.LINK_LAG = 0;
         projectDs.Dependency.AddDependencyRow(dependency);

         // Add a summary task.
         SvcProject.ProjectDataSet.TaskRow taskOthers = projectDs.Task.NewTaskRow();
         taskOthers.PROJ_UID = projectId;
         taskOthers.TASK_UID = Guid.NewGuid();
         taskOthers.TASK_NAME = "Other Tasks";
         projectDs.Task.AddTaskRow(taskOthers);

         // Add some subtasks.

         SvcProject.ProjectDataSet.TaskRow taskThree = projectDs.Task.NewTaskRow();
         taskThree.PROJ_UID = projectId;
         taskThree.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskThree.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskThree.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskThree.TASK_NAME = "Task Three";
         taskThree.TASK_PARENT_UID = taskOthers.TASK_UID;
         taskThree.TASK_OUTLINE_LEVEL = 2;
         projectDs.Task.AddTaskRow(taskThree);

         SvcProject.ProjectDataSet.TaskRow taskFour = projectDs.Task.NewTaskRow();
         taskFour.PROJ_UID = projectId;
         taskFour.TASK_UID = Guid.NewGuid();
         // The Task Duration format must be specified.
         taskFour.TASK_DUR_FMT = (int)PSLibrary.Task.DurationFormat.Day;
         taskFour.TASK_DUR = 4800;  // 8 hours in duration units (minute/10)
         taskFour.TASK_NAME = "Task Four";
         taskFour.TASK_PARENT_UID = taskOthers.TASK_UID;
         taskFour.TASK_OUTLINE_LEVEL = 2;
         projectDs.Task.AddTaskRow(taskFour);


         // Make task four dependent on task three.
         dependency = projectDs.Dependency.NewDependencyRow();
         dependency.LINK_UID = Guid.NewGuid();
         dependency.PROJ_UID = projectId;
         dependency.LINK_PRED_UID = taskThree.TASK_UID;
         dependency.LINK_SUCC_UID = taskFour.TASK_UID;
         dependency.LINK_TYPE = 1;  //Finish to Start
         dependency.LINK_LAG_FMT = (int)PSLibrary.Task.DurationFormat.Hour;
         dependency.LINK_LAG = 0;
         projectDs.Dependency.AddDependencyRow(dependency);

         // Make others task dependent on task two.
         dependency = projectDs.Dependency.NewDependencyRow();
         dependency.LINK_UID = Guid.NewGuid();
         dependency.PROJ_UID = projectId;
         dependency.LINK_PRED_UID = taskTwo.TASK_UID;
         dependency.LINK_SUCC_UID = taskOthers.TASK_UID;
         dependency.LINK_TYPE = 1;  //Finish to Start
         dependency.LINK_LAG_FMT = (int)PSLibrary.Task.DurationFormat.Hour;
         dependency.LINK_LAG = 0;
         projectDs.Dependency.AddDependencyRow(dependency);

         //Add some resources.
         SvcProject.ProjectDataSet.ProjectResourceRow resourceOne = projectDs.ProjectResource.NewProjectResourceRow();
         resourceOne.PROJ_UID = projectId;
         resourceOne.RES_UID = Guid.NewGuid();
         resourceOne.RES_NAME = "Brynja Sigrídur Blomsterberg";
         resourceOne.RES_INITIALS = "BSB";
         projectDs.ProjectResource.AddProjectResourceRow(resourceOne);
         CreateAssignment(projectDs, taskOne.TASK_UID, resourceOne.RES_UID);
         CreateAssignment(projectDs, taskTwo.TASK_UID, resourceOne.RES_UID);

         SvcProject.ProjectDataSet.ProjectResourceRow resourceTwo = projectDs.ProjectResource.NewProjectResourceRow();
         resourceTwo.PROJ_UID = projectId;
         resourceTwo.RES_UID = Guid.NewGuid();
         resourceTwo.RES_NAME = "Ioannis Xylaras";
         resourceTwo.RES_INITIALS = "IX";
         projectDs.ProjectResource.AddProjectResourceRow(resourceTwo);
         CreateAssignment(projectDs, taskOne.TASK_UID, resourceTwo.RES_UID);
         CreateAssignment(projectDs, taskTwo.TASK_UID, resourceTwo.RES_UID);
         CreateAssignment(projectDs, taskThree.TASK_UID, resourceTwo.RES_UID);
         CreateAssignment(projectDs, taskFour.TASK_UID, resourceTwo.RES_UID);

         // Save the project to the database.
         jobId = Guid.NewGuid();
         projectSvc.QueueCreateProject(jobId, projectDs, false);
         WaitForQueue(q, jobId);
         return projectRow.PROJ_UID;
      }
      // A helper function for CreateSampleProject.
      // Makes simple assignments.
      private static void CreateAssignment(SvcProject.ProjectDataSet projectDs, Guid taskGuid, Guid resourceGuid)
      {
         SvcProject.ProjectDataSet.AssignmentRow assnRow = projectDs.Assignment.NewAssignmentRow();
         assnRow.PROJ_UID = projectDs.Project[0].PROJ_UID;
         assnRow.ASSN_UID = Guid.NewGuid();
         assnRow.TASK_UID = taskGuid;
         assnRow.RES_UID = resourceGuid;
         projectDs.Assignment.AddAssignmentRow(assnRow);
      }
      #endregion
   }
}
</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="UpdateServerTimelineData">
      <MemberSignature Language="C#" Value="public void UpdateServerTimelineData (Guid timelineType, string tlData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateServerTimelineData(valuetype System.Guid timelineType, string tlData) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcProject.Project.UpdateServerTimelineData(System.Guid,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateServerTimelineData (timelineType As Guid, tlData As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateServerTimelineData(Guid timelineType, System::String ^ tlData);" />
      <MemberSignature Language="F#" Value="member this.UpdateServerTimelineData : Guid * string -&gt; unit" Usage="project.UpdateServerTimelineData (timelineType, tlData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/Project/UpdateServerTimelineData", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/Project/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timelineType" Type="System.Guid" />
        <Parameter Name="tlData" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="timelineType">The GUID that represents the timeline type.</param>
        <param name="tlData">A string that contains timeline item and formatting data to be saved.</param>
        <summary>Saves timeline data to the server database.</summary>
        <remarks>
          <para>Items can be removed or formatted from the timeline itself so a method is required to send that information back to the server.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>