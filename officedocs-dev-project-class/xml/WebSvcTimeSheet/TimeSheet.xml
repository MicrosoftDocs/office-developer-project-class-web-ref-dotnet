<Type Name="TimeSheet" FullName="WebSvcTimeSheet.TimeSheet">
  <TypeSignature Language="C#" Value="public class TimeSheet : System.Web.Services.Protocols.SoapHttpClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TimeSheet extends System.Web.Services.Protocols.SoapHttpClientProtocol" />
  <TypeSignature Language="DocId" Value="T:WebSvcTimeSheet.TimeSheet" />
  <TypeSignature Language="VB.NET" Value="Public Class TimeSheet&#xA;Inherits SoapHttpClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeSheet : System::Web::Services::Protocols::SoapHttpClientProtocol" />
  <TypeSignature Language="F#" Value="type TimeSheet = class&#xA;    inherit SoapHttpClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>ProjectServerServices</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.SoapHttpClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Web.Services.WebServiceBinding(Name="TimeSheetSoap", Namespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Includes methods for managing timesheets in Project Web App.</summary>
    <remarks>
      <para>The timesheet service can import information from projects and server settings, and can optionally provide updates to the <see cref="T:WebSvcStatusing.Statusing" /> subsystem. </para>
      <para>Before you can use the timesheet subsystem, you must create time periods. You can use the Project Web App Administration section (documented in <a href="909ee7cd-14bf-40cd-9db4-2819292704dd">Maintain Projects</a><see cref="M:WebSvcAdmin.Admin.UpdateReportingPeriods(WebSvcAdmin.TimePeriodDataSet,System.Boolean)" /> method. You can also define financial periods, but these are not required.</para>
      <para>After the time periods are created, you can create timesheets. Timesheet behavior is affected by server settings and user configuration. The <see cref="P:WebSvcResource.ResourceDataSet.ResourcesRow.RES_TIMESHEET_MGR_UID" /> property contains the unique identifier of the user who reviews timesheets that are submitted by that user. If the timesheet manager has the <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.ApproveTimesheets" /> permission, he or she can accept or reject timesheets that are submitted by that user. If the timesheet manager does not have the <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.ApproveTimesheets" /> category permission for that user, he or she is a timesheet reviewer. </para>
      <para>When a timesheet manager accepts a timesheet, it is routed to the next timesheet manager for acceptance. If the value of the <see cref="P:WebSvcResource.ResourceDataSet.ResourcesRow.RES_TIMESHEET_MGR_UID" /> property is the same as <see cref="P:WebSvcResource.ResourceDataSet.ResourcesRow.RES_UID" />, the user is an auto-approve timesheet user. When the user submits a timesheet, it is approved automatically. </para>
      <para>If an enterprise resource has the <see cref="P:WebSvcResource.ResourceDataSet.ResourcesRow.RES_TIMESHEET_MGR_UID" /> property set to nulla null value, the resource is an optional timesheet user. Timesheets are not required for optional timesheet users. Timesheets for optional timesheet users do not appear on late timesheet reports, and other related automatic features are not enabled. </para>
      <para>When a timesheet is finalized and should not be changed, the <see cref="P:WebSvcTimeSheet.TimesheetDataSet.HeadersRow.TS_IS_PROCESSED" /> property should be set to <b>true</b>. When <see cref="P:WebSvcTimeSheet.TimesheetDataSet.HeadersRow.TS_IS_PROCESSED" /> is <b>true</b>, the timesheet can not be recalled or deleted.</para>
      <para />
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSheet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSheet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a <b>TimeSheet</b> object from the ASMX-based <b>TimeSheet</b> web service.</summary>
        <remarks>
          <para>To create an object that is equivalent to <b>TimeSheet</b> by using the Windows Communication Foundation (WCF) API, use one of the <b>TimeSheetClient</b> constructors.</para>
          <para />
        </remarks>
        <example>
          <para>In the following statement, <b>TimeSheetWebSvc</b> is an arbitrary namespace for the ASMX-based <b>TimeSheet</b> web service.</para>
          <code>private static TimeSheetWebSvc.TimeSheet timesheet = new TimeSheetWebSvc.Timesheet();</code>
          <para>In the following statement, <b>SvcTimeSheet</b> is an arbitrary namespace for the WCF-based <b>TimeSheet</b> service. The <paramref name="endpt" /> parameter is a <b>String</b> value that specifies the name of the client endpoint address in the app.config file (or in the web.config file for web applications).</para>
          <code>private static SvcTimeSheet.TimeSheetClient timesheetClient = new SvcTimesheet.TimesheetClient(endpt);</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ApproveNonProjectTime">
      <MemberSignature Language="C#" Value="public void ApproveNonProjectTime (Guid[] approvedTimesheetLines, Guid[] rejectedTimesheetLines);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApproveNonProjectTime(valuetype System.Guid[] approvedTimesheetLines, valuetype System.Guid[] rejectedTimesheetLines) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.ApproveNonProjectTime(System.Guid[],System.Guid[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApproveNonProjectTime (approvedTimesheetLines As Guid(), rejectedTimesheetLines As Guid())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApproveNonProjectTime(cli::array &lt;Guid&gt; ^ approvedTimesheetLines, cli::array &lt;Guid&gt; ^ rejectedTimesheetLines);" />
      <MemberSignature Language="F#" Value="member this.ApproveNonProjectTime : Guid[] * Guid[] -&gt; unit" Usage="timeSheet.ApproveNonProjectTime (approvedTimesheetLines, rejectedTimesheetLines)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/ApproveNonProjectTime", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="approvedTimesheetLines" Type="System.Guid[]" />
        <Parameter Name="rejectedTimesheetLines" Type="System.Guid[]" />
      </Parameters>
      <Docs>
        <param name="approvedTimesheetLines">The unique identifiers of the <b>TimesheetLines</b> to approve.</param>
        <param name="rejectedTimesheetLines">The unique identifiers of the <b>TimesheetLines</b> to reject.</param>
        <summary>Changes the state of the specified non-project time items, from pending to approved or rejected.</summary>
        <remarks>
          <para>
            <b>ApproveNonProjectTime</b> acts on all nonproject timesheet lines for which the user is the timesheet manager.</para>
          <para>This method submits jobs to the <see cref="T:WebSvcQueueSystem.QueueSystem" /> object. The <see cref="P:WebSvcQueueSystem.QueueStatusDataSet.StatusRow.CorrelationGUID" /> property for the job is equal to the <see cref="P:WebSvcTimeSheet.TimesheetDataSet.HeadersRow.TS_UID" /> property.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>Non-standard</term>
              <description>The current user is the timesheet manager of the resource.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following code example creates a timesheet by using the default server settings. It finds the first line that requires a prior approval, and updates the time. If the default server settings have been changed so that there is no line that requires a prior approval, the example errors out. The timesheet is then submitted without being approved, and is rejected because there was no approval. The time is then approved and the timesheet is submitted again. The submission then succeeds.</para>
          <para>
            <b>Note</b>: You may need to delete old timesheets or create new periods if there are no open periods without timesheets for the sample resource.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;
namespace Microsoft.SDK.Project.Samples.ApproveNonProjectTime
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try{
            #region Setup
            const string PROJECT_SERVER_URI = "http://&lt;i&gt;ServerName&lt;/i&gt;/&lt;i&gt;ProjectServerName&lt;/i&gt;/"; // &amp;lt;&amp;lt;--Change to be the name of your server running Project Server and the name of your directory.
            const string TIMESHEET_SERVICE_PATH = "_vti_bin/psi/timesheet.asmx";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
            const string ADMIN_SERVICE_PATH = "_vti_bin/psi/admin.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            TimeSheetWebSvc.TimesheetDataSet timesheetDs;

            // Set up the services.
            TimeSheetWebSvc.TimeSheet timeSheetSvc = new TimeSheetWebSvc.TimeSheet();
            timeSheetSvc.UseDefaultCredentials = true;
            timeSheetSvc.Url = PROJECT_SERVER_URI + TIMESHEET_SERVICE_PATH;
            CodeSample_TimeSheetUtilities timeSheetUtils = new CodeSample_TimeSheetUtilities(timeSheetSvc);

            ResourceWebSvc.Resource resourceSvc = new ResourceWebSvc.Resource();
            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.UseDefaultCredentials = true;
            CodeSample_ResourceUtilities resourceUtils = new CodeSample_ResourceUtilities(resourceSvc);

            AdminWebSvc.Admin adminSvc = new AdminWebSvc.Admin();
            adminSvc.Url = PROJECT_SERVER_URI + ADMIN_SERVICE_PATH;
            adminSvc.UseDefaultCredentials = true;
            
            QueueSystemWebSvc.QueueSystem q = new QueueSystemWebSvc.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;

            #endregion
            #region Setup a timesheet with non-project time
            Guid sampleResourceUid = resourceUtils.EnsureLertchai();

            AdminWebSvc.TimePeriodDataSet timePeriodDs = adminSvc.ReadPeriods(AdminWebSvc.PeriodState.Open);

            Guid periodUid = timeSheetUtils.FindFirstEmptyPeriod(sampleResourceUid, timePeriodDs);
            Guid timeSheetUid = timeSheetUtils.CreateTimeSheetFor(sampleResourceUid, resourceUtils.myUid, periodUid);
            timesheetDs = timeSheetSvc.ReadTimesheet(timeSheetUid);

            // Find a line that requires approval.

            TimeSheetWebSvc.TimesheetDataSet.LinesRow[] approvalNeeded = (TimeSheetWebSvc.TimesheetDataSet.LinesRow[])timesheetDs.Lines.Select("TS_LINE_CLASS_NEED_APPROVAL = true");
            if (approvalNeeded.Length &amp;lt; 1)
            {
               throw(new ApplicationException("No lines requiring approval were found on the timesheet.\r\nChange your server settings so that one default admin type requires approval."));
            }

            TimeSheetWebSvc.TimesheetDataSet.ActualsRow actualsRow = timesheetDs.Actuals.NewActualsRow();
            AdminWebSvc.TimePeriodDataSet.TimePeriodsRow timePeriodsRow = timePeriodDs.TimePeriods.FindByWPRD_UID(periodUid);

            approvalNeeded[0].TS_LINE_COMMENT = "I really need a break.";
            actualsRow.TS_LINE_UID = approvalNeeded[0].TS_LINE_UID;
            actualsRow.TS_ACT_PLAN_VALUE =  1000 * 60 * 8;// 8 hours
            actualsRow.TS_ACT_NON_BILLABLE_VALUE = actualsRow.TS_ACT_PLAN_VALUE;
            actualsRow.TS_ACT_COMMENT = "Adding some time so it must be approved.";
            actualsRow.TS_ACT_FINISH_DATE = timePeriodsRow.WPRD_START_DATE.AddDays(1).AddTicks(-1);
            actualsRow.TS_ACT_START_DATE = timePeriodsRow.WPRD_START_DATE;
            timesheetDs.Actuals.AddActualsRow(actualsRow);

            actualsRow = timesheetDs.Actuals.NewActualsRow();
            actualsRow.TS_LINE_UID = approvalNeeded[0].TS_LINE_UID;
            actualsRow.TS_ACT_PLAN_VALUE = 1000 * 60 * 8;// 8 hours
            actualsRow.TS_ACT_NON_BILLABLE_VALUE = actualsRow.TS_ACT_PLAN_VALUE;
            actualsRow.TS_ACT_COMMENT = "Adding some time so it must be approved.";
            actualsRow.TS_ACT_FINISH_DATE = timePeriodsRow.WPRD_START_DATE.AddDays(2).AddTicks(-1);
            actualsRow.TS_ACT_START_DATE = timePeriodsRow.WPRD_START_DATE.AddDays(1);
            timesheetDs.Actuals.AddActualsRow(actualsRow);


            Guid jobUid = Guid.NewGuid();
            timeSheetSvc.QueueUpdateTimesheet(jobUid, timeSheetUid, timesheetDs);
            CodeSampleUtilities.WaitForQueue(q, jobUid);

            timesheetDs = timeSheetSvc.ReadTimesheet(timeSheetUid);

            CodeSampleUtilities.WriteTablesFormated("Timesheet DS data that needs approval", timesheetDs.Tables);
            #endregion
            #region Try submitting with out approval
            try
            {
               // This fails because the time must be approved.
               Console.WriteLine("Submit timesheet without approving administrative time.");
               jobUid=Guid.NewGuid();
               timeSheetSvc.QueueSubmitTimesheet(jobUid, timeSheetUid, resourceUtils.myUid, "This won't work the first time.");
               CodeSampleUtilities.WaitForQueue(q, jobUid);
            }
            catch (Exception ex)
            {
               Console.WriteLine("Submit failed because administrative time needed to be approved.");
               ExceptionHandlers.HandleException(ex);
               q.CancelJob(jobUid, true, true);
               Console.ResetColor();
            }
            #endregion
            #region Approve non-project time.

            Console.WriteLine("Approve the non-project type.");
            timeSheetSvc.ApproveNonProjectTime(new Guid[] { approvalNeeded[0].TS_LINE_UID }, null);
            #endregion
            #region Resubmit after approval
            // Now try the submission again...
            // This works because the administrative time was approved.
            Console.WriteLine("Try the submission again.");
            jobUid = Guid.NewGuid();
            timeSheetSvc.QueueSubmitTimesheet(jobUid, timeSheetUid, resourceUtils.myUid, "This will work.");
            CodeSampleUtilities.WaitForQueue(q, jobUid);

            timesheetDs = timeSheetSvc.ReadTimesheet(timeSheetUid);
            CodeSampleUtilities.WriteTablesFormated("Submission succeeded!", timesheetDs.Tables);
          
            #endregion
         }
         catch (SoapException ex)
         {
         ExceptionHandlers.HandleSoapException(ex);
         }
         catch (WebException ex)
         {
         ExceptionHandlers.HandleWebException(ex);
         }
         catch (Exception ex)
         {
         ExceptionHandlers.HandleException(ex);
         }
         finally
         {
         ExceptionHandlers.ResetConsole();
         }
      }
   }
   class ExceptionHandlers
   {
      public static void HandleSoapException(SoapException ex)
      {
         PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
         PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
         string errMess = "==============================\r\nError: \r\n";
         for (int i = 0; i &amp;lt; errors.Length; i++)
         {
            errMess += "\n" + ex.Message.ToString() + "\r\n";
            errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
            errMess += errors[i].ErrId.ToString() + "\n";

            for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
            {
               errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": "
                  + errors[i].ErrorAttributes[j];
            }
            errMess += "\r\n".PadRight(30, '=');
         }
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine(errMess);
      }

      public static void HandleWebException(WebException ex)
      {
         string errMess = ex.Message.ToString() +
            "\n\nLog on, or check the Project Server Queuing Service";
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine("Error: " + errMess);
      }

      public static void HandleException(Exception ex)
      {
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine("Error: " + ex.Message);
      }

      public static void ResetConsole()
      {
         Console.ResetColor();
         Console.WriteLine("\r\n\r\nPress any key...");
         Console.ReadKey();
      }
   }
   class CodeSampleUtilities
   {
      // Write all contents of a table collection to the console.
      public static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing.
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // Add a space so that it will not wrap.
            tableWidth += 1;
            // Make the console as wide as the widest table.
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data.
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {

                  dataString = row[i].ToString();
                  // Truncate output if it is wider than 
                  // the desired column width.
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // Add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // Helper function for WriteTablesToConsole.
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: Might not handle byte[]data types well.
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         //Return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it.
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise, use the max col width.
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // Truncate if over the maxlength.
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // Always be at least as wide as the colum name.
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
      public static void WriteTablesFormated(string Title, System.Data.DataTableCollection theTables)
      {
         WriteSeparator();
         Console.WriteLine(Title);

         CodeSampleUtilities.WriteTablesToConsole(theTables);

      }
      public static void WriteSeparator()
      {
         Console.ForegroundColor = ConsoleColor.DarkYellow;
         Console.WriteLine("".PadRight(Console.BufferWidth, '='));
         Console.ResetColor();

      }

      // Wait for the job to finish.
      // Outputs job status to the console.
      static public void WaitForQueue(QueueSystemWebSvc.QueueSystem q, Guid jobId)
      {
         QueueSystemWebSvc.JobState jobState;
         const int QUEUE_WAIT_TIME = 1; // One second
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         //Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Console.Write("Waiting on queue. Estimate: {0} seconds.\r\n ", wait);

         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == QueueSystemWebSvc.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == QueueSystemWebSvc.JobState.Unknown
               || jobState == QueueSystemWebSvc.JobState.Failed
               || jobState == QueueSystemWebSvc.JobState.FailedNotBlocking
               || jobState == QueueSystemWebSvc.JobState.CorrelationBlocked
               || jobState == QueueSystemWebSvc.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  //Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                  Console.Write("~");
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
         Console.Write("\r\n");
      }
   }
   class CodeSample_TimeSheetUtilities
   {
      TimeSheetWebSvc.TimeSheet timeSheetSvc;

      public CodeSample_TimeSheetUtilities(TimeSheetWebSvc.TimeSheet theTimeSheetSvc)
      {
         timeSheetSvc = theTimeSheetSvc;
      }
      public Guid CreateTimeSheetFor(Guid resourceGuid, Guid mgrUid,Guid periodUid)
      {

         TimeSheetWebSvc.TimesheetDataSet timesheetDs = new TimeSheetWebSvc.TimesheetDataSet();
         TimeSheetWebSvc.TimesheetDataSet.HeadersRow headersRow = timesheetDs.Headers.NewHeadersRow();
         headersRow.RES_UID = resourceGuid;
         headersRow.TS_UID = Guid.NewGuid();
         headersRow.WPRD_UID = periodUid;
         headersRow.TS_CREATOR_RES_UID = mgrUid;
         headersRow.TS_NAME = "Timesheet ";
         headersRow.TS_COMMENTS = "Timesheet for code sample";
         headersRow.TS_ENTRY_MODE_ENUM = (byte)PSLibrary.TimesheetEnum.EntryMode.Weekly;
         timesheetDs.Headers.AddHeadersRow(headersRow);

         // Create the timesheet with the default line types that are specified by the admin.
         timeSheetSvc.CreateTimesheet(timesheetDs, TimeSheetWebSvc.PreloadType.Default);

         return headersRow.TS_UID;
      }
      
      public Guid FindFirstEmptyPeriod(Guid resUid,AdminWebSvc.TimePeriodDataSet timePeriodDs)
      {
         TimeSheetWebSvc.TimesheetDataSet timeSheetDs;

         for (int i = 0; i &amp;lt; timePeriodDs.TimePeriods.Count; i++)
         {
            timeSheetDs = timeSheetSvc.ReadTimesheetByPeriod(resUid, timePeriodDs.TimePeriods[i].WPRD_UID, TimeSheetWebSvc.Navigation.Current);
            if (timeSheetDs.Headers.Count == 0)
            {
               return timePeriodDs.TimePeriods[i].WPRD_UID;
            }
         }
         return Guid.Empty;
      }
   }
   class CodeSample_ResourceUtilities
   {

      private ResourceWebSvc.Resource m_resourceSvc;
      private Guid m_MyUid;
      private Guid sampleResource = Guid.Empty;

      public CodeSample_ResourceUtilities(ResourceWebSvc.Resource theResourceSvc)
      {
         m_resourceSvc = theResourceSvc;
         m_MyUid = resourceSvc.GetCurrentUserUid();
      }

      public Guid myUid
      {
         get { return m_MyUid; }
      }

      public ResourceWebSvc.Resource resourceSvc
      {
         get {return m_resourceSvc;}
      }

      public Guid EnsureLertchai()
      {
         return EnsureSampleResource("Lertchai Treetawatchaiwong", "LT");
      }

      public Guid EnsureSampleResource(string name,string inits)
      {
         Guid resGuid = GetResourceGuid(name);
         if (resGuid == Guid.Empty)
         {
            resGuid = this.CreateResource(name, inits, myUid);
         }
         return resGuid;
      }

      public Guid GetResourceGuid(string resourceName)
      {
         ResourceWebSvc.ResourceDataSet resourceDs = new ResourceWebSvc.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, resourceName);
         resourceFilter.Criteria = existingResource;
         resourceDs = resourceSvc.ReadResources(resourceFilter.GetXml(), false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs.Resources[0].RES_UID;
         }
         else
         {
            return Guid.Empty;
         }
      }

      private Guid CreateResource(string resourceName, string initials, Guid timesheetMgr)
      {
         ResourceWebSvc.ResourceDataSet resourceDs = new ResourceWebSvc.ResourceDataSet();
         ResourceWebSvc.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
         resourceRow.RES_UID = Guid.NewGuid();
         resourceRow.RES_NAME = resourceName;
         resourceRow.RES_INITIALS = initials;
         resourceRow.RES_TYPE = (int)PSLibrary.Resource.Type.WorkResource;
         resourceRow.RES_TIMESHEET_MGR_UID = timesheetMgr;
         resourceDs.Resources.AddResourcesRow(resourceRow);
         resourceSvc.CreateResources(resourceDs, false, true);
         return resourceRow.RES_UID;
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ApproveProjectTimesheetLines">
      <MemberSignature Language="C#" Value="public void ApproveProjectTimesheetLines (Guid[] approvedTimesheetLines, Guid[] rejectedTimesheetLines, string comment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApproveProjectTimesheetLines(valuetype System.Guid[] approvedTimesheetLines, valuetype System.Guid[] rejectedTimesheetLines, string comment) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.ApproveProjectTimesheetLines(System.Guid[],System.Guid[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApproveProjectTimesheetLines (approvedTimesheetLines As Guid(), rejectedTimesheetLines As Guid(), comment As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApproveProjectTimesheetLines(cli::array &lt;Guid&gt; ^ approvedTimesheetLines, cli::array &lt;Guid&gt; ^ rejectedTimesheetLines, System::String ^ comment);" />
      <MemberSignature Language="F#" Value="member this.ApproveProjectTimesheetLines : Guid[] * Guid[] * string -&gt; unit" Usage="timeSheet.ApproveProjectTimesheetLines (approvedTimesheetLines, rejectedTimesheetLines, comment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/ApproveProjectTimesheetLines", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="approvedTimesheetLines" Type="System.Guid[]" />
        <Parameter Name="rejectedTimesheetLines" Type="System.Guid[]" />
        <Parameter Name="comment" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="approvedTimesheetLines">To be added.</param>
        <param name="rejectedTimesheetLines">To be added.</param>
        <param name="comment">To be added.</param>
        <summary>Approves or rejects a set of project timesheet lines.</summary>
        <remarks>
          <para />
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ApproveProjectTimesheetLine" />
              </term>
              <description>Allows a user to approve project timesheet lines. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimesheet">
      <MemberSignature Language="C#" Value="public void CreateTimesheet (WebSvcTimeSheet.TimesheetDataSet dsDelta, WebSvcTimeSheet.PreloadType preloadType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateTimesheet(class WebSvcTimeSheet.TimesheetDataSet dsDelta, valuetype WebSvcTimeSheet.PreloadType preloadType) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.CreateTimesheet(WebSvcTimeSheet.TimesheetDataSet,WebSvcTimeSheet.PreloadType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateTimesheet(WebSvcTimeSheet::TimesheetDataSet ^ dsDelta, WebSvcTimeSheet::PreloadType preloadType);" />
      <MemberSignature Language="F#" Value="member this.CreateTimesheet : WebSvcTimeSheet.TimesheetDataSet * WebSvcTimeSheet.PreloadType -&gt; unit" Usage="timeSheet.CreateTimesheet (dsDelta, preloadType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/CreateTimesheet", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dsDelta" Type="WebSvcTimeSheet.TimesheetDataSet" />
        <Parameter Name="preloadType" Type="WebSvcTimeSheet.PreloadType" />
      </Parameters>
      <Docs>
        <param name="dsDelta">A populated <see cref="T:WebSvcTimeSheet.TimesheetDataSet" /> object.</param>
        <param name="preloadType">A <see cref="T:WebSvcTimeSheet.PreloadType" /> object that indicates the desired preloaded lines for the timesheet.</param>
        <summary>Creates a new timesheet and calls the <see cref="M:WebSvcTimeSheet.TimeSheet.PrepareTimesheetLine(System.Guid,WebSvcTimeSheet.TimesheetDataSet@,System.Guid[])" /> method.</summary>
        <remarks>
          <para>This method submits jobs to the <see cref="T:WebSvcQueueSystem.QueueSystem" /> object. The <see cref="P:WebSvcQueueSystem.QueueStatusDataSet.StatusRow.CorrelationGUID" /> property for the job is equal to the value of the <see cref="P:WebSvcTimeSheet.TimesheetDataSet.HeadersRow.TS_UID" /> property.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>Non-standard</term>
              <description>The current user is the timesheet owner.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.CreateSurrogateTimesheet" />
              </term>
              <description>Allows the user to create a surrogate timesheet. Applies only if the current user is not the timesheet owner. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following code example determines whether a timesheet exists for the first open period. If it does, the example reads the timesheet. If the timesheet does not exist, the example creates a timesheet with the default timesheet lines that are specified on the server.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.CreateTimesheet
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try{
            #region Setup
            const string PROJECT_SERVER_URI = "http:// &lt;i&gt;ServerName&lt;/i&gt;/&lt;i&gt;ProjectServerName&lt;/i&gt;/"; // &amp;lt;&amp;lt;--Change to be the name of your server running Project Server and the name of your directory.
            const string TIMESHEET_SERVICE_PATH = "_vti_bin/psi/timesheet.asmx";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
            const string ADMIN_SERVICE_PATH = "_vti_bin/psi/admin.asmx";
            TimeSheetWebSvc.TimesheetDataSet timesheetDs;

            // Set up the services.
            TimeSheetWebSvc.TimeSheet timeSheetSvc = new TimeSheetWebSvc.TimeSheet();
            timeSheetSvc.UseDefaultCredentials = true;
            timeSheetSvc.Url = PROJECT_SERVER_URI + TIMESHEET_SERVICE_PATH;

            ResourceWebSvc.Resource resourceSvc = new ResourceWebSvc.Resource();
            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.UseDefaultCredentials = true;

            AdminWebSvc.Admin adminSvc = new AdminWebSvc.Admin();
            adminSvc.Url = PROJECT_SERVER_URI + ADMIN_SERVICE_PATH;
            adminSvc.UseDefaultCredentials = true;

            Guid myUid = resourceSvc.GetCurrentUserUid();

            #endregion
            #region Read Timesheet
            // Time periods must be created by the admin to use timesheets.
            // We are just reading the first open period here.
            AdminWebSvc.TimePeriodDataSet timeperiodDs = adminSvc.ReadPeriods(AdminWebSvc.PeriodState.Open);
            Guid periodUid = timeperiodDs.TimePeriods[0].WPRD_UID;

            // If the timesheet already exists, read it.
            // (To delete an existing unsubmitted timesheet,
            //   go to the My Timesheet area of the Project Web App site.)
            timesheetDs = timeSheetSvc.ReadTimesheetByPeriod(myUid,periodUid,TimeSheetWebSvc.Navigation.Current);
            #endregion
            #region CreateTimesheet if it doesn't exist, then read it
            // If the timesheet does not exist, create it.
            if(timesheetDs.Headers.Count&amp;lt;1)
            {
               timesheetDs = new TimeSheetWebSvc.TimesheetDataSet();
               TimeSheetWebSvc.TimesheetDataSet.HeadersRow headersRow = timesheetDs.Headers.NewHeadersRow();
               headersRow.RES_UID = myUid;
               headersRow.TS_UID = Guid.NewGuid();
               headersRow.WPRD_UID = periodUid;
               headersRow.TS_CREATOR_RES_UID = myUid;
               headersRow.TS_NAME = "Timesheet ";
               headersRow.TS_COMMENTS = "Random comment text here";
               headersRow.TS_ENTRY_MODE_ENUM = (byte)PSLibrary.TimesheetEnum.EntryMode.Weekly; 
               timesheetDs.Headers.AddHeadersRow(headersRow);

               // Create the timesheet with the default line types that are specified by the admin.
               timeSheetSvc.CreateTimesheet(timesheetDs, TimeSheetWebSvc.PreloadType.Default);
               timesheetDs = timeSheetSvc.ReadTimesheet(headersRow.TS_UID);
            }
            CodeSampleUtilities.WriteTablesFormated("Timesheet after create:" ,timesheetDs.Tables);
            #endregion
         }
         catch (SoapException ex)
         {
            ExceptionHandlers.HandleSoapException(ex);
         }
         catch (WebException ex)
         {
            ExceptionHandlers.HandleWebException(ex);
         }
         catch (Exception ex)
         {
            ExceptionHandlers.HandleException(ex);
         }
         finally
         {
            ExceptionHandlers.ResetConsole();
         }
      }
   }      
   class ExceptionHandlers
      {

         public static void HandleSoapException(SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": "
                     + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }

         public static void HandleWebException(WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }

         public static void HandleException(Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }

         public static void ResetConsole()
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }
   class CodeSampleUtilities
      {
         // Write all contents of a table collection to the console.
         public static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
         {
            Console.ForegroundColor = ConsoleColor.DarkGreen;
            foreach (System.Data.DataTable table in theTables)
            {

               int[] columnWidths = new int[table.Columns.Count];
               int tableWidth = 0;
               string dataString;
               Console.WriteLine("Table: " + table.TableName);

               // Write out the column names and get their spacing.
               StringBuilder tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  columnWidths[i] = GetColumnWidth(table.Columns[i]);
                  tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

                  tableWidth += columnWidths[i];
               }
               // Add a space so that it will not wrap.
               tableWidth += 1;
               // Make the console as wide as the widest table.
               Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());

               // Write out the data.
               foreach (DataRow row in table.Rows)
               {
                  tableRow = new StringBuilder();
                  for (int i = 0; i &amp;lt; table.Columns.Count; i++)
                  {

                     dataString = row[i].ToString();
                     // Truncate output if it is wider than 
                     // the desired column width.
                     if (dataString.Length &amp;gt;= columnWidths[i])
                     {
                        dataString = dataString.Substring(0, columnWidths[i] - 1);
                     }
                     // Add the output to the stringbuilder and pad right to fill
                     // up to the column width.
                     tableRow.Append(dataString.PadRight(columnWidths[i]));
                  }
                  tableRow.Append("\r\n");
                  Console.Write(tableRow.ToString());
               }
               Console.Write("\r\n".PadLeft(tableWidth, '-'));
            }
            Console.ResetColor();
         }
         // A helper function for WriteTablesToConsole.
         private static int GetColumnWidth(DataColumn column)
         {
            // Note: Might not handle byte[]data types well.
            const int MAX_COL_WIDTH = 40;
            int dataWidth = 0;

            //Return 12 for numbers, 30 for dates, and string width for strings.
            switch (column.DataType.UnderlyingSystemType.ToString())
            {
               case "System.Boolean":
               case "System.Byte":
               case "System.Byte[]":
               case "System.Char":
               case "System.Decimal":
               case "System.Double":
               case "System.Int16":
               case "System.Int32":
               case "System.Int64":
               case "System.SByte":
               case "System.Single":
               case "System.UInt16":
               case "System.UInt32":
               case "System.UInt64":
                  dataWidth = 12;
                  break;
               case "System.DateTime":
               case "System.TimeSpan":
                  dataWidth = 30;
                  break;
               case "System.Guid":
                  dataWidth = 37;
                  break;
               case "System.String":
                  // If it has a maxlength, use it.
                  if (column.MaxLength &amp;gt; 0)
                  {
                     dataWidth = column.MaxLength;
                  }
                  else
                  {
                     // Otherwise use the max col width.
                     dataWidth = MAX_COL_WIDTH;
                  }
                  break;
               default:
                  dataWidth = column.ColumnName.Length;
                  break;
            }
            // Truncate if over the maxlength.
            if (dataWidth &amp;gt; MAX_COL_WIDTH)
            {
               dataWidth = MAX_COL_WIDTH;
            }
            // Always be at least as wide as the colum name.
            return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
         }
         public static void WriteTablesFormated(string Title, System.Data.DataTableCollection theTables)
         {
            WriteSeparator();

            Console.WriteLine(Title);

            CodeSampleUtilities.WriteTablesToConsole(theTables);

         }
         public static void WriteSeparator()
         {
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine("".PadRight(Console.BufferWidth, '='));
            Console.ResetColor();

         }
      }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="PrepareTimesheetLine">
      <MemberSignature Language="C#" Value="public void PrepareTimesheetLine (Guid tsUID, ref WebSvcTimeSheet.TimesheetDataSet dsDelta, Guid[] tlsNeedFill);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PrepareTimesheetLine(valuetype System.Guid tsUID, class WebSvcTimeSheet.TimesheetDataSet&amp; dsDelta, valuetype System.Guid[] tlsNeedFill) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.PrepareTimesheetLine(System.Guid,WebSvcTimeSheet.TimesheetDataSet@,System.Guid[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrepareTimesheetLine (tsUID As Guid, ByRef dsDelta As TimesheetDataSet, tlsNeedFill As Guid())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PrepareTimesheetLine(Guid tsUID, WebSvcTimeSheet::TimesheetDataSet ^ % dsDelta, cli::array &lt;Guid&gt; ^ tlsNeedFill);" />
      <MemberSignature Language="F#" Value="member this.PrepareTimesheetLine : Guid *  * Guid[] -&gt; unit" Usage="timeSheet.PrepareTimesheetLine (tsUID, dsDelta, tlsNeedFill)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/PrepareTimesheetLine", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tsUID" Type="System.Guid" />
        <Parameter Name="dsDelta" Type="WebSvcTimeSheet.TimesheetDataSet" RefType="ref" />
        <Parameter Name="tlsNeedFill" Type="System.Guid[]" />
      </Parameters>
      <Docs>
        <param name="tsUID">The unique identifier for the specified timesheet.</param>
        <param name="dsDelta">A populated <see cref="T:WebSvcTimeSheet.TimesheetDataSet" /> object.</param>
        <param name="tlsNeedFill">An array of unique identifiers of the timesheet lines to populate.</param>
        <summary>Validates and populates a timesheet line item and preloads work actuals for the timesheet line.</summary>
        <remarks>
          <para>Project Web App uses the <b>PrepareTimesheetLine</b> method in the Add Task dialog box and when creating a new timesheet.</para>
          <para>When you define an administrative task in Project Web App, it is automatically added when a team member creates a timesheet. Administrative tasks are defined on the Administrative Time page (http://Servername/ProjectServername/_layouts/pwa/Admin/AdmTime.aspx). However, administrative tasks defined for specified period in Project Web App are added to all timesheets. You can use the <b>PrepareTimesheetLine</b> method to selectively add additional administrative tasks to a timesheet.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>Non-standard</term>
              <description>The current user is the timesheet owner.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.AdjustTimesheet" />
              </term>
              <description>Allows the user to make changes to a timesheet. Applies only if the current user is not the timesheet owner. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following code example creates a blank timesheet, then adds an administrative line to it, prepares the line, and saves it to the database.</para>
          <para>
            <b>Note</b>: You might need to delete old timesheets or create periods if there are no open periods without timesheets for the sample resource.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;
namespace Microsoft.SDK.Project.Samples.PrepareTimesheetLine
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            #region Setup
            const string PROJECT_SERVER_URI = "http:// &lt;i&gt;ServerName&lt;/i&gt;/&lt;i&gt;ProjectServerName&lt;/i&gt;/"; // &amp;lt;&amp;lt;--Change to be the name of your server running Project Server and the name of your directory.
            const string TIMESHEET_SERVICE_PATH = "_vti_bin/psi/timesheet.asmx";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
            const string ADMIN_SERVICE_PATH = "_vti_bin/psi/admin.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            TimeSheetWebSvc.TimesheetDataSet timesheetDs;

            // Set up the services.
            TimeSheetWebSvc.TimeSheet timeSheetSvc = new TimeSheetWebSvc.TimeSheet();
            timeSheetSvc.UseDefaultCredentials = true;
            timeSheetSvc.Url = PROJECT_SERVER_URI + TIMESHEET_SERVICE_PATH;
            CodeSample_TimeSheetUtilities timeSheetUtils = new CodeSample_TimeSheetUtilities(timeSheetSvc);

            ResourceWebSvc.Resource resourceSvc = new ResourceWebSvc.Resource();
            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.UseDefaultCredentials = true;
            CodeSample_ResourceUtilities resourceUtils = new CodeSample_ResourceUtilities(resourceSvc);

            AdminWebSvc.Admin adminSvc = new AdminWebSvc.Admin();
            adminSvc.Url = PROJECT_SERVER_URI + ADMIN_SERVICE_PATH;
            adminSvc.UseDefaultCredentials = true;

            QueueSystemWebSvc.QueueSystem q = new QueueSystemWebSvc.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;

            AdminWebSvc.TimesheetLineClassDataSet tsLineClassDs = adminSvc.ReadLineClasses(AdminWebSvc.LineClassType.AllNonProject, AdminWebSvc.LineClassState.Enabled);

            #endregion
            #region Setup a timesheet with no lines
            Guid sampleResourceUid = resourceUtils.EnsureLertchai();

            AdminWebSvc.TimePeriodDataSet timePeriodDs = adminSvc.ReadPeriods(AdminWebSvc.PeriodState.Open);

            Guid periodUid = timeSheetUtils.FindFirstEmptyPeriod(sampleResourceUid, timePeriodDs);
            Guid timeSheetUid = timeSheetUtils.CreateEmptyTimeSheetFor(sampleResourceUid, resourceUtils.myUid, periodUid);
            timesheetDs = timeSheetSvc.ReadTimesheet(timeSheetUid);
            #endregion
            #region Create a line and append it to the timesheet, then prepare the line and display the results


            TimeSheetWebSvc.TimesheetDataSet.LinesRow line = timesheetDs.Lines.NewLinesRow();
            line.TS_UID = timeSheetUid;
            line.TS_LINE_UID = Guid.NewGuid();
            line.TS_LINE_CLASS_UID = tsLineClassDs.LineClasses[0].TS_LINE_CLASS_UID;
            line.TS_LINE_COMMENT = "Added by code sample.";
            line.TS_LINE_STATUS = (byte)PSLibrary.TimesheetEnum.LineStatus.NotApplicable;
            line.TS_LINE_VALIDATION_TYPE = (byte)PSLibrary.TimesheetEnum.ValidationType.Unverified;
            line.TS_LINE_CACHED_ASSIGN_NAME = tsLineClassDs.LineClasses[0].TS_LINE_CLASS_DESC;
            timesheetDs.Lines.AddLinesRow(line);

            Console.WriteLine("Prepare the timesheet...");
            timeSheetSvc.PrepareTimesheetLine(timeSheetUid, ref timesheetDs, new Guid[] { line.TS_LINE_UID });

            Console.WriteLine("Save the changes to the database...");
            Guid jobUid = Guid.NewGuid();
            timeSheetSvc.QueueUpdateTimesheet(jobUid, timeSheetUid, timesheetDs);
            CodeSampleUtilities.WaitForQueue(q, jobUid);

            timesheetDs = timeSheetSvc.ReadTimesheet(timeSheetUid);
            CodeSampleUtilities.WriteTablesFormated("After prepare line", timesheetDs.Tables);

            #endregion
         }
         catch (SoapException ex)
         {
            ExceptionHandlers.HandleSoapException(ex);
         }
         catch (WebException ex)
         {
            ExceptionHandlers.HandleWebException(ex);
         }
         catch (Exception ex)
         {
            ExceptionHandlers.HandleException(ex);
         }
         finally
         {
            ExceptionHandlers.ResetConsole();
         }
      }
   }
   class ExceptionHandlers
   {
      public static void HandleSoapException(SoapException ex)
      {
         PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
         PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
         string errMess = "==============================\r\nError: \r\n";
         for (int i = 0; i &amp;lt; errors.Length; i++)
         {
            errMess += "\n" + ex.Message.ToString() + "\r\n";
            errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
            errMess += errors[i].ErrId.ToString() + "\n";

            for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
            {
               errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": "
                  + errors[i].ErrorAttributes[j];
            }
            errMess += "\r\n".PadRight(30, '=');
         }
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine(errMess);
      }

      public static void HandleWebException(WebException ex)
      {
         string errMess = ex.Message.ToString() +
            "\n\nLog on, or check the Project Server Queuing Service";
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine("Error: " + errMess);
      }

      public static void HandleException(Exception ex)
      {
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine("Error: " + ex.Message);
      }

      public static void ResetConsole()
      {
         Console.ResetColor();
         Console.WriteLine("\r\n\r\nPress any key...");
         Console.ReadKey();
      }
   }
   class CodeSampleUtilities
   {
      // Write all contents of a table collection to the console.
      public static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing.
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // Add a space so that it will not wrap.
            tableWidth += 1;
            // Make the console as wide as the widest table.
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data.
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {

                  dataString = row[i].ToString();
                  // Truncate output if it is wider than 
                  // the desired column width.
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // Add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // A helper function for WriteTablesToConsole.
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: Might not handle byte[]data types well.
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         // Return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it.
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise, use the max col width.
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // Truncate if over the maxlength.
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // Always be at least as wide as the colum name.
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
      public static void WriteTablesFormated(string Title, System.Data.DataTableCollection theTables)
      {
         WriteSeparator();
         Console.WriteLine(Title);

         CodeSampleUtilities.WriteTablesToConsole(theTables);

      }
      public static void WriteSeparator()
      {
         Console.ForegroundColor = ConsoleColor.DarkYellow;
         Console.WriteLine("".PadRight(Console.BufferWidth, '='));
         Console.ResetColor();

      }

      // Wait for the job to finish.
      // Outputs job status to the console.
      static public void WaitForQueue(QueueSystemWebSvc.QueueSystem q, Guid jobId)
      {
         QueueSystemWebSvc.JobState jobState;
         const int QUEUE_WAIT_TIME = 1; // One second
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         //Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Console.Write("Waiting on queue. Estimate: {0} seconds.\r\n ", wait);

         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == QueueSystemWebSvc.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == QueueSystemWebSvc.JobState.Unknown
               || jobState == QueueSystemWebSvc.JobState.Failed
               || jobState == QueueSystemWebSvc.JobState.FailedNotBlocking
               || jobState == QueueSystemWebSvc.JobState.CorrelationBlocked
               || jobState == QueueSystemWebSvc.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  //Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                  Console.Write("~");
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
         Console.Write("\r\n");
      }
   }
   class CodeSample_TimeSheetUtilities
   {
      TimeSheetWebSvc.TimeSheet timeSheetSvc;

      public CodeSample_TimeSheetUtilities(TimeSheetWebSvc.TimeSheet theTimeSheetSvc)
      {
         timeSheetSvc = theTimeSheetSvc;
      }
      public Guid CreateEmptyTimeSheetFor(Guid resourceGuid, Guid mgrUid, Guid periodUid)
      {

         TimeSheetWebSvc.TimesheetDataSet timesheetDs = new TimeSheetWebSvc.TimesheetDataSet();
         TimeSheetWebSvc.TimesheetDataSet.HeadersRow headersRow = timesheetDs.Headers.NewHeadersRow();
         headersRow.RES_UID = resourceGuid;
         headersRow.TS_UID = Guid.NewGuid();
         headersRow.WPRD_UID = periodUid;
         headersRow.TS_CREATOR_RES_UID = mgrUid;
         headersRow.TS_NAME = "Timesheet ";
         headersRow.TS_COMMENTS = "Timesheet for code sample";
         headersRow.TS_ENTRY_MODE_ENUM = (byte)PSLibrary.TimesheetEnum.EntryMode.Weekly;
         timesheetDs.Headers.AddHeadersRow(headersRow);

         // Create the timesheet with the default line types that are specified by the admin.
         timeSheetSvc.CreateTimesheet(timesheetDs, TimeSheetWebSvc.PreloadType.None);

         return headersRow.TS_UID;
      }

      public Guid FindFirstEmptyPeriod(Guid resUid, AdminWebSvc.TimePeriodDataSet timePeriodDs)
      {
         TimeSheetWebSvc.TimesheetDataSet timeSheetDs;

         for (int i = 0; i &amp;lt; timePeriodDs.TimePeriods.Count; i++)
         {
            timeSheetDs = timeSheetSvc.ReadTimesheetByPeriod(resUid, timePeriodDs.TimePeriods[i].WPRD_UID, TimeSheetWebSvc.Navigation.Current);
            if (timeSheetDs.Headers.Count == 0)
            {
               return timePeriodDs.TimePeriods[i].WPRD_UID;
            }
         }
         return Guid.Empty;
      }
   }
   class CodeSample_ResourceUtilities
   {

      private ResourceWebSvc.Resource m_resourceSvc;
      private Guid m_MyUid;
      private Guid sampleResource = Guid.Empty;

      public CodeSample_ResourceUtilities(ResourceWebSvc.Resource theResourceSvc)
      {
         m_resourceSvc = theResourceSvc;
         m_MyUid = resourceSvc.GetCurrentUserUid();
      }

      public Guid myUid
      {
         get { return m_MyUid; }
      }

      public ResourceWebSvc.Resource resourceSvc
      {
         get { return m_resourceSvc; }
      }

      public Guid EnsureLertchai()
      {
         return EnsureSampleResource("Lertchai Treetawatchaiwong", "LT");
      }

      public Guid EnsureSampleResource(string name, string inits)
      {
         Guid resGuid = GetResourceGuid(name);
         if (resGuid == Guid.Empty)
         {
            resGuid = this.CreateResource(name, inits, myUid);
         }
         return resGuid;
      }

      public Guid GetResourceGuid(string resourceName)
      {
         ResourceWebSvc.ResourceDataSet resourceDs = new ResourceWebSvc.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, resourceName);
         resourceFilter.Criteria = existingResource;
         resourceDs = resourceSvc.ReadResources(resourceFilter.GetXml(), false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs.Resources[0].RES_UID;
         }
         else
         {
            return Guid.Empty;
         }
      }

      private Guid CreateResource(string resourceName, string initials, Guid timesheetMgr)
      {
         ResourceWebSvc.ResourceDataSet resourceDs = new ResourceWebSvc.ResourceDataSet();
         ResourceWebSvc.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
         resourceRow.RES_UID = Guid.NewGuid();
         resourceRow.RES_NAME = resourceName;
         resourceRow.RES_INITIALS = initials;
         resourceRow.RES_TYPE = (int)PSLibrary.Resource.Type.WorkResource;
         resourceRow.RES_TIMESHEET_MGR_UID = timesheetMgr;
         resourceDs.Resources.AddResourcesRow(resourceRow);
         resourceSvc.CreateResources(resourceDs, false, true);
         return resourceRow.RES_UID;
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="QueueCleanUpTimesheets">
      <MemberSignature Language="C#" Value="public void QueueCleanUpTimesheets (DateTime start, DateTime finish);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueCleanUpTimesheets(valuetype System.DateTime start, valuetype System.DateTime finish) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.QueueCleanUpTimesheets(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueCleanUpTimesheets (start As DateTime, finish As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueCleanUpTimesheets(DateTime start, DateTime finish);" />
      <MemberSignature Language="F#" Value="member this.QueueCleanUpTimesheets : DateTime * DateTime -&gt; unit" Usage="timeSheet.QueueCleanUpTimesheets (start, finish)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/QueueCleanUpTimesheets", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.DateTime" />
        <Parameter Name="finish" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="start">The start date.</param>
        <param name="finish">The finish date.</param>
        <summary>Removes timesheet lines between specified dates.</summary>
        <remarks>
          <para>If the start date is after the finish date, <b>QueueCleanUpTimesheets</b> does not delete any timesheet records.</para>
          <para>This method submits jobs to the <see cref="T:WebSvcQueueSystem.QueueSystem" /> object. The <see cref="P:WebSvcQueueSystem.QueueStatusDataSet.StatusRow.CorrelationGUID" /> property for the job is equal to the value of the <see cref="P:WebSvcTimeSheet.TimesheetDataSet.HeadersRow.TS_UID" /> property.</para>
          <para>
            <b>Note</b>: The <b>QueueCleanUpTimesheets</b> method does not throw an exception or indicate any error if the start date is after the finish date. The method does not affect timesheets but appears to succeed when in fact it has failed.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.CleanupProjectServerDatabase" />
              </term>
              <description>Allows the user to delete or move data in the database. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDeleteTimesheet">
      <MemberSignature Language="C#" Value="public void QueueDeleteTimesheet (Guid jobUID, Guid tsUID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueDeleteTimesheet(valuetype System.Guid jobUID, valuetype System.Guid tsUID) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.QueueDeleteTimesheet(System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueDeleteTimesheet (jobUID As Guid, tsUID As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueDeleteTimesheet(Guid jobUID, Guid tsUID);" />
      <MemberSignature Language="F#" Value="member this.QueueDeleteTimesheet : Guid * Guid -&gt; unit" Usage="timeSheet.QueueDeleteTimesheet (jobUID, tsUID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/QueueDeleteTimesheet", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUID" Type="System.Guid" />
        <Parameter Name="tsUID" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="jobUID">The unique ID of the queue job.</param>
        <param name="tsUID">The unique ID of the timesheet.</param>
        <summary>Deletes records for the specified timesheet.</summary>
        <remarks>
          <para>The <b>QueueDeleteTimesheet</b> method is processed asynchronously through the Project Server Timesheet Queue.</para>
          <para>This method submits jobs to the <see cref="T:WebSvcQueueSystem.QueueSystem" /> object. The <see cref="P:WebSvcQueueSystem.QueueStatusDataSet.StatusRow.CorrelationGUID" /> property for the job is equal to the value of the <see cref="P:WebSvcTimeSheet.TimesheetDataSet.HeadersRow.TS_UID" /> property.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>Non-standard</term>
              <description>The current user is the timesheet owner.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.CleanupProjectServerDatabase" />
              </term>
              <description>Allows the user to delete or move data in the database. Applies only if the current user is not the timesheet owner.Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following code example determines whether a timesheet exists for the first open period. If it does, the example reads the timesheet. If the timesheet does not exist, the example creates a timesheet with the default timesheet lines that are specified on the server. The sample then submits the timesheet and shows the results.</para>
          <para>At the end, the example recalls the timesheet and deletes it so that it can be created again. If you want to view the timesheet approval in Project Web App, comment out the recall and deletion section.</para>
          <para>Timesheet periods must be created in the server settings for timesheets to work.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Threading;
using System.Web.Services.Protocols;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.QueueSubmitTimesheet
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try{
            #region Setup
            const string PROJECT_SERVER_URI = "http:// &lt;i&gt;ServerName&lt;/i&gt;/&lt;i&gt;ProjectServerName&lt;/i&gt;/"; // &amp;lt;&amp;lt;--Change to be the name of your server running Project Server and the name of your directory.
            const string TIMESHEET_SERVICE_PATH = "_vti_bin/psi/timesheet.asmx";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
            const string ADMIN_SERVICE_PATH = "_vti_bin/psi/admin.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            TimeSheetWebSvc.TimesheetDataSet timeSheetDs;
            Guid jobUid;

            // Set up the services.
            TimeSheetWebSvc.TimeSheet timeSheetSvc = new TimeSheetWebSvc.TimeSheet();
            timeSheetSvc.UseDefaultCredentials = true;
            timeSheetSvc.Url = PROJECT_SERVER_URI + TIMESHEET_SERVICE_PATH;

            ResourceWebSvc.Resource resourceSvc = new ResourceWebSvc.Resource();
            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.UseDefaultCredentials = true;

            AdminWebSvc.Admin adminSvc = new AdminWebSvc.Admin();
            adminSvc.Url = PROJECT_SERVER_URI + ADMIN_SERVICE_PATH;
            adminSvc.UseDefaultCredentials = true;

            QueueSystemWebSvc.QueueSystem q = new QueueSystemWebSvc.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;

            Guid myUid = resourceSvc.GetCurrentUserUid();
            Guid tsUid;

            #endregion
            #region Read Timesheet
            // Time periods must be created by the admin to use timesheets.
            // We are just reading the first open period here.
            AdminWebSvc.TimePeriodDataSet timeperiodDs = adminSvc.ReadPeriods(AdminWebSvc.PeriodState.Open);
            Guid periodUid = timeperiodDs.TimePeriods[0].WPRD_UID;

            // If timesheet already exists, read it.
            // (To delete an existing unsubmitted timesheet,
            //   go to the My Timesheet area of the Project Web App site.)
            timeSheetDs = timeSheetSvc.ReadTimesheetByPeriod(myUid,periodUid,TimeSheetWebSvc.Navigation.Current);
            #endregion
            #region CreateTimesheet if it doesn't exist, then read it
            // If the timesheet does not exist, create it.
            if(timeSheetDs.Headers.Count&amp;lt;1)
            {
               timeSheetDs = new TimeSheetWebSvc.TimesheetDataSet();
               TimeSheetWebSvc.TimesheetDataSet.HeadersRow headersRow = timeSheetDs.Headers.NewHeadersRow();
               headersRow.RES_UID = myUid;
               headersRow.TS_UID = Guid.NewGuid();
               headersRow.WPRD_UID = periodUid;
               headersRow.TS_CREATOR_RES_UID = myUid;
               headersRow.TS_NAME = "Timesheet ";
               headersRow.TS_COMMENTS = "Random comment text here";
               headersRow.TS_ENTRY_MODE_ENUM = (byte)PSLibrary.TimesheetEnum.EntryMode.Weekly; 
               timeSheetDs.Headers.AddHeadersRow(headersRow);

               // Create the timesheet with the default line types that are specified by the admin.
               timeSheetSvc.CreateTimesheet(timeSheetDs, TimeSheetWebSvc.PreloadType.Default);
               timeSheetDs = timeSheetSvc.ReadTimesheet(headersRow.TS_UID);
            }
            CodeSampleUtilities.WriteTablesFormated("Timesheet after create:" ,timeSheetDs.Tables);
            tsUid=timeSheetDs.Headers[0].TS_UID;
            #endregion
            #region Submit timesheet, if the status is OK
            if ((timeSheetDs.Headers[0].TS_STATUS_ENUM != (byte)PSLibrary.TimesheetEnum.Status.Approved)
               &amp;amp;&amp;amp; timeSheetDs.Headers[0].TS_STATUS_ENUM != (byte)PSLibrary.TimesheetEnum.Status.Submitted
               )
            {
               jobUid = Guid.NewGuid();
               timeSheetSvc.QueueSubmitTimesheet(jobUid,tsUid,myUid,"I created this timesheet and submitted it through my handy-dandy program.");
               CodeSampleUtilities.WaitForQueue(q, jobUid);
            }
            timeSheetDs = timeSheetSvc.ReadTimesheet(tsUid);
            CodeSampleUtilities.WriteTablesFormated("After submission:", timeSheetDs.Tables);
            #endregion
            #region Recall the timesheet and delete it
            // Recall the timesheet and delete it so that we can run the sample again.
            jobUid = Guid.NewGuid();
            timeSheetSvc.QueueRecallTimesheet(jobUid,tsUid);
            CodeSampleUtilities.WaitForQueue(q, jobUid);

            jobUid = Guid.NewGuid();
            timeSheetSvc.QueueDeleteTimesheet(jobUid, tsUid);
            CodeSampleUtilities.WaitForQueue(q, jobUid);
            #endregion
         }
         #region Exception Handlers
         catch (SoapException ex)
         {
            ExceptionHandlers.HandleSoapException(ex);
         }
         catch (WebException ex)
         {
            ExceptionHandlers.HandleWebException(ex);
         }
         catch (Exception ex)
         {
            ExceptionHandlers.HandleException(ex);
         }
         finally
         {
            ExceptionHandlers.ResetConsole();
         }
         #endregion
      }
      class ExceptionHandlers
      {

         public static void HandleSoapException(SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": "
                     + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }

         public static void HandleWebException(WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }

         public static void HandleException(Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }

         public static void ResetConsole()
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }
      class CodeSampleUtilities
      {
         // Write all contents of a table collection to the console.
         public static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
         {
            Console.ForegroundColor = ConsoleColor.DarkGreen;
            foreach (System.Data.DataTable table in theTables)
            {

               int[] columnWidths = new int[table.Columns.Count];
               int tableWidth = 0;
               string dataString;
               Console.WriteLine("Table: " + table.TableName);

               // Write out the column names and get their spacing.
               StringBuilder tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  columnWidths[i] = GetColumnWidth(table.Columns[i]);
                  tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

                  tableWidth += columnWidths[i];
               }
               // Add a space so that it will not wrap.
               tableWidth += 1;
               // Make the console as wide as the widest table.
               Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());

               // Write out the data.
               foreach (DataRow row in table.Rows)
               {
                  tableRow = new StringBuilder();
                  for (int i = 0; i &amp;lt; table.Columns.Count; i++)
                  {

                     dataString = row[i].ToString();
                     // Truncate output if it is wider than 
                     // the desired column width.
                     if (dataString.Length &amp;gt;= columnWidths[i])
                     {
                        dataString = dataString.Substring(0, columnWidths[i] - 1);
                     }
                     // Add the output to the stringbuilder and pad right to fill
                     // up to the column width.
                     tableRow.Append(dataString.PadRight(columnWidths[i]));
                  }
                  tableRow.Append("\r\n");
                  Console.Write(tableRow.ToString());
               }
               Console.Write("\r\n".PadLeft(tableWidth, '-'));
            }
            Console.ResetColor();
         }
         // A helper function for WriteTablesToConsole.
         private static int GetColumnWidth(DataColumn column)
         {
            // Note: Might not handle byte[]data types well.
            const int MAX_COL_WIDTH = 40;
            int dataWidth = 0;

            // Return 12 for numbers, 30 for dates, and string width for strings.
            switch (column.DataType.UnderlyingSystemType.ToString())
            {
               case "System.Boolean":
               case "System.Byte":
               case "System.Byte[]":
               case "System.Char":
               case "System.Decimal":
               case "System.Double":
               case "System.Int16":
               case "System.Int32":
               case "System.Int64":
               case "System.SByte":
               case "System.Single":
               case "System.UInt16":
               case "System.UInt32":
               case "System.UInt64":
                  dataWidth = 12;
                  break;
               case "System.DateTime":
               case "System.TimeSpan":
                  dataWidth = 30;
                  break;
               case "System.Guid":
                  dataWidth = 37;
                  break;
               case "System.String":
                  // If it has a maxlength, use it.
                  if (column.MaxLength &amp;gt; 0)
                  {
                     dataWidth = column.MaxLength;
                  }
                  else
                  {
                     // Otherwise, use the max col width.
                     dataWidth = MAX_COL_WIDTH;
                  }
                  break;
               default:
                  dataWidth = column.ColumnName.Length;
                  break;
            }
            // Truncate if over the maxlength.
            if (dataWidth &amp;gt; MAX_COL_WIDTH)
            {
               dataWidth = MAX_COL_WIDTH;
            }
            // Always be at least as wide as the colum name.
            return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
         }
         public static void WriteTablesFormated(string Title, System.Data.DataTableCollection theTables)
         {
            WriteSeparator();

            Console.WriteLine(Title);

            CodeSampleUtilities.WriteTablesToConsole(theTables);

         }
         public static void WriteSeparator()
         {
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine("".PadRight(Console.BufferWidth, '='));
            Console.ResetColor();

         }

         // Wait for the job to finish.
         // Outputs job status to the console.
         static public void WaitForQueue(QueueSystemWebSvc.QueueSystem q, Guid jobId)
         {
            QueueSystemWebSvc.JobState jobState;
            const int QUEUE_WAIT_TIME = 1; // One second
            bool jobDone = false;
            string xmlError = string.Empty;
            int wait = 0;

            //Wait for the project to get through the queue.
            // Get the estimated wait time in seconds.
            wait = q.GetJobWaitTime(jobId);

            // Wait for it.
            Console.Write("Waiting on queue. Estimate: {0} seconds.\r\n ", wait);

            // Wait until it is finished.

            do
            {
               // Get the job state.
               jobState = q.GetJobCompletionState(jobId, out xmlError);

               if (jobState == QueueSystemWebSvc.JobState.Success)
               {
                  jobDone = true;
               }
               else
               {
                  if (jobState == QueueSystemWebSvc.JobState.Unknown
                  || jobState == QueueSystemWebSvc.JobState.Failed
                  || jobState == QueueSystemWebSvc.JobState.FailedNotBlocking
                  || jobState == QueueSystemWebSvc.JobState.CorrelationBlocked
                  || jobState == QueueSystemWebSvc.JobState.Canceled)
                  {
                     // If the job failed, error out.
                     throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
                  }
                  else
                  {
                     //Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                     Console.Write("~");
                     Thread.Sleep(QUEUE_WAIT_TIME * 1000);
                  }
               }
            }
            while (!jobDone);
            Console.Write("\r\n");
         }
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="QueueRecallTimesheet">
      <MemberSignature Language="C#" Value="public void QueueRecallTimesheet (Guid jobUID, Guid tsUID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueRecallTimesheet(valuetype System.Guid jobUID, valuetype System.Guid tsUID) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.QueueRecallTimesheet(System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueRecallTimesheet (jobUID As Guid, tsUID As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueRecallTimesheet(Guid jobUID, Guid tsUID);" />
      <MemberSignature Language="F#" Value="member this.QueueRecallTimesheet : Guid * Guid -&gt; unit" Usage="timeSheet.QueueRecallTimesheet (jobUID, tsUID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/QueueRecallTimesheet", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUID" Type="System.Guid" />
        <Parameter Name="tsUID" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="jobUID">The unique ID of the queue job.</param>
        <param name="tsUID">The unique ID of the timesheet.</param>
        <summary>Changes the current state of the specified timesheet to be the previous timesheet state, when the current user was the next approver.</summary>
        <remarks>
          <para>Timesheets that are approved or that are in the process of being approved cannot be recalled. Surrogates cannot recall a timesheet after it has been submitted. </para>
          <para>The <b>QueueRecallTimesheet</b> method is processed asynchronously through the Project Server Timesheet Queue.</para>
          <para>This method submits jobs to the <see cref="T:WebSvcQueueSystem.QueueSystem" /> object. The <see cref="P:WebSvcQueueSystem.QueueStatusDataSet.StatusRow.CorrelationGUID" /> property for the job is equal to the value of the <see cref="P:WebSvcTimeSheet.TimesheetDataSet.HeadersRow.TS_UID" /> property.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>Non-standard</term>
              <description>The current user must be the timesheet owner or manager. </description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following code example determines whether a timesheet exists for the first open period. If it does, the example reads the timesheet. If the timesheet does not exist, the example creates a timesheet with the default timesheet lines that are specified on the server. The example then submits the timesheet and shows the results.</para>
          <para>At the end, the sample recalls the timesheet and deletes it so that it can be created again. If you want to view the timesheet approval in Project Web App, comment out the recall and deletion section.</para>
          <para>Timesheet periods must be created in the server settings for timesheets to work.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Threading;
using System.Web.Services.Protocols;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.QueueSubmitTimesheet
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try{
            #region Setup
            const string PROJECT_SERVER_URI = "http:// &lt;i&gt;ServerName&lt;/i&gt;/&lt;i&gt;ProjectServerName&lt;/i&gt;/"; // &amp;lt;&amp;lt;--Change to be the name of your server running Project Server and the name of your directory.
            const string TIMESHEET_SERVICE_PATH = "_vti_bin/psi/timesheet.asmx";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
            const string ADMIN_SERVICE_PATH = "_vti_bin/psi/admin.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            TimeSheetWebSvc.TimesheetDataSet timeSheetDs;
            Guid jobUid;

            // Set up the services.
            TimeSheetWebSvc.TimeSheet timeSheetSvc = new TimeSheetWebSvc.TimeSheet();
            timeSheetSvc.UseDefaultCredentials = true;
            timeSheetSvc.Url = PROJECT_SERVER_URI + TIMESHEET_SERVICE_PATH;

            ResourceWebSvc.Resource resourceSvc = new ResourceWebSvc.Resource();
            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.UseDefaultCredentials = true;

            AdminWebSvc.Admin adminSvc = new AdminWebSvc.Admin();
            adminSvc.Url = PROJECT_SERVER_URI + ADMIN_SERVICE_PATH;
            adminSvc.UseDefaultCredentials = true;

            QueueSystemWebSvc.QueueSystem q = new QueueSystemWebSvc.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;

            Guid myUid = resourceSvc.GetCurrentUserUid();
            Guid tsUid;

            #endregion
            #region Read Timesheet
            // Time periods must be created by the admin to use timesheets.
            // We are just reading the first open period here.
            AdminWebSvc.TimePeriodDataSet timeperiodDs = adminSvc.ReadPeriods(AdminWebSvc.PeriodState.Open);
            Guid periodUid = timeperiodDs.TimePeriods[0].WPRD_UID;

            // If timesheet already exists, read it.
            // (To delete an existing unsubmitted timesheet,
            //   go to the My Timesheet area of the PWA site.)
            timeSheetDs = timeSheetSvc.ReadTimesheetByPeriod(myUid,periodUid,TimeSheetWebSvc.Navigation.Current);
            #endregion
            #region CreateTimesheet if it doesn't exist, then read it
            // If the timesheet does not exist, create it.
            if(timeSheetDs.Headers.Count&amp;lt;1)
            {
               timeSheetDs = new TimeSheetWebSvc.TimesheetDataSet();
               TimeSheetWebSvc.TimesheetDataSet.HeadersRow headersRow = timeSheetDs.Headers.NewHeadersRow();
               headersRow.RES_UID = myUid;
               headersRow.TS_UID = Guid.NewGuid();
               headersRow.WPRD_UID = periodUid;
               headersRow.TS_CREATOR_RES_UID = myUid;
               headersRow.TS_NAME = "Timesheet ";
               headersRow.TS_COMMENTS = "Random comment text here";
               headersRow.TS_ENTRY_MODE_ENUM = (byte)PSLibrary.TimesheetEnum.EntryMode.Weekly; 
               timeSheetDs.Headers.AddHeadersRow(headersRow);

               // Create the timesheet with the default line types that are specified by the admin.
               timeSheetSvc.CreateTimesheet(timeSheetDs, TimeSheetWebSvc.PreloadType.Default);
               timeSheetDs = timeSheetSvc.ReadTimesheet(headersRow.TS_UID);
            }
            CodeSampleUtilities.WriteTablesFormated("Timesheet after create:" ,timeSheetDs.Tables);
            tsUid=timeSheetDs.Headers[0].TS_UID;
            #endregion
            #region Submit timesheet, if the status is OK
            if ((timeSheetDs.Headers[0].TS_STATUS_ENUM != (byte)PSLibrary.TimesheetEnum.Status.Approved)
               &amp;amp;&amp;amp; timeSheetDs.Headers[0].TS_STATUS_ENUM != (byte)PSLibrary.TimesheetEnum.Status.Submitted
               )
            {
               jobUid = Guid.NewGuid();
               timeSheetSvc.QueueSubmitTimesheet(jobUid,tsUid,myUid,"I created this timesheet and submitted it through my handy-dandy program.");
               CodeSampleUtilities.WaitForQueue(q, jobUid);
            }
            timeSheetDs = timeSheetSvc.ReadTimesheet(tsUid);
            CodeSampleUtilities.WriteTablesFormated("After submission:", timeSheetDs.Tables);
            #endregion
            #region Recall the timesheet and delete it
            // Recall the timesheet and delete it so that we can run the sample again.
            jobUid = Guid.NewGuid();
            timeSheetSvc.QueueRecallTimesheet(jobUid,tsUid);
            CodeSampleUtilities.WaitForQueue(q, jobUid);

            jobUid = Guid.NewGuid();
            timeSheetSvc.QueueDeleteTimesheet(jobUid, tsUid);
            CodeSampleUtilities.WaitForQueue(q, jobUid);
            #endregion
         }
         #region Exception Handlers
         catch (SoapException ex)
         {
            ExceptionHandlers.HandleSoapException(ex);
         }
         catch (WebException ex)
         {
            ExceptionHandlers.HandleWebException(ex);
         }
         catch (Exception ex)
         {
            ExceptionHandlers.HandleException(ex);
         }
         finally
         {
            ExceptionHandlers.ResetConsole();
         }
         #endregion
      }
      class ExceptionHandlers
      {

         public static void HandleSoapException(SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": "
                     + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }

         public static void HandleWebException(WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }

         public static void HandleException(Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }

         public static void ResetConsole()
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }
      class CodeSampleUtilities
      {
         // Write all contents of a table collection to the console.
         public static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
         {
            Console.ForegroundColor = ConsoleColor.DarkGreen;
            foreach (System.Data.DataTable table in theTables)
            {

               int[] columnWidths = new int[table.Columns.Count];
               int tableWidth = 0;
               string dataString;
               Console.WriteLine("Table: " + table.TableName);

               // Write out the column names and get their spacing.
               StringBuilder tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  columnWidths[i] = GetColumnWidth(table.Columns[i]);
                  tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

                  tableWidth += columnWidths[i];
               }
               // Add a space so that it will not wrap.
               tableWidth += 1;
               // Make the console as wide as the widest table.
               Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());

               // Write out the data.
               foreach (DataRow row in table.Rows)
               {
                  tableRow = new StringBuilder();
                  for (int i = 0; i &amp;lt; table.Columns.Count; i++)
                  {

                     dataString = row[i].ToString();
                     // Truncate output if it is wider than 
                     // the desired column width.
                     if (dataString.Length &amp;gt;= columnWidths[i])
                     {
                        dataString = dataString.Substring(0, columnWidths[i] - 1);
                     }
                     // Add the output to the stringbuilder and pad right to fill
                     // up to the column width.
                     tableRow.Append(dataString.PadRight(columnWidths[i]));
                  }
                  tableRow.Append("\r\n");
                  Console.Write(tableRow.ToString());
               }
               Console.Write("\r\n".PadLeft(tableWidth, '-'));
            }
            Console.ResetColor();
         }
         // A helper function for WriteTablesToConsole.
         private static int GetColumnWidth(DataColumn column)
         {
            // Note: Might not handle byte[]data types well.
            const int MAX_COL_WIDTH = 40;
            int dataWidth = 0;

            // Return 12 for numbers, 30 for dates, and string width for strings.
            switch (column.DataType.UnderlyingSystemType.ToString())
            {
               case "System.Boolean":
               case "System.Byte":
               case "System.Byte[]":
               case "System.Char":
               case "System.Decimal":
               case "System.Double":
               case "System.Int16":
               case "System.Int32":
               case "System.Int64":
               case "System.SByte":
               case "System.Single":
               case "System.UInt16":
               case "System.UInt32":
               case "System.UInt64":
                  dataWidth = 12;
                  break;
               case "System.DateTime":
               case "System.TimeSpan":
                  dataWidth = 30;
                  break;
               case "System.Guid":
                  dataWidth = 37;
                  break;
               case "System.String":
                  // If it has a maxlength, use it.
                  if (column.MaxLength &amp;gt; 0)
                  {
                     dataWidth = column.MaxLength;
                  }
                  else
                  {
                     // Otherwise, use the max col width.
                     dataWidth = MAX_COL_WIDTH;
                  }
                  break;
               default:
                  dataWidth = column.ColumnName.Length;
                  break;
            }
            // Truncate if over the maxlength.
            if (dataWidth &amp;gt; MAX_COL_WIDTH)
            {
               dataWidth = MAX_COL_WIDTH;
            }
            // Always be at least as wide as the colum name.
            return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
         }
         public static void WriteTablesFormated(string Title, System.Data.DataTableCollection theTables)
         {
            WriteSeparator();

            Console.WriteLine(Title);

            CodeSampleUtilities.WriteTablesToConsole(theTables);

         }
         public static void WriteSeparator()
         {
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine("".PadRight(Console.BufferWidth, '='));
            Console.ResetColor();

         }

         // Wait for the job to finish.
         // Outputs job status to the console.
         static public void WaitForQueue(QueueSystemWebSvc.QueueSystem q, Guid jobId)
         {
            QueueSystemWebSvc.JobState jobState;
            const int QUEUE_WAIT_TIME = 1; // One second
            bool jobDone = false;
            string xmlError = string.Empty;
            int wait = 0;

            //Wait for the project to get through the queue.
            // Get the estimated wait time in seconds.
            wait = q.GetJobWaitTime(jobId);

            // Wait for it.
            Console.Write("Waiting on queue. Estimate: {0} seconds.\r\n ", wait);

            // Wait until it is finished.

            do
            {
               // Get the job state.
               jobState = q.GetJobCompletionState(jobId, out xmlError);

               if (jobState == QueueSystemWebSvc.JobState.Success)
               {
                  jobDone = true;
               }
               else
               {
                  if (jobState == QueueSystemWebSvc.JobState.Unknown
                  || jobState == QueueSystemWebSvc.JobState.Failed
                  || jobState == QueueSystemWebSvc.JobState.FailedNotBlocking
                  || jobState == QueueSystemWebSvc.JobState.CorrelationBlocked
                  || jobState == QueueSystemWebSvc.JobState.Canceled)
                  {
                     // If the job failed, error out.
                     throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
                  }
                  else
                  {
                     //Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                     Console.Write("~");
                     Thread.Sleep(QUEUE_WAIT_TIME * 1000);
                  }
               }
            }
            while (!jobDone);
            Console.Write("\r\n");
         }
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="QueueReviewTimesheet">
      <MemberSignature Language="C#" Value="public void QueueReviewTimesheet (Guid jobUID, Guid tsUID, Guid nextApproverUID, string comment, WebSvcTimeSheet.Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueReviewTimesheet(valuetype System.Guid jobUID, valuetype System.Guid tsUID, valuetype System.Guid nextApproverUID, string comment, valuetype WebSvcTimeSheet.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.QueueReviewTimesheet(System.Guid,System.Guid,System.Guid,System.String,WebSvcTimeSheet.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueReviewTimesheet(Guid jobUID, Guid tsUID, Guid nextApproverUID, System::String ^ comment, WebSvcTimeSheet::Action action);" />
      <MemberSignature Language="F#" Value="member this.QueueReviewTimesheet : Guid * Guid * Guid * string * WebSvcTimeSheet.Action -&gt; unit" Usage="timeSheet.QueueReviewTimesheet (jobUID, tsUID, nextApproverUID, comment, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/QueueReviewTimesheet", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUID" Type="System.Guid" />
        <Parameter Name="tsUID" Type="System.Guid" />
        <Parameter Name="nextApproverUID" Type="System.Guid" />
        <Parameter Name="comment" Type="System.String" />
        <Parameter Name="action" Type="WebSvcTimeSheet.Action" />
      </Parameters>
      <Docs>
        <param name="jobUID">The unique ID of the queue job.</param>
        <param name="tsUID">The unique ID of the timesheet.</param>
        <param name="nextApproverUID">The unique ID of the next timesheet approver.</param>
        <param name="comment">The message to accompany the action.</param>
        <param name="action">The <see cref="T:WebSvcTimeSheet.Action" /> object that indicates the next state of the timesheet.</param>
        <summary>Changes the state of the specified timesheet from <b>Submittted</b> to <b>Acceptable</b> or <b>Approved</b>, or from <b>Acceptable</b> to <b>Approved</b>, depending on the current user's permissions and the specified action.</summary>
        <remarks>
          <para>The <b>QueueReviewTimesheet</b> method is processed asynchronously through the Project Server Timesheet Queue.</para>
          <para>This method submits jobs to the <see cref="T:WebSvcQueueSystem.QueueSystem" /> object. The <see cref="P:WebSvcQueueSystem.QueueStatusDataSet.StatusRow.CorrelationGUID" /> property for the job is equal to the value for the <see cref="P:WebSvcTimeSheet.TimesheetDataSet.HeadersRow.TS_UID" /> property.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>Non-standard</term>
              <description>The current user is the timesheet manager. </description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.AcceptTimesheets" />
              </term>
              <description>Allows the user to accept timesheets for approval. Applies only if the current user is not the timesheet manager. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following code example creates a blank timesheet, adds an administrative line, prepares the line, saves it to the database, and submits it. The example then reviews the timesheet and approves it.</para>
          <para>
            <b>Note</b>: You might need to delete old timesheets or create periods if there are no open periods without timesheets for the sample resource.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;
namespace Microsoft.SDK.Project.Samples.QueueReviewTimesheet
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            #region Setup
            const string PROJECT_SERVER_URI = "http:// &lt;i&gt;ServerName&lt;/i&gt;/&lt;i&gt;ProjectServerName&lt;/i&gt;/"; // &amp;lt;&amp;lt;--Change to be the name of your server running Project Server and the name of your directory.
            const string TIMESHEET_SERVICE_PATH = "_vti_bin/psi/timesheet.asmx";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
            const string ADMIN_SERVICE_PATH = "_vti_bin/psi/admin.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            TimeSheetWebSvc.TimesheetDataSet timesheetDs;

            // Set up the services.
            TimeSheetWebSvc.TimeSheet timeSheetSvc = new TimeSheetWebSvc.TimeSheet();
            timeSheetSvc.UseDefaultCredentials = true;
            timeSheetSvc.Url = PROJECT_SERVER_URI + TIMESHEET_SERVICE_PATH;
            CodeSample_TimeSheetUtilities timeSheetUtils = new CodeSample_TimeSheetUtilities(timeSheetSvc);

            ResourceWebSvc.Resource resourceSvc = new ResourceWebSvc.Resource();
            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.UseDefaultCredentials = true;
            CodeSample_ResourceUtilities resourceUtils = new CodeSample_ResourceUtilities(resourceSvc);

            AdminWebSvc.Admin adminSvc = new AdminWebSvc.Admin();
            adminSvc.Url = PROJECT_SERVER_URI + ADMIN_SERVICE_PATH;
            adminSvc.UseDefaultCredentials = true;

            QueueSystemWebSvc.QueueSystem q = new QueueSystemWebSvc.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;

            AdminWebSvc.TimesheetLineClassDataSet tsLineClassDs = adminSvc.ReadLineClasses(AdminWebSvc.LineClassType.AllNonProject, AdminWebSvc.LineClassState.Enabled);

            #endregion
            #region Setup a timesheet with no lines
            Guid sampleResourceUid = resourceUtils.EnsureLertchai();

            AdminWebSvc.TimePeriodDataSet timePeriodDs = adminSvc.ReadPeriods(AdminWebSvc.PeriodState.Open);

            Guid periodUid = timeSheetUtils.FindFirstEmptyPeriod(sampleResourceUid, timePeriodDs);
            Guid timeSheetUid = timeSheetUtils.CreateEmptyTimeSheetFor(sampleResourceUid, resourceUtils.myUid, periodUid);
            timesheetDs = timeSheetSvc.ReadTimesheet(timeSheetUid);
 
            TimeSheetWebSvc.TimesheetDataSet.LinesRow line = timesheetDs.Lines.NewLinesRow();
            line.TS_UID = timeSheetUid;
            line.TS_LINE_UID = Guid.NewGuid();
            line.TS_LINE_CLASS_UID = tsLineClassDs.LineClasses[0].TS_LINE_CLASS_UID;
            line.TS_LINE_COMMENT = "Added by code sample.";
            line.TS_LINE_STATUS = (byte)PSLibrary.TimesheetEnum.LineStatus.NotApplicable;
            line.TS_LINE_VALIDATION_TYPE = (byte)PSLibrary.TimesheetEnum.ValidationType.Unverified;
            line.TS_LINE_CACHED_ASSIGN_NAME = tsLineClassDs.LineClasses[0].TS_LINE_CLASS_DESC;
            timesheetDs.Lines.AddLinesRow(line);

            Console.WriteLine("Prepare the timesheet...");
            timeSheetSvc.PrepareTimesheetLine(timeSheetUid, ref timesheetDs, new Guid[] { line.TS_LINE_UID });

            Console.WriteLine("Save the changes to the database...");
            Guid jobUid = Guid.NewGuid();
            timeSheetSvc.QueueUpdateTimesheet(jobUid, timeSheetUid, timesheetDs);
            CodeSampleUtilities.WaitForQueue(q, jobUid);


            jobUid = Guid.NewGuid();
            timeSheetSvc.QueueSubmitTimesheet(jobUid, timeSheetUid,resourceUtils.myUid, "Submitted via code sample");
            CodeSampleUtilities.WaitForQueue(q, jobUid);

            #endregion
            #region Review the timesheet
            Console.WriteLine("Review and approve the timesheet");
            jobUid = Guid.NewGuid();
            timeSheetSvc.QueueReviewTimesheet(jobUid, timeSheetUid, Guid.Empty, "Approved via code sample", TimeSheetWebSvc.Action.Approve);
            CodeSampleUtilities.WaitForQueue(q, jobUid);

            timesheetDs = timeSheetSvc.ReadTimesheet(timeSheetUid);
            CodeSampleUtilities.WriteTablesFormated("After approval:", timesheetDs.Tables);

            #endregion
         }
         catch (SoapException ex)
         {
            ExceptionHandlers.HandleSoapException(ex);
         }
         catch (WebException ex)
         {
            ExceptionHandlers.HandleWebException(ex);
         }
         catch (Exception ex)
         {
            ExceptionHandlers.HandleException(ex);
         }
         finally
         {
            ExceptionHandlers.ResetConsole();
         }
      }
   }
   class ExceptionHandlers
   {
      public static void HandleSoapException(SoapException ex)
      {
         PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
         PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
         string errMess = "==============================\r\nError: \r\n";
         for (int i = 0; i &amp;lt; errors.Length; i++)
         {
            errMess += "\n" + ex.Message.ToString() + "\r\n";
            errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
            errMess += errors[i].ErrId.ToString() + "\n";

            for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
            {
               errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": "
                  + errors[i].ErrorAttributes[j];
            }
            errMess += "\r\n".PadRight(30, '=');
         }
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine(errMess);
      }

      public static void HandleWebException(WebException ex)
      {
         string errMess = ex.Message.ToString() +
            "\n\nLog on, or check the Project Server Queuing Service";
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine("Error: " + errMess);
      }

      public static void HandleException(Exception ex)
      {
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine("Error: " + ex.Message);
      }

      public static void ResetConsole()
      {
         Console.ResetColor();
         Console.WriteLine("\r\n\r\nPress any key...");
         Console.ReadKey();
      }
   }
   class CodeSampleUtilities
   {
      // Write all contents of a table collection to the console.
      public static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing.
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // Add a space so it will not wrap.
            tableWidth += 1;
            // Make the console as wide as the widest table.
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data.
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {

                  dataString = row[i].ToString();
                  // Truncate output if it is wider than 
                  // the desired column width.
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // Add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // A helper function for WriteTablesToConsole.
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: Might not handle byte[]data types well.
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         // Return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it.
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise, use the max col width.
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // Truncate if over the maxlength.
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // Always be at least as wide as the colum name.
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
      public static void WriteTablesFormated(string Title, System.Data.DataTableCollection theTables)
      {
         WriteSeparator();
         Console.WriteLine(Title);

         CodeSampleUtilities.WriteTablesToConsole(theTables);

      }
      public static void WriteSeparator()
      {
         Console.ForegroundColor = ConsoleColor.DarkYellow;
         Console.WriteLine("".PadRight(Console.BufferWidth, '='));
         Console.ResetColor();

      }

      // Wait for the job to finish.
      // Outputs job status to the console.
      static public void WaitForQueue(QueueSystemWebSvc.QueueSystem q, Guid jobId)
      {
         QueueSystemWebSvc.JobState jobState;
         const int QUEUE_WAIT_TIME = 1; // One second
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         //Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Console.Write("Waiting on queue. Estimate: {0} seconds.\r\n ", wait);

         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == QueueSystemWebSvc.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == QueueSystemWebSvc.JobState.Unknown
               || jobState == QueueSystemWebSvc.JobState.Failed
               || jobState == QueueSystemWebSvc.JobState.FailedNotBlocking
               || jobState == QueueSystemWebSvc.JobState.CorrelationBlocked
               || jobState == QueueSystemWebSvc.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  //Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                  Console.Write("~");
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
         Console.Write("\r\n");
      }
   }
   class CodeSample_TimeSheetUtilities
   {
      TimeSheetWebSvc.TimeSheet timeSheetSvc;

      public CodeSample_TimeSheetUtilities(TimeSheetWebSvc.TimeSheet theTimeSheetSvc)
      {
         timeSheetSvc = theTimeSheetSvc;
      }
      public Guid CreateEmptyTimeSheetFor(Guid resourceGuid, Guid mgrUid, Guid periodUid)
      {

         TimeSheetWebSvc.TimesheetDataSet timesheetDs = new TimeSheetWebSvc.TimesheetDataSet();
         TimeSheetWebSvc.TimesheetDataSet.HeadersRow headersRow = timesheetDs.Headers.NewHeadersRow();
         headersRow.RES_UID = resourceGuid;
         headersRow.TS_UID = Guid.NewGuid();
         headersRow.WPRD_UID = periodUid;
         headersRow.TS_CREATOR_RES_UID = mgrUid;
         headersRow.TS_NAME = "Timesheet ";
         headersRow.TS_COMMENTS = "Timesheet for code sample";
         headersRow.TS_ENTRY_MODE_ENUM = (byte)PSLibrary.TimesheetEnum.EntryMode.Weekly;
         timesheetDs.Headers.AddHeadersRow(headersRow);

         // Create the timesheet with the default line types that are specified by the admin.
         timeSheetSvc.CreateTimesheet(timesheetDs, TimeSheetWebSvc.PreloadType.None);

         return headersRow.TS_UID;
      }

      public Guid FindFirstEmptyPeriod(Guid resUid, AdminWebSvc.TimePeriodDataSet timePeriodDs)
      {
         TimeSheetWebSvc.TimesheetDataSet timeSheetDs;

         for (int i = 0; i &amp;lt; timePeriodDs.TimePeriods.Count; i++)
         {
            timeSheetDs = timeSheetSvc.ReadTimesheetByPeriod(resUid, timePeriodDs.TimePeriods[i].WPRD_UID, TimeSheetWebSvc.Navigation.Current);
            if (timeSheetDs.Headers.Count == 0)
            {
               return timePeriodDs.TimePeriods[i].WPRD_UID;
            }
         }
         return Guid.Empty;
      }
   }
   class CodeSample_ResourceUtilities
   {

      private ResourceWebSvc.Resource m_resourceSvc;
      private Guid m_MyUid;
      private Guid sampleResource = Guid.Empty;

      public CodeSample_ResourceUtilities(ResourceWebSvc.Resource theResourceSvc)
      {
         m_resourceSvc = theResourceSvc;
         m_MyUid = resourceSvc.GetCurrentUserUid();
      }

      public Guid myUid
      {
         get { return m_MyUid; }
      }

      public ResourceWebSvc.Resource resourceSvc
      {
         get { return m_resourceSvc; }
      }

      public Guid EnsureLertchai()
      {
         return EnsureSampleResource("Lertchai Treetawatchaiwong", "LT");
      }

      public Guid EnsureSampleResource(string name, string inits)
      {
         Guid resGuid = GetResourceGuid(name);
         if (resGuid == Guid.Empty)
         {
            resGuid = this.CreateResource(name, inits, myUid);
         }
         return resGuid;
      }

      public Guid GetResourceGuid(string resourceName)
      {
         ResourceWebSvc.ResourceDataSet resourceDs = new ResourceWebSvc.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, resourceName);
         resourceFilter.Criteria = existingResource;
         resourceDs = resourceSvc.ReadResources(resourceFilter.GetXml(), false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs.Resources[0].RES_UID;
         }
         else
         {
            return Guid.Empty;
         }
      }

      private Guid CreateResource(string resourceName, string initials, Guid timesheetMgr)
      {
         ResourceWebSvc.ResourceDataSet resourceDs = new ResourceWebSvc.ResourceDataSet();
         ResourceWebSvc.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
         resourceRow.RES_UID = Guid.NewGuid();
         resourceRow.RES_NAME = resourceName;
         resourceRow.RES_INITIALS = initials;
         resourceRow.RES_TYPE = (int)PSLibrary.Resource.Type.WorkResource;
         resourceRow.RES_TIMESHEET_MGR_UID = timesheetMgr;
         resourceDs.Resources.AddResourcesRow(resourceRow);
         resourceSvc.CreateResources(resourceDs, false, true);
         return resourceRow.RES_UID;
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="QueueSubmitTimesheet">
      <MemberSignature Language="C#" Value="public void QueueSubmitTimesheet (Guid jobUID, Guid tsUID, Guid approverUID, string comment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueSubmitTimesheet(valuetype System.Guid jobUID, valuetype System.Guid tsUID, valuetype System.Guid approverUID, string comment) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.QueueSubmitTimesheet(System.Guid,System.Guid,System.Guid,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueSubmitTimesheet (jobUID As Guid, tsUID As Guid, approverUID As Guid, comment As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueSubmitTimesheet(Guid jobUID, Guid tsUID, Guid approverUID, System::String ^ comment);" />
      <MemberSignature Language="F#" Value="member this.QueueSubmitTimesheet : Guid * Guid * Guid * string -&gt; unit" Usage="timeSheet.QueueSubmitTimesheet (jobUID, tsUID, approverUID, comment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/QueueSubmitTimesheet", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUID" Type="System.Guid" />
        <Parameter Name="tsUID" Type="System.Guid" />
        <Parameter Name="approverUID" Type="System.Guid" />
        <Parameter Name="comment" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="jobUID">The unique identifier of the queue job.</param>
        <param name="tsUID">The unique identifier of the timesheet.</param>
        <param name="approverUID">The unique identifier of the timesheet approver.</param>
        <param name="comment">The message to accompany the action.</param>
        <summary>Changes the state of the specified timesheet from <b>In Progress</b> to <b>Submitted</b> via the Timesheet Queue.</summary>
        <remarks>
          <para>The <b>QueueSubmitTimesheet</b> method is processed asynchronously through the Project Server Timesheet Queue.</para>
          <para>This method submits jobs to the <see cref="T:WebSvcQueueSystem.QueueSystem" /> object. The <see cref="P:WebSvcQueueSystem.QueueStatusDataSet.StatusRow.CorrelationGUID" /> property for the job is equal to the value of the <see cref="P:WebSvcTimeSheet.TimesheetDataSet.HeadersRow.TS_UID" /> property.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>Non-standard</term>
              <description>The current user is the timesheet owner.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following code example determines whether a timesheet exists for the first open period. If it does, the example reads the timesheet. If the timesheet does not exist, the example creates a timesheet with the default timesheet lines that are specified on the server. The sample then submits the timesheet and shows the results.</para>
          <para>At the end, the example recalls the timesheet and deletes it so that it can be created again. If you want to view the timesheet approval in Project Web App, comment out the recall and deletion section.</para>
          <para>Timesheet periods must be created in the server settings for timesheets to work.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Threading;
using System.Web.Services.Protocols;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.QueueSubmitTimesheet
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try{
            #region Setup
            const string PROJECT_SERVER_URI = "http:// &lt;i&gt;ServerName&lt;/i&gt;/&lt;i&gt;ProjectServerName&lt;/i&gt;/"; // &amp;lt;&amp;lt;--Change to be the name of your server running Project Server and the name of your directory.
            const string TIMESHEET_SERVICE_PATH = "_vti_bin/psi/timesheet.asmx";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
            const string ADMIN_SERVICE_PATH = "_vti_bin/psi/admin.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            TimeSheetWebSvc.TimesheetDataSet timeSheetDs;
            Guid jobUid;

            // Set up the services.
            TimeSheetWebSvc.TimeSheet timeSheetSvc = new TimeSheetWebSvc.TimeSheet();
            timeSheetSvc.UseDefaultCredentials = true;
            timeSheetSvc.Url = PROJECT_SERVER_URI + TIMESHEET_SERVICE_PATH;

            ResourceWebSvc.Resource resourceSvc = new ResourceWebSvc.Resource();
            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.UseDefaultCredentials = true;

            AdminWebSvc.Admin adminSvc = new AdminWebSvc.Admin();
            adminSvc.Url = PROJECT_SERVER_URI + ADMIN_SERVICE_PATH;
            adminSvc.UseDefaultCredentials = true;

            QueueSystemWebSvc.QueueSystem q = new QueueSystemWebSvc.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;

            Guid myUid = resourceSvc.GetCurrentUserUid();
            Guid tsUid;

            #endregion
            #region Read Timesheet
            // Time periods must be created by the admin to use timesheets.
            // We are just reading the first open period here.
            AdminWebSvc.TimePeriodDataSet timeperiodDs = adminSvc.ReadPeriods(AdminWebSvc.PeriodState.Open);
            Guid periodUid = timeperiodDs.TimePeriods[0].WPRD_UID;

            // If timesheet already exists, read it.
            // (To delete an existing unsubmitted timesheet,
            //   go to the My Timesheet area of the Project Web App site.)
            timeSheetDs = timeSheetSvc.ReadTimesheetByPeriod(myUid,periodUid,TimeSheetWebSvc.Navigation.Current);
            #endregion
            #region CreateTimesheet if it doesn't exist, then read it
            // If the timesheet does not exist, create it.
            if(timeSheetDs.Headers.Count&amp;lt;1)
            {
               timeSheetDs = new TimeSheetWebSvc.TimesheetDataSet();
               TimeSheetWebSvc.TimesheetDataSet.HeadersRow headersRow = timeSheetDs.Headers.NewHeadersRow();
               headersRow.RES_UID = myUid;
               headersRow.TS_UID = Guid.NewGuid();
               headersRow.WPRD_UID = periodUid;
               headersRow.TS_CREATOR_RES_UID = myUid;
               headersRow.TS_NAME = "Timesheet ";
               headersRow.TS_COMMENTS = "Random comment text here";
               headersRow.TS_ENTRY_MODE_ENUM = (byte)PSLibrary.TimesheetEnum.EntryMode.Weekly; 
               timeSheetDs.Headers.AddHeadersRow(headersRow);

               // Create the timesheet with the default line types that are specified by the admin.
               timeSheetSvc.CreateTimesheet(timeSheetDs, TimeSheetWebSvc.PreloadType.Default);
               timeSheetDs = timeSheetSvc.ReadTimesheet(headersRow.TS_UID);
            }
            CodeSampleUtilities.WriteTablesFormated("Timesheet after create:" ,timeSheetDs.Tables);
            tsUid=timeSheetDs.Headers[0].TS_UID;
            #endregion
            #region Submit timesheet, if the status is OK
            if ((timeSheetDs.Headers[0].TS_STATUS_ENUM != (byte)PSLibrary.TimesheetEnum.Status.Approved)
               &amp;amp;&amp;amp; timeSheetDs.Headers[0].TS_STATUS_ENUM != (byte)PSLibrary.TimesheetEnum.Status.Submitted
               )
            {
               jobUid = Guid.NewGuid();
               timeSheetSvc.QueueSubmitTimesheet(jobUid,tsUid,myUid,"I created this timesheet and submitted it through my handy-dandy program.");
               CodeSampleUtilities.WaitForQueue(q, jobUid);
            }
            timeSheetDs = timeSheetSvc.ReadTimesheet(tsUid);
            CodeSampleUtilities.WriteTablesFormated("After submission:", timeSheetDs.Tables);
            #endregion
            #region Recall the timesheet and delete it
            // Recall the timesheet and delete it so that we can run the sample again.
            jobUid = Guid.NewGuid();
            timeSheetSvc.QueueRecallTimesheet(jobUid,tsUid);
            CodeSampleUtilities.WaitForQueue(q, jobUid);

            jobUid = Guid.NewGuid();
            timeSheetSvc.QueueDeleteTimesheet(jobUid, tsUid);
            CodeSampleUtilities.WaitForQueue(q, jobUid);
            #endregion
         }
         #region Exception Handlers
         catch (SoapException ex)
         {
            ExceptionHandlers.HandleSoapException(ex);
         }
         catch (WebException ex)
         {
            ExceptionHandlers.HandleWebException(ex);
         }
         catch (Exception ex)
         {
            ExceptionHandlers.HandleException(ex);
         }
         finally
         {
            ExceptionHandlers.ResetConsole();
         }
         #endregion
      }
      class ExceptionHandlers
      {

         public static void HandleSoapException(SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": "
                     + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }

         public static void HandleWebException(WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }

         public static void HandleException(Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }

         public static void ResetConsole()
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }
      class CodeSampleUtilities
      {
         // Write all contents of a table collection to the console.
         public static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
         {
            Console.ForegroundColor = ConsoleColor.DarkGreen;
            foreach (System.Data.DataTable table in theTables)
            {

               int[] columnWidths = new int[table.Columns.Count];
               int tableWidth = 0;
               string dataString;
               Console.WriteLine("Table: " + table.TableName);

               // Write out the column names and get their spacing.
               StringBuilder tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  columnWidths[i] = GetColumnWidth(table.Columns[i]);
                  tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

                  tableWidth += columnWidths[i];
               }
               // Add a space so that it will not wrap.
               tableWidth += 1;
               // Make the console as wide as the widest table.
               Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());

               // Write out the data.
               foreach (DataRow row in table.Rows)
               {
                  tableRow = new StringBuilder();
                  for (int i = 0; i &amp;lt; table.Columns.Count; i++)
                  {

                     dataString = row[i].ToString();
                     // Truncate output if it is wider than 
                     // the desired column width.
                     if (dataString.Length &amp;gt;= columnWidths[i])
                     {
                        dataString = dataString.Substring(0, columnWidths[i] - 1);
                     }
                     // Add the output to the stringbuilder and pad right to fill
                     // up to the column width.
                     tableRow.Append(dataString.PadRight(columnWidths[i]));
                  }
                  tableRow.Append("\r\n");
                  Console.Write(tableRow.ToString());
               }
               Console.Write("\r\n".PadLeft(tableWidth, '-'));
            }
            Console.ResetColor();
         }
         // A helper function for WriteTablesToConsole.
         private static int GetColumnWidth(DataColumn column)
         {
            // Note: Might not handle byte[]data types well.
            const int MAX_COL_WIDTH = 40;
            int dataWidth = 0;

            // Return 12 for numbers, 30 for dates, and string width for strings.
            switch (column.DataType.UnderlyingSystemType.ToString())
            {
               case "System.Boolean":
               case "System.Byte":
               case "System.Byte[]":
               case "System.Char":
               case "System.Decimal":
               case "System.Double":
               case "System.Int16":
               case "System.Int32":
               case "System.Int64":
               case "System.SByte":
               case "System.Single":
               case "System.UInt16":
               case "System.UInt32":
               case "System.UInt64":
                  dataWidth = 12;
                  break;
               case "System.DateTime":
               case "System.TimeSpan":
                  dataWidth = 30;
                  break;
               case "System.Guid":
                  dataWidth = 37;
                  break;
               case "System.String":
                  // If it has a maxlength, use it.
                  if (column.MaxLength &amp;gt; 0)
                  {
                     dataWidth = column.MaxLength;
                  }
                  else
                  {
                     // Otherwise, use the max col width.
                     dataWidth = MAX_COL_WIDTH;
                  }
                  break;
               default:
                  dataWidth = column.ColumnName.Length;
                  break;
            }
            // Truncate if over the maxlength.
            if (dataWidth &amp;gt; MAX_COL_WIDTH)
            {
               dataWidth = MAX_COL_WIDTH;
            }
            // Always be at least as wide as the colum name.
            return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
         }
         public static void WriteTablesFormated(string Title, System.Data.DataTableCollection theTables)
         {
            WriteSeparator();

            Console.WriteLine(Title);

            CodeSampleUtilities.WriteTablesToConsole(theTables);

         }
         public static void WriteSeparator()
         {
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine("".PadRight(Console.BufferWidth, '='));
            Console.ResetColor();

         }

         // Wait for the job to finish.
         // Outputs job status to the console.
         static public void WaitForQueue(QueueSystemWebSvc.QueueSystem q, Guid jobId)
         {
            QueueSystemWebSvc.JobState jobState;
            const int QUEUE_WAIT_TIME = 1; // One second
            bool jobDone = false;
            string xmlError = string.Empty;
            int wait = 0;

            //Wait for the project to get through the queue.
            // Get the estimated wait time in seconds.
            wait = q.GetJobWaitTime(jobId);

            // Wait for it.
            Console.Write("Waiting on queue. Estimate: {0} seconds.\r\n ", wait);

            // Wait until it is finished.

            do
            {
               // Get the job state.
               jobState = q.GetJobCompletionState(jobId, out xmlError);

               if (jobState == QueueSystemWebSvc.JobState.Success)
               {
                  jobDone = true;
               }
               else
               {
                  if (jobState == QueueSystemWebSvc.JobState.Unknown
                  || jobState == QueueSystemWebSvc.JobState.Failed
                  || jobState == QueueSystemWebSvc.JobState.FailedNotBlocking
                  || jobState == QueueSystemWebSvc.JobState.CorrelationBlocked
                  || jobState == QueueSystemWebSvc.JobState.Canceled)
                  {
                     // If the job failed, error out.
                     throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
                  }
                  else
                  {
                     //Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                     Console.Write("~");
                     Thread.Sleep(QUEUE_WAIT_TIME * 1000);
                  }
               }
            }
            while (!jobDone);
            Console.Write("\r\n");
         }
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="QueueUpdateTimesheet">
      <MemberSignature Language="C#" Value="public void QueueUpdateTimesheet (Guid jobUID, Guid tsUID, WebSvcTimeSheet.TimesheetDataSet dsDelta);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueUpdateTimesheet(valuetype System.Guid jobUID, valuetype System.Guid tsUID, class WebSvcTimeSheet.TimesheetDataSet dsDelta) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.QueueUpdateTimesheet(System.Guid,System.Guid,WebSvcTimeSheet.TimesheetDataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueueUpdateTimesheet (jobUID As Guid, tsUID As Guid, dsDelta As TimesheetDataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueueUpdateTimesheet(Guid jobUID, Guid tsUID, WebSvcTimeSheet::TimesheetDataSet ^ dsDelta);" />
      <MemberSignature Language="F#" Value="member this.QueueUpdateTimesheet : Guid * Guid * WebSvcTimeSheet.TimesheetDataSet -&gt; unit" Usage="timeSheet.QueueUpdateTimesheet (jobUID, tsUID, dsDelta)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/QueueUpdateTimesheet", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobUID" Type="System.Guid" />
        <Parameter Name="tsUID" Type="System.Guid" />
        <Parameter Name="dsDelta" Type="WebSvcTimeSheet.TimesheetDataSet" />
      </Parameters>
      <Docs>
        <param name="jobUID">The unique ID of the queue job.</param>
        <param name="tsUID">The unique ID of the timesheet.</param>
        <param name="dsDelta">A populated <see cref="T:WebSvcTimeSheet.TimesheetDataSet" />.</param>
        <summary>Saves the specified timesheet data to the Published database.</summary>
        <remarks>
          <para>The <b>QueueUpdateTimesheet</b> method is processed asynchronously through the Project Server Timesheet Queue.</para>
          <para>This method submits jobs to the <see cref="T:WebSvcQueueSystem.QueueSystem" /> object. The <see cref="P:WebSvcQueueSystem.QueueStatusDataSet.StatusRow.CorrelationGUID" /> property for the job is equal to the value of the <see cref="P:WebSvcTimeSheet.TimesheetDataSet.HeadersRow.TS_UID" /> property.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>Non-standard</term>
              <description>The current user is the timesheet owner.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following code example creates a blank timesheet, adds an administrative line, prepares the line, and saves it to the database.</para>
          <para>
            <b>Note</b>: You might need to delete old timesheets or create periods if there are no open periods without timesheets for the sample resource.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;
namespace Microsoft.SDK.Project.Samples.PrepareTimesheetLine
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            #region Setup
            const string PROJECT_SERVER_URI = "http:// &lt;i&gt;ServerName&lt;/i&gt;/&lt;i&gt;ProjectServerName&lt;/i&gt;/"; // &amp;lt;&amp;lt;--Change to be the name of your server running Project Server and the name of your directory.
            const string TIMESHEET_SERVICE_PATH = "_vti_bin/psi/timesheet.asmx";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
            const string ADMIN_SERVICE_PATH = "_vti_bin/psi/admin.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            TimeSheetWebSvc.TimesheetDataSet timesheetDs;

            // Set up the services.
            TimeSheetWebSvc.TimeSheet timeSheetSvc = new TimeSheetWebSvc.TimeSheet();
            timeSheetSvc.UseDefaultCredentials = true;
            timeSheetSvc.Url = PROJECT_SERVER_URI + TIMESHEET_SERVICE_PATH;
            CodeSample_TimeSheetUtilities timeSheetUtils = new CodeSample_TimeSheetUtilities(timeSheetSvc);

            ResourceWebSvc.Resource resourceSvc = new ResourceWebSvc.Resource();
            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.UseDefaultCredentials = true;
            CodeSample_ResourceUtilities resourceUtils = new CodeSample_ResourceUtilities(resourceSvc);

            AdminWebSvc.Admin adminSvc = new AdminWebSvc.Admin();
            adminSvc.Url = PROJECT_SERVER_URI + ADMIN_SERVICE_PATH;
            adminSvc.UseDefaultCredentials = true;

            QueueSystemWebSvc.QueueSystem q = new QueueSystemWebSvc.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;

            AdminWebSvc.TimesheetLineClassDataSet tsLineClassDs = adminSvc.ReadLineClasses(AdminWebSvc.LineClassType.AllNonProject, AdminWebSvc.LineClassState.Enabled);

            #endregion
            #region Setup a timesheet with no lines
            Guid sampleResourceUid = resourceUtils.EnsureLertchai();

            AdminWebSvc.TimePeriodDataSet timePeriodDs = adminSvc.ReadPeriods(AdminWebSvc.PeriodState.Open);

            Guid periodUid = timeSheetUtils.FindFirstEmptyPeriod(sampleResourceUid, timePeriodDs);
            Guid timeSheetUid = timeSheetUtils.CreateEmptyTimeSheetFor(sampleResourceUid, resourceUtils.myUid, periodUid);
            timesheetDs = timeSheetSvc.ReadTimesheet(timeSheetUid);
            #endregion
            #region Create a line and append it to the timesheet, then prepare the line and display the results


            TimeSheetWebSvc.TimesheetDataSet.LinesRow line = timesheetDs.Lines.NewLinesRow();
            line.TS_UID = timeSheetUid;
            line.TS_LINE_UID = Guid.NewGuid();
            line.TS_LINE_CLASS_UID = tsLineClassDs.LineClasses[0].TS_LINE_CLASS_UID;
            line.TS_LINE_COMMENT = "Added by code sample.";
            line.TS_LINE_STATUS = (byte)PSLibrary.TimesheetEnum.LineStatus.NotApplicable;
            line.TS_LINE_VALIDATION_TYPE = (byte)PSLibrary.TimesheetEnum.ValidationType.Unverified;
            line.TS_LINE_CACHED_ASSIGN_NAME = tsLineClassDs.LineClasses[0].TS_LINE_CLASS_DESC;
            timesheetDs.Lines.AddLinesRow(line);

            Console.WriteLine("Prepare the timesheet...");
            timeSheetSvc.PrepareTimesheetLine(timeSheetUid, ref timesheetDs, new Guid[] { line.TS_LINE_UID });

            Console.WriteLine("Save the changes to the database...");
            Guid jobUid = Guid.NewGuid();
            timeSheetSvc.QueueUpdateTimesheet(jobUid, timeSheetUid, timesheetDs);
            CodeSampleUtilities.WaitForQueue(q, jobUid);

            timesheetDs = timeSheetSvc.ReadTimesheet(timeSheetUid);
            CodeSampleUtilities.WriteTablesFormated("After prepare line", timesheetDs.Tables);

            #endregion
         }
         catch (SoapException ex)
         {
            ExceptionHandlers.HandleSoapException(ex);
         }
         catch (WebException ex)
         {
            ExceptionHandlers.HandleWebException(ex);
         }
         catch (Exception ex)
         {
            ExceptionHandlers.HandleException(ex);
         }
         finally
         {
            ExceptionHandlers.ResetConsole();
         }
      }
   }
   class ExceptionHandlers
   {
      public static void HandleSoapException(SoapException ex)
      {
         PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
         PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
         string errMess = "==============================\r\nError: \r\n";
         for (int i = 0; i &amp;lt; errors.Length; i++)
         {
            errMess += "\n" + ex.Message.ToString() + "\r\n";
            errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
            errMess += errors[i].ErrId.ToString() + "\n";

            for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
            {
               errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": "
                  + errors[i].ErrorAttributes[j];
            }
            errMess += "\r\n".PadRight(30, '=');
         }
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine(errMess);
      }

      public static void HandleWebException(WebException ex)
      {
         string errMess = ex.Message.ToString() +
            "\n\nLog on, or check the Project Server Queuing Service";
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine("Error: " + errMess);
      }

      public static void HandleException(Exception ex)
      {
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine("Error: " + ex.Message);
      }

      public static void ResetConsole()
      {
         Console.ResetColor();
         Console.WriteLine("\r\n\r\nPress any key...");
         Console.ReadKey();
      }
   }
   class CodeSampleUtilities
   {
      // Write all contents of a table collection to the console.
      public static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing.
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // Add a space so that it will not wrap.
            tableWidth += 1;
            // Make the console as wide as the widest table.
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data.
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {

                  dataString = row[i].ToString();
                  // Truncate output if it is wider than 
                  // the desired column width.
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // Add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // Helper function for WriteTablesToConsole.
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: Might not handle byte[]data types well.
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         // Return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it.
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise, use the max col width.
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // Truncate, if over the maxlength.
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // Always be at least as wide as the colum name.
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
      public static void WriteTablesFormated(string Title, System.Data.DataTableCollection theTables)
      {
         WriteSeparator();
         Console.WriteLine(Title);

         CodeSampleUtilities.WriteTablesToConsole(theTables);

      }
      public static void WriteSeparator()
      {
         Console.ForegroundColor = ConsoleColor.DarkYellow;
         Console.WriteLine("".PadRight(Console.BufferWidth, '='));
         Console.ResetColor();

      }

      // Wait for the job to finish.
      // Outputs job status to the console.
      static public void WaitForQueue(QueueSystemWebSvc.QueueSystem q, Guid jobId)
      {
         QueueSystemWebSvc.JobState jobState;
         const int QUEUE_WAIT_TIME = 1; // One second
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         //Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Console.Write("Waiting on queue. Estimate: {0} seconds.\r\n ", wait);

         // - Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == QueueSystemWebSvc.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == QueueSystemWebSvc.JobState.Unknown
               || jobState == QueueSystemWebSvc.JobState.Failed
               || jobState == QueueSystemWebSvc.JobState.FailedNotBlocking
               || jobState == QueueSystemWebSvc.JobState.CorrelationBlocked
               || jobState == QueueSystemWebSvc.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  //Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                  Console.Write("~");
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
         Console.Write("\r\n");
      }
   }
   class CodeSample_TimeSheetUtilities
   {
      TimeSheetWebSvc.TimeSheet timeSheetSvc;

      public CodeSample_TimeSheetUtilities(TimeSheetWebSvc.TimeSheet theTimeSheetSvc)
      {
         timeSheetSvc = theTimeSheetSvc;
      }
      public Guid CreateEmptyTimeSheetFor(Guid resourceGuid, Guid mgrUid, Guid periodUid)
      {

         TimeSheetWebSvc.TimesheetDataSet timesheetDs = new TimeSheetWebSvc.TimesheetDataSet();
         TimeSheetWebSvc.TimesheetDataSet.HeadersRow headersRow = timesheetDs.Headers.NewHeadersRow();
         headersRow.RES_UID = resourceGuid;
         headersRow.TS_UID = Guid.NewGuid();
         headersRow.WPRD_UID = periodUid;
         headersRow.TS_CREATOR_RES_UID = mgrUid;
         headersRow.TS_NAME = "Timesheet ";
         headersRow.TS_COMMENTS = "Timesheet for code sample";
         headersRow.TS_ENTRY_MODE_ENUM = (byte)PSLibrary.TimesheetEnum.EntryMode.Weekly;
         timesheetDs.Headers.AddHeadersRow(headersRow);

         // Create the timesheet with the default line types that are specified by the admin.
         timeSheetSvc.CreateTimesheet(timesheetDs, TimeSheetWebSvc.PreloadType.None);

         return headersRow.TS_UID;
      }

      public Guid FindFirstEmptyPeriod(Guid resUid, AdminWebSvc.TimePeriodDataSet timePeriodDs)
      {
         TimeSheetWebSvc.TimesheetDataSet timeSheetDs;

         for (int i = 0; i &amp;lt; timePeriodDs.TimePeriods.Count; i++)
         {
            timeSheetDs = timeSheetSvc.ReadTimesheetByPeriod(resUid, timePeriodDs.TimePeriods[i].WPRD_UID, TimeSheetWebSvc.Navigation.Current);
            if (timeSheetDs.Headers.Count == 0)
            {
               return timePeriodDs.TimePeriods[i].WPRD_UID;
            }
         }
         return Guid.Empty;
      }
   }
   class CodeSample_ResourceUtilities
   {

      private ResourceWebSvc.Resource m_resourceSvc;
      private Guid m_MyUid;
      private Guid sampleResource = Guid.Empty;

      public CodeSample_ResourceUtilities(ResourceWebSvc.Resource theResourceSvc)
      {
         m_resourceSvc = theResourceSvc;
         m_MyUid = resourceSvc.GetCurrentUserUid();
      }

      public Guid myUid
      {
         get { return m_MyUid; }
      }

      public ResourceWebSvc.Resource resourceSvc
      {
         get { return m_resourceSvc; }
      }

      public Guid EnsureLertchai()
      {
         return EnsureSampleResource("Lertchai Treetawatchaiwong", "LT");
      }

      public Guid EnsureSampleResource(string name, string inits)
      {
         Guid resGuid = GetResourceGuid(name);
         if (resGuid == Guid.Empty)
         {
            resGuid = this.CreateResource(name, inits, myUid);
         }
         return resGuid;
      }

      public Guid GetResourceGuid(string resourceName)
      {
         ResourceWebSvc.ResourceDataSet resourceDs = new ResourceWebSvc.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, resourceName);
         resourceFilter.Criteria = existingResource;
         resourceDs = resourceSvc.ReadResources(resourceFilter.GetXml(), false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs.Resources[0].RES_UID;
         }
         else
         {
            return Guid.Empty;
         }
      }

      private Guid CreateResource(string resourceName, string initials, Guid timesheetMgr)
      {
         ResourceWebSvc.ResourceDataSet resourceDs = new ResourceWebSvc.ResourceDataSet();
         ResourceWebSvc.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
         resourceRow.RES_UID = Guid.NewGuid();
         resourceRow.RES_NAME = resourceName;
         resourceRow.RES_INITIALS = initials;
         resourceRow.RES_TYPE = (int)PSLibrary.Resource.Type.WorkResource;
         resourceRow.RES_TIMESHEET_MGR_UID = timesheetMgr;
         resourceDs.Resources.AddResourcesRow(resourceRow);
         resourceSvc.CreateResources(resourceDs, false, true);
         return resourceRow.RES_UID;
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadLateTimesheets">
      <MemberSignature Language="C#" Value="public WebSvcTimeSheet.TimesheetListDataSet ReadLateTimesheets (DateTime date);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcTimeSheet.TimesheetListDataSet ReadLateTimesheets(valuetype System.DateTime date) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.ReadLateTimesheets(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLateTimesheets (date As DateTime) As TimesheetListDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcTimeSheet::TimesheetListDataSet ^ ReadLateTimesheets(DateTime date);" />
      <MemberSignature Language="F#" Value="member this.ReadLateTimesheets : DateTime -&gt; WebSvcTimeSheet.TimesheetListDataSet" Usage="timeSheet.ReadLateTimesheets date" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/ReadLateTimesheets", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcTimeSheet.TimesheetListDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="date" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="date">The time period cutoff date and time. Time periods before this date and time are included.</param>
        <summary>Gets the set of timesheets that are considered late for the current user.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The current resource must have a manager for the timesheets to appear in this method.</para>
          <para>This method uses the <see cref="T:WebSvcQueueSystem.QueueSystem" /> object. The <see cref="P:WebSvcQueueSystem.QueueStatusDataSet.StatusRow.CorrelationGUID" /> property for the job is equal to the value of the <see cref="P:WebSvcTimeSheet.TimesheetDataSet.HeadersRow.TS_UID" /> property.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.LogOn" />
              </term>
              <description>Allows the user to log on to Project Server. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadProjectTimesheetLines">
      <MemberSignature Language="C#" Value="public WebSvcTimeSheet.ProjectTimesheetLinesDataSet ReadProjectTimesheetLines (Guid periodUID, WebSvcTimeSheet.ProjectTimesheetLineQueryType qryType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcTimeSheet.ProjectTimesheetLinesDataSet ReadProjectTimesheetLines(valuetype System.Guid periodUID, valuetype WebSvcTimeSheet.ProjectTimesheetLineQueryType qryType) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.ReadProjectTimesheetLines(System.Guid,WebSvcTimeSheet.ProjectTimesheetLineQueryType)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadProjectTimesheetLines (periodUID As Guid, qryType As ProjectTimesheetLineQueryType) As ProjectTimesheetLinesDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcTimeSheet::ProjectTimesheetLinesDataSet ^ ReadProjectTimesheetLines(Guid periodUID, WebSvcTimeSheet::ProjectTimesheetLineQueryType qryType);" />
      <MemberSignature Language="F#" Value="member this.ReadProjectTimesheetLines : Guid * WebSvcTimeSheet.ProjectTimesheetLineQueryType -&gt; WebSvcTimeSheet.ProjectTimesheetLinesDataSet" Usage="timeSheet.ReadProjectTimesheetLines (periodUID, qryType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/ReadProjectTimesheetLines", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcTimeSheet.ProjectTimesheetLinesDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="periodUID" Type="System.Guid" />
        <Parameter Name="qryType" Type="WebSvcTimeSheet.ProjectTimesheetLineQueryType" />
      </Parameters>
      <Docs>
        <param name="periodUID">To be added.</param>
        <param name="qryType">To be added.</param>
        <summary>Reads timesheet lines.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>New method in Project Server 2010.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ApproveProjectTimesheetLine" />
              </term>
              <description>Allows a user to approve project timesheet lines. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadResourceLateTimesheets">
      <MemberSignature Language="C#" Value="public WebSvcTimeSheet.TimesheetListDataSet ReadResourceLateTimesheets (DateTime date);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcTimeSheet.TimesheetListDataSet ReadResourceLateTimesheets(valuetype System.DateTime date) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.ReadResourceLateTimesheets(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadResourceLateTimesheets (date As DateTime) As TimesheetListDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcTimeSheet::TimesheetListDataSet ^ ReadResourceLateTimesheets(DateTime date);" />
      <MemberSignature Language="F#" Value="member this.ReadResourceLateTimesheets : DateTime -&gt; WebSvcTimeSheet.TimesheetListDataSet" Usage="timeSheet.ReadResourceLateTimesheets date" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/ReadResourceLateTimesheets", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcTimeSheet.TimesheetListDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="date" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="date">The time period cutoff date and time. Time periods before this date and time are included.</param>
        <summary>Gets the set of late timesheets that are due from those who report to the current user.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This method uses the <see cref="T:WebSvcQueueSystem.QueueSystem" /> object. The <see cref="P:WebSvcQueueSystem.QueueStatusDataSet.StatusRow.CorrelationGUID" /> property for the job is equal to the value of the <see cref="P:WebSvcTimeSheet.TimesheetDataSet.HeadersRow.TS_UID" /> property.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>Non-standard</term>
              <description>Allows the user to obtain timesheets that have the timesheet manager set to the current user.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadReviewedTimesheets">
      <MemberSignature Language="C#" Value="public WebSvcTimeSheet.TimesheetListDataSet ReadReviewedTimesheets (DateTime start, DateTime finish, Guid[] resUIDs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcTimeSheet.TimesheetListDataSet ReadReviewedTimesheets(valuetype System.DateTime start, valuetype System.DateTime finish, valuetype System.Guid[] resUIDs) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.ReadReviewedTimesheets(System.DateTime,System.DateTime,System.Guid[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadReviewedTimesheets (start As DateTime, finish As DateTime, resUIDs As Guid()) As TimesheetListDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcTimeSheet::TimesheetListDataSet ^ ReadReviewedTimesheets(DateTime start, DateTime finish, cli::array &lt;Guid&gt; ^ resUIDs);" />
      <MemberSignature Language="F#" Value="member this.ReadReviewedTimesheets : DateTime * DateTime * Guid[] -&gt; WebSvcTimeSheet.TimesheetListDataSet" Usage="timeSheet.ReadReviewedTimesheets (start, finish, resUIDs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/ReadReviewedTimesheets", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcTimeSheet.TimesheetListDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.DateTime" />
        <Parameter Name="finish" Type="System.DateTime" />
        <Parameter Name="resUIDs" Type="System.Guid[]" />
      </Parameters>
      <Docs>
        <param name="start">The start date and time.</param>
        <param name="finish">The end date and time.</param>
        <param name="resUIDs">The array of resources for whom timesheets should be read.</param>
        <summary>Reads all timesheets that have been reviewed by the current user for the specified resources in the specified time range.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.LogOn" />
              </term>
              <description>Allows the user to log on to the Project Server. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadTimesheet">
      <MemberSignature Language="C#" Value="public WebSvcTimeSheet.TimesheetDataSet ReadTimesheet (Guid tsUID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcTimeSheet.TimesheetDataSet ReadTimesheet(valuetype System.Guid tsUID) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.ReadTimesheet(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadTimesheet (tsUID As Guid) As TimesheetDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcTimeSheet::TimesheetDataSet ^ ReadTimesheet(Guid tsUID);" />
      <MemberSignature Language="F#" Value="member this.ReadTimesheet : Guid -&gt; WebSvcTimeSheet.TimesheetDataSet" Usage="timeSheet.ReadTimesheet tsUID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/ReadTimesheet", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcTimeSheet.TimesheetDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tsUID" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="tsUID">The unique ID of the timesheet.</param>
        <summary>Gets the specified timesheet header, line items, and timephased data.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This method uses the <see cref="T:WebSvcQueueSystem.QueueSystem" /> object. The <see cref="P:WebSvcQueueSystem.QueueStatusDataSet.StatusRow.CorrelationGUID" /> property for the job is equal to the <see cref="P:WebSvcTimeSheet.TimesheetDataSet.HeadersRow.TS_UID" /> property.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>Non-standard</term>
              <description>The current user is the timesheet owner.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ViewResourceTimesheet" />
              </term>
              <description>Allows a user to view timesheets for a resource. Applies only if the current user is not the timesheet owner. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityCategoryPermission.AdjustTimesheet" />
              </term>
              <description>Allows the user to make changes to a timesheet. Applies only if the current user is not the timesheet owner. Category permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following code example determines whether a timesheet exists for the first open period. If it does, the example reads the timesheet. If the timesheet does not exist, the example creates a timesheet with the default timesheet lines that are specified on the server.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.CreateTimesheet
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try{
            #region Setup
            const string PROJECT_SERVER_URI = "http:// &lt;i&gt;ServerName&lt;/i&gt;/&lt;i&gt;ProjectServerName&lt;/i&gt;/"; // &amp;lt;&amp;lt;--Change to be the name of your server running Project Server and the name of your directory.
            const string TIMESHEET_SERVICE_PATH = "_vti_bin/psi/timesheet.asmx";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
            const string ADMIN_SERVICE_PATH = "_vti_bin/psi/admin.asmx";
            TimeSheetWebSvc.TimesheetDataSet timesheetDs;

            // Set up the services.
            TimeSheetWebSvc.TimeSheet timeSheetSvc = new TimeSheetWebSvc.TimeSheet();
            timeSheetSvc.UseDefaultCredentials = true;
            timeSheetSvc.Url = PROJECT_SERVER_URI + TIMESHEET_SERVICE_PATH;

            ResourceWebSvc.Resource resourceSvc = new ResourceWebSvc.Resource();
            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.UseDefaultCredentials = true;

            AdminWebSvc.Admin adminSvc = new AdminWebSvc.Admin();
            adminSvc.Url = PROJECT_SERVER_URI + ADMIN_SERVICE_PATH;
            adminSvc.UseDefaultCredentials = true;

            Guid myUid = resourceSvc.GetCurrentUserUid();

            #endregion
            #region Read Timesheet
            // Time periods must be created by the admin to use timesheets.
            // We are just reading the first open period here.
            AdminWebSvc.TimePeriodDataSet timeperiodDs = adminSvc.ReadPeriods(AdminWebSvc.PeriodState.Open);
            Guid periodUid = timeperiodDs.TimePeriods[0].WPRD_UID;

            // If timesheet already exists, read it.
            // (To delete an existing unsubmitted timesheet,
            //   go to the My Timesheet area of the Project Web Access site.)
            timesheetDs = timeSheetSvc.ReadTimesheetByPeriod(myUid,periodUid,TimeSheetWebSvc.Navigation.Current);
            #endregion
            #region CreateTimesheet if it doesn't exist, then read it
            // If timesheet does not exist, create it.
            if(timesheetDs.Headers.Count&amp;lt;1)
            {
               timesheetDs = new TimeSheetWebSvc.TimesheetDataSet();
               TimeSheetWebSvc.TimesheetDataSet.HeadersRow headersRow = timesheetDs.Headers.NewHeadersRow();
               headersRow.RES_UID = myUid;
               headersRow.TS_UID = Guid.NewGuid();
               headersRow.WPRD_UID = periodUid;
               headersRow.TS_CREATOR_RES_UID = myUid;
               headersRow.TS_NAME = "Timesheet ";
               headersRow.TS_COMMENTS = "Random comment text here";
               headersRow.TS_ENTRY_MODE_ENUM = (byte)PSLibrary.TimesheetEnum.EntryMode.Weekly; 
               timesheetDs.Headers.AddHeadersRow(headersRow);

               // Create the timesheet with the default line types that are specified by the admin.
               timeSheetSvc.CreateTimesheet(timesheetDs, TimeSheetWebSvc.PreloadType.Default);
               timesheetDs = timeSheetSvc.ReadTimesheet(headersRow.TS_UID);
            }
            CodeSampleUtilities.WriteTablesFormated("Timesheet after create:" ,timesheetDs.Tables);
            #endregion
         }
         catch (SoapException ex)
         {
            ExceptionHandlers.HandleSoapException(ex);
         }
         catch (WebException ex)
         {
            ExceptionHandlers.HandleWebException(ex);
         }
         catch (Exception ex)
         {
            ExceptionHandlers.HandleException(ex);
         }
         finally
         {
            ExceptionHandlers.ResetConsole();
         }
      }
      class ExceptionHandlers
      {

         public static void HandleSoapException(SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": "
                     + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }

         public static void HandleWebException(WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }

         public static void HandleException(Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }

         public static void ResetConsole()
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }
      class CodeSampleUtilities
      {
         // Write all contents of a table collection to the console.
         public static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
         {
            Console.ForegroundColor = ConsoleColor.DarkGreen;
            foreach (System.Data.DataTable table in theTables)
            {

               int[] columnWidths = new int[table.Columns.Count];
               int tableWidth = 0;
               string dataString;
               Console.WriteLine("Table: " + table.TableName);

               // Write out the column names and get their spacing.
               StringBuilder tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  columnWidths[i] = GetColumnWidth(table.Columns[i]);
                  tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

                  tableWidth += columnWidths[i];
               }
               // Add a space so that it will not wrap.
               tableWidth += 1;
               // Make the console as wide as the widest table.
               Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());

               // Write out the data.
               foreach (DataRow row in table.Rows)
               {
                  tableRow = new StringBuilder();
                  for (int i = 0; i &amp;lt; table.Columns.Count; i++)
                  {

                     dataString = row[i].ToString();
                     // Truncate output, if it is wider than 
                     // the desired column width.
                     if (dataString.Length &amp;gt;= columnWidths[i])
                     {
                        dataString = dataString.Substring(0, columnWidths[i] - 1);
                     }
                     // Add the output to the stringbuilder and pad right to fill
                     // up to the column width.
                     tableRow.Append(dataString.PadRight(columnWidths[i]));
                  }
                  tableRow.Append("\r\n");
                  Console.Write(tableRow.ToString());
               }
               Console.Write("\r\n".PadLeft(tableWidth, '-'));
            }
            Console.ResetColor();
         }
         // A helper function for WriteTablesToConsole.
         private static int GetColumnWidth(DataColumn column)
         {
            // Note: Might not handle byte[]data types well.
            const int MAX_COL_WIDTH = 40;
            int dataWidth = 0;

            // Return 12 for numbers, 30 for dates, and string width for strings.
            switch (column.DataType.UnderlyingSystemType.ToString())
            {
               case "System.Boolean":
               case "System.Byte":
               case "System.Byte[]":
               case "System.Char":
               case "System.Decimal":
               case "System.Double":
               case "System.Int16":
               case "System.Int32":
               case "System.Int64":
               case "System.SByte":
               case "System.Single":
               case "System.UInt16":
               case "System.UInt32":
               case "System.UInt64":
                  dataWidth = 12;
                  break;
               case "System.DateTime":
               case "System.TimeSpan":
                  dataWidth = 30;
                  break;
               case "System.Guid":
                  dataWidth = 37;
                  break;
               case "System.String":
                  // If it has a maxlength, use it.
                  if (column.MaxLength &amp;gt; 0)
                  {
                     dataWidth = column.MaxLength;
                  }
                  else
                  {
                     // Otherwise, use the max col width.
                     dataWidth = MAX_COL_WIDTH;
                  }
                  break;
               default:
                  dataWidth = column.ColumnName.Length;
                  break;
            }
            // Truncate, if over the maxlength.
            if (dataWidth &amp;gt; MAX_COL_WIDTH)
            {
               dataWidth = MAX_COL_WIDTH;
            }
            // Always be at least as wide as the colum name.
            return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
         }
  public static void WriteTablesFormated(string Title, System.Data.DataTableCollection theTables)
         {
            WriteSeparator();
            Console.WriteLine(Title);
            CodeSampleUtilities.WriteTablesToConsole(theTables);
         }
         public static void WriteSeparator()
         {
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine("".PadRight(Console.BufferWidth, '='));
            Console.ResetColor();
         }
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadTimesheetApprovers">
      <MemberSignature Language="C#" Value="public WebSvcTimeSheet.ResourceDataSet ReadTimesheetApprovers (Guid tsUID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcTimeSheet.ResourceDataSet ReadTimesheetApprovers(valuetype System.Guid tsUID) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.ReadTimesheetApprovers(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadTimesheetApprovers (tsUID As Guid) As ResourceDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcTimeSheet::ResourceDataSet ^ ReadTimesheetApprovers(Guid tsUID);" />
      <MemberSignature Language="F#" Value="member this.ReadTimesheetApprovers : Guid -&gt; WebSvcTimeSheet.ResourceDataSet" Usage="timeSheet.ReadTimesheetApprovers tsUID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/ReadTimesheetApprovers", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcTimeSheet.ResourceDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tsUID" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="tsUID">The unique ID of the timesheet.</param>
        <summary>Gets all available approvers for a specified timesheet.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Project Server Permissions</para>
          <para>No permissions are required.</para>
          <para />
        </remarks>
        <example>
          <para>The following code example creates a blank timesheet, adds an administrative line, prepares the line, saves it to the database, and submits it. The example then reads all the approvers who are available for this timesheet.</para>
          <para>
            <b>Note</b>: You might need to delete old timesheets or create periods if there are no open periods without timesheets for the sample resource.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.ReadTimesheetApprovers
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            #region Setup
            const string PROJECT_SERVER_URI = "http:// &lt;i&gt;ServerName&lt;/i&gt;/&lt;i&gt;ProjectServerName&lt;/i&gt;/"; // &amp;lt;&amp;lt;--Change to be the name of your server running Project Server and the name of your directory.
            const string TIMESHEET_SERVICE_PATH = "_vti_bin/psi/timesheet.asmx";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
            const string ADMIN_SERVICE_PATH = "_vti_bin/psi/admin.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            TimeSheetWebSvc.TimesheetDataSet timesheetDs;

            // Set up the services.
            TimeSheetWebSvc.TimeSheet timeSheetSvc = new TimeSheetWebSvc.TimeSheet();
            timeSheetSvc.UseDefaultCredentials = true;
            timeSheetSvc.Url = PROJECT_SERVER_URI + TIMESHEET_SERVICE_PATH;
            CodeSample_TimeSheetUtilities timeSheetUtils = new CodeSample_TimeSheetUtilities(timeSheetSvc);

            ResourceWebSvc.Resource resourceSvc = new ResourceWebSvc.Resource();
            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.UseDefaultCredentials = true;
            CodeSample_ResourceUtilities resourceUtils = new CodeSample_ResourceUtilities(resourceSvc);

            AdminWebSvc.Admin adminSvc = new AdminWebSvc.Admin();
            adminSvc.Url = PROJECT_SERVER_URI + ADMIN_SERVICE_PATH;
            adminSvc.UseDefaultCredentials = true;

            QueueSystemWebSvc.QueueSystem q = new QueueSystemWebSvc.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;

            AdminWebSvc.TimesheetLineClassDataSet tsLineClassDs = adminSvc.ReadLineClasses(AdminWebSvc.LineClassType.AllNonProject, AdminWebSvc.LineClassState.Enabled);

            #endregion
            #region Setup a timesheet with no lines
            Guid sampleResourceUid = resourceUtils.EnsureLertchai();

            AdminWebSvc.TimePeriodDataSet timePeriodDs = adminSvc.ReadPeriods(AdminWebSvc.PeriodState.Open);

            Guid periodUid = timeSheetUtils.FindFirstEmptyPeriod(sampleResourceUid, timePeriodDs);
            Guid timeSheetUid = timeSheetUtils.CreateEmptyTimeSheetFor(sampleResourceUid, resourceUtils.myUid, periodUid);
            timesheetDs = timeSheetSvc.ReadTimesheet(timeSheetUid);
 
            TimeSheetWebSvc.TimesheetDataSet.LinesRow line = timesheetDs.Lines.NewLinesRow();
            line.TS_UID = timeSheetUid;
            line.TS_LINE_UID = Guid.NewGuid();
            line.TS_LINE_CLASS_UID = tsLineClassDs.LineClasses[0].TS_LINE_CLASS_UID;
            line.TS_LINE_COMMENT = "Added by code sample.";
            line.TS_LINE_STATUS = (byte)PSLibrary.TimesheetEnum.LineStatus.NotApplicable;
            line.TS_LINE_VALIDATION_TYPE = (byte)PSLibrary.TimesheetEnum.ValidationType.Unverified;
            line.TS_LINE_CACHED_ASSIGN_NAME = tsLineClassDs.LineClasses[0].TS_LINE_CLASS_DESC;
            timesheetDs.Lines.AddLinesRow(line);

            Console.WriteLine("Prepare the timesheet...");
            timeSheetSvc.PrepareTimesheetLine(timeSheetUid, ref timesheetDs, new Guid[] { line.TS_LINE_UID });

            Console.WriteLine("Save the changes to the database...");
            Guid jobUid = Guid.NewGuid();
            timeSheetSvc.QueueUpdateTimesheet(jobUid, timeSheetUid, timesheetDs);
            CodeSampleUtilities.WaitForQueue(q, jobUid);

            #region Read timesheet approvers
            TimeSheetWebSvc.ResourceDataSet resourceDs = timeSheetSvc.ReadTimesheetApprovers(timeSheetUid);

            CodeSampleUtilities.WriteTablesFormated("Approvers available for this timesheet", resourceDs.Tables);

            #endregion
         }
         catch (SoapException ex)
         {
            ExceptionHandlers.HandleSoapException(ex);
         }
         catch (WebException ex)
         {
            ExceptionHandlers.HandleWebException(ex);
         }
         catch (Exception ex)
         {
            ExceptionHandlers.HandleException(ex);
         }
         finally
         {
            ExceptionHandlers.ResetConsole();
         }
      }
   }
   class ExceptionHandlers
   {
      public static void HandleSoapException(SoapException ex)
      {
         PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
         PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
         string errMess = "==============================\r\nError: \r\n";
         for (int i = 0; i &amp;lt; errors.Length; i++)
         {
            errMess += "\n" + ex.Message.ToString() + "\r\n";
            errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
            errMess += errors[i].ErrId.ToString() + "\n";

            for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
            {
               errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": "
                  + errors[i].ErrorAttributes[j];
            }
            errMess += "\r\n".PadRight(30, '=');
         }
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine(errMess);
      }

      public static void HandleWebException(WebException ex)
      {
         string errMess = ex.Message.ToString() +
            "\n\nLog on, or check the Project Server Queuing Service";
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine("Error: " + errMess);
      }

      public static void HandleException(Exception ex)
      {
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine("Error: " + ex.Message);
      }

      public static void ResetConsole()
      {
         Console.ResetColor();
         Console.WriteLine("\r\n\r\nPress any key...");
         Console.ReadKey();
      }
   }
   class CodeSampleUtilities
   {
      // Write all contents of a table collection to the console.
      public static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing.
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // Add a space so that it will not wrap.
            tableWidth += 1;
            // Make the console as wide as the widest table.
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data.
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {

                  dataString = row[i].ToString();
                  // Truncate output, if it is wider than 
                  // the desired column width.
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // Add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // A helper function for WriteTablesToConsole.
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: Might not handle byte[]data types well.
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         // Return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it.
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise, use the max col width.
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // Truncate, if over the maxlength.
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // Always be at least as wide as the colum name.
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
      public static void WriteTablesFormated(string Title, System.Data.DataTableCollection theTables)
      {
         WriteSeparator();
         Console.WriteLine(Title);

         CodeSampleUtilities.WriteTablesToConsole(theTables);

      }
      public static void WriteSeparator()
      {
         Console.ForegroundColor = ConsoleColor.DarkYellow;
         Console.WriteLine("".PadRight(Console.BufferWidth, '='));
         Console.ResetColor();

      }

      // Wait for the job to finish.
      // Outputs job status to the console.
      static public void WaitForQueue(QueueSystemWebSvc.QueueSystem q, Guid jobId)
      {
         QueueSystemWebSvc.JobState jobState;
         const int QUEUE_WAIT_TIME = 1; // one second
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         //Wait for the project to get through the queue.
         // Get the estimated wait time in seconds
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Console.Write("Waiting on queue. Estimate: {0} seconds.\r\n ", wait);

         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == QueueSystemWebSvc.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == QueueSystemWebSvc.JobState.Unknown
               || jobState == QueueSystemWebSvc.JobState.Failed
               || jobState == QueueSystemWebSvc.JobState.FailedNotBlocking
               || jobState == QueueSystemWebSvc.JobState.CorrelationBlocked
               || jobState == QueueSystemWebSvc.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  //Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                  Console.Write("~");
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
         Console.Write("\r\n");
      }
   }
   class CodeSample_TimeSheetUtilities
   {
      TimeSheetWebSvc.TimeSheet timeSheetSvc;

      public CodeSample_TimeSheetUtilities(TimeSheetWebSvc.TimeSheet theTimeSheetSvc)
      {
         timeSheetSvc = theTimeSheetSvc;
      }
      public Guid CreateEmptyTimeSheetFor(Guid resourceGuid, Guid mgrUid, Guid periodUid)
      {

         TimeSheetWebSvc.TimesheetDataSet timesheetDs = new TimeSheetWebSvc.TimesheetDataSet();
         TimeSheetWebSvc.TimesheetDataSet.HeadersRow headersRow = timesheetDs.Headers.NewHeadersRow();
         headersRow.RES_UID = resourceGuid;
         headersRow.TS_UID = Guid.NewGuid();
         headersRow.WPRD_UID = periodUid;
         headersRow.TS_CREATOR_RES_UID = mgrUid;
         headersRow.TS_NAME = "Timesheet ";
         headersRow.TS_COMMENTS = "Timesheet for code sample";
         headersRow.TS_ENTRY_MODE_ENUM = (byte)PSLibrary.TimesheetEnum.EntryMode.Weekly;
         timesheetDs.Headers.AddHeadersRow(headersRow);

         // Create the timesheet with the default line types that are specified by the admin.
         timeSheetSvc.CreateTimesheet(timesheetDs, TimeSheetWebSvc.PreloadType.None);

         return headersRow.TS_UID;
      }

      public Guid FindFirstEmptyPeriod(Guid resUid, AdminWebSvc.TimePeriodDataSet timePeriodDs)
      {
         TimeSheetWebSvc.TimesheetDataSet timeSheetDs;

         for (int i = 0; i &amp;lt; timePeriodDs.TimePeriods.Count; i++)
         {
            timeSheetDs = timeSheetSvc.ReadTimesheetByPeriod(resUid, timePeriodDs.TimePeriods[i].WPRD_UID, TimeSheetWebSvc.Navigation.Current);
            if (timeSheetDs.Headers.Count == 0)
            {
               return timePeriodDs.TimePeriods[i].WPRD_UID;
            }
         }
         return Guid.Empty;
      }
   }
   class CodeSample_ResourceUtilities
   {

      private ResourceWebSvc.Resource m_resourceSvc;
      private Guid m_MyUid;
      private Guid sampleResource = Guid.Empty;

      public CodeSample_ResourceUtilities(ResourceWebSvc.Resource theResourceSvc)
      {
         m_resourceSvc = theResourceSvc;
         m_MyUid = resourceSvc.GetCurrentUserUid();
      }

      public Guid myUid
      {
         get { return m_MyUid; }
      }

      public ResourceWebSvc.Resource resourceSvc
      {
         get { return m_resourceSvc; }
      }

      public Guid EnsureLertchai()
      {
         return EnsureSampleResource("Lertchai Treetawatchaiwong", "LT");
      }

      public Guid EnsureSampleResource(string name, string inits)
      {
         Guid resGuid = GetResourceGuid(name);
         if (resGuid == Guid.Empty)
         {
            resGuid = this.CreateResource(name, inits, myUid);
         }
         return resGuid;
      }

      public Guid GetResourceGuid(string resourceName)
      {
         ResourceWebSvc.ResourceDataSet resourceDs = new ResourceWebSvc.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, resourceName);
         resourceFilter.Criteria = existingResource;
         resourceDs = resourceSvc.ReadResources(resourceFilter.GetXml(), false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs.Resources[0].RES_UID;
         }
         else
         {
            return Guid.Empty;
         }
      }

      private Guid CreateResource(string resourceName, string initials, Guid timesheetMgr)
      {
         ResourceWebSvc.ResourceDataSet resourceDs = new ResourceWebSvc.ResourceDataSet();
         ResourceWebSvc.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
         resourceRow.RES_UID = Guid.NewGuid();
         resourceRow.RES_NAME = resourceName;
         resourceRow.RES_INITIALS = initials;
         resourceRow.RES_TYPE = (int)PSLibrary.Resource.Type.WorkResource;
         resourceRow.RES_TIMESHEET_MGR_UID = timesheetMgr;
         resourceDs.Resources.AddResourcesRow(resourceRow);
         resourceSvc.CreateResources(resourceDs, false, true);
         return resourceRow.RES_UID;
      }
   }
}
</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadTimesheetByPeriod">
      <MemberSignature Language="C#" Value="public WebSvcTimeSheet.TimesheetDataSet ReadTimesheetByPeriod (Guid resUID, Guid periodUID, WebSvcTimeSheet.Navigation select);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcTimeSheet.TimesheetDataSet ReadTimesheetByPeriod(valuetype System.Guid resUID, valuetype System.Guid periodUID, valuetype WebSvcTimeSheet.Navigation select) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.ReadTimesheetByPeriod(System.Guid,System.Guid,WebSvcTimeSheet.Navigation)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadTimesheetByPeriod (resUID As Guid, periodUID As Guid, select As Navigation) As TimesheetDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcTimeSheet::TimesheetDataSet ^ ReadTimesheetByPeriod(Guid resUID, Guid periodUID, WebSvcTimeSheet::Navigation select);" />
      <MemberSignature Language="F#" Value="member this.ReadTimesheetByPeriod : Guid * Guid * WebSvcTimeSheet.Navigation -&gt; WebSvcTimeSheet.TimesheetDataSet" Usage="timeSheet.ReadTimesheetByPeriod (resUID, periodUID, select)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/ReadTimesheetByPeriod", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcTimeSheet.TimesheetDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resUID" Type="System.Guid" />
        <Parameter Name="periodUID" Type="System.Guid" />
        <Parameter Name="select" Type="WebSvcTimeSheet.Navigation" />
      </Parameters>
      <Docs>
        <param name="resUID">The unique ID of the resource.</param>
        <param name="periodUID">The unique ID of the time period.</param>
        <param name="select">The <see cref="T:WebSvcTimeSheet.Navigation" /> value that indicates which timeperiod is requested.</param>
        <summary>Gets the timesheet header, line items, and timephased data based on the specified period and resource.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This method uses the <see cref="T:WebSvcQueueSystem.QueueSystem" /> object. The <see cref="P:WebSvcQueueSystem.QueueStatusDataSet.StatusRow.CorrelationGUID" /> property for the job is equal to the value of the <see cref="P:WebSvcTimeSheet.TimesheetDataSet.HeadersRow.TS_UID" /> property.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>Non-standard</term>
              <description>The current user is the timesheet owner.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ViewResourceTimesheet" />
              </term>
              <description>Allows a user to view timesheets for a resource. Applies only if the current user is not the timesheet owner. Global permission.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.AcceptTimesheets" />
              </term>
              <description>Allows the user to accept timesheets for approval. Applies only if the current user is not the timesheet manager. Global Permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following code example determines whether a timesheet exists for the first open period. If it does, the example reads the timesheet. If the timesheet does not exist, the example creates a timesheet with the default timesheet lines that are specified on the server.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.CreateTimesheet
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try{
            #region Setup
            const string PROJECT_SERVER_URI = "http:// &lt;i&gt;ServerName&lt;/i&gt;/&lt;i&gt;ProjectServerName&lt;/i&gt;/"; // &amp;lt;&amp;lt;--Change to be the name of your server running Project Server and the name of your directory.
            const string TIMESHEET_SERVICE_PATH = "_vti_bin/psi/timesheet.asmx";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
            const string ADMIN_SERVICE_PATH = "_vti_bin/psi/admin.asmx";
            TimeSheetWebSvc.TimesheetDataSet timesheetDs;

            // Set up the services.
            TimeSheetWebSvc.TimeSheet timeSheetSvc = new TimeSheetWebSvc.TimeSheet();
            timeSheetSvc.UseDefaultCredentials = true;
            timeSheetSvc.Url = PROJECT_SERVER_URI + TIMESHEET_SERVICE_PATH;

            ResourceWebSvc.Resource resourceSvc = new ResourceWebSvc.Resource();
            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.UseDefaultCredentials = true;

            AdminWebSvc.Admin adminSvc = new AdminWebSvc.Admin();
            adminSvc.Url = PROJECT_SERVER_URI + ADMIN_SERVICE_PATH;
            adminSvc.UseDefaultCredentials = true;

            Guid myUid = resourceSvc.GetCurrentUserUid();

            #endregion
            #region Read Timesheet
            // Time periods must be created by the admin to use timesheets.
            // We are just reading the first open period here.
            AdminWebSvc.TimePeriodDataSet timeperiodDs = adminSvc.ReadPeriods(AdminWebSvc.PeriodState.Open);
            Guid periodUid = timeperiodDs.TimePeriods[0].WPRD_UID;

            // If timesheet already exists, read it.
            // (To delete an existing unsubmitted timesheet,
            //   go to the My Timesheet area of the Project Web Access site.)
            timesheetDs = timeSheetSvc.ReadTimesheetByPeriod(myUid,periodUid,TimeSheetWebSvc.Navigation.Current);
            #endregion
            #region CreateTimesheet if it doesn't exist, then read it
            // If the timesheet does not exist, create it.
            if(timesheetDs.Headers.Count&amp;lt;1)
            {
               timesheetDs = new TimeSheetWebSvc.TimesheetDataSet();
               TimeSheetWebSvc.TimesheetDataSet.HeadersRow headersRow = timesheetDs.Headers.NewHeadersRow();
               headersRow.RES_UID = myUid;
               headersRow.TS_UID = Guid.NewGuid();
               headersRow.WPRD_UID = periodUid;
               headersRow.TS_CREATOR_RES_UID = myUid;
               headersRow.TS_NAME = "Timesheet ";
               headersRow.TS_COMMENTS = "Random comment text here";
               headersRow.TS_ENTRY_MODE_ENUM = (byte)PSLibrary.TimesheetEnum.EntryMode.Weekly; 
               timesheetDs.Headers.AddHeadersRow(headersRow);

               // Create the timesheet with the default line types that are specified by the admin.
               timeSheetSvc.CreateTimesheet(timesheetDs, TimeSheetWebSvc.PreloadType.Default);
               timesheetDs = timeSheetSvc.ReadTimesheet(headersRow.TS_UID);
            }
            CodeSampleUtilities.WriteTablesFormated("Timesheet after create:" ,timesheetDs.Tables);
            #endregion
         }
         catch (SoapException ex)
         {
            ExceptionHandlers.HandleSoapException(ex);
         }
         catch (WebException ex)
         {
            ExceptionHandlers.HandleWebException(ex);
         }
         catch (Exception ex)
         {
            ExceptionHandlers.HandleException(ex);
         }
         finally
         {
            ExceptionHandlers.ResetConsole();
         }
      }
      class ExceptionHandlers
      {

         public static void HandleSoapException(SoapException ex)
         {
            PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
            PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
            string errMess = "==============================\r\nError: \r\n";
            for (int i = 0; i &amp;lt; errors.Length; i++)
            {
               errMess += "\n" + ex.Message.ToString() + "\r\n";
               errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
               errMess += errors[i].ErrId.ToString() + "\n";

               for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
               {
                  errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": "
                     + errors[i].ErrorAttributes[j];
               }
               errMess += "\r\n".PadRight(30, '=');
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(errMess);
         }

         public static void HandleWebException(WebException ex)
         {
            string errMess = ex.Message.ToString() +
               "\n\nLog on, or check the Project Server Queuing Service";
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + errMess);
         }

         public static void HandleException(Exception ex)
         {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("Error: " + ex.Message);
         }

         public static void ResetConsole()
         {
            Console.ResetColor();
            Console.WriteLine("\r\n\r\nPress any key...");
            Console.ReadKey();
         }
      }
      class CodeSampleUtilities
      {
         // Write all contents of a table collection to the console.
         public static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
         {
            Console.ForegroundColor = ConsoleColor.DarkGreen;
            foreach (System.Data.DataTable table in theTables)
            {

               int[] columnWidths = new int[table.Columns.Count];
               int tableWidth = 0;
               string dataString;
               Console.WriteLine("Table: " + table.TableName);

               // Write out the column names and get their spacing.
               StringBuilder tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {
                  columnWidths[i] = GetColumnWidth(table.Columns[i]);
                  tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

                  tableWidth += columnWidths[i];
               }
               // Add a space so that it will not wrap.
               tableWidth += 1;
               // Make the console as wide as the widest table.
               Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());

               // Write out the data.
               foreach (DataRow row in table.Rows)
               {
                  tableRow = new StringBuilder();
                  for (int i = 0; i &amp;lt; table.Columns.Count; i++)
                  {

                     dataString = row[i].ToString();
                     // Truncate output, if it is wider than 
                     // the desired column width.
                     if (dataString.Length &amp;gt;= columnWidths[i])
                     {
                        dataString = dataString.Substring(0, columnWidths[i] - 1);
                     }
                     // Add the output to the stringbuilder and pad right to fill
                     // up to the column width.
                     tableRow.Append(dataString.PadRight(columnWidths[i]));
                  }
                  tableRow.Append("\r\n");
                  Console.Write(tableRow.ToString());
               }
               Console.Write("\r\n".PadLeft(tableWidth, '-'));
            }
            Console.ResetColor();
         }
         // A helper function for WriteTablesToConsole.
         private static int GetColumnWidth(DataColumn column)
         {
            // Note: Might not handle byte[]data types well.
            const int MAX_COL_WIDTH = 40;
            int dataWidth = 0;

            // Return 12 for numbers, 30 for dates, and string width for strings.
            switch (column.DataType.UnderlyingSystemType.ToString())
            {
               case "System.Boolean":
               case "System.Byte":
               case "System.Byte[]":
               case "System.Char":
               case "System.Decimal":
               case "System.Double":
               case "System.Int16":
               case "System.Int32":
               case "System.Int64":
               case "System.SByte":
               case "System.Single":
               case "System.UInt16":
               case "System.UInt32":
               case "System.UInt64":
                  dataWidth = 12;
                  break;
               case "System.DateTime":
               case "System.TimeSpan":
                  dataWidth = 30;
                  break;
               case "System.Guid":
                  dataWidth = 37;
                  break;
               case "System.String":
                  // If it has a maxlength, use it.
                  if (column.MaxLength &amp;gt; 0)
                  {
                     dataWidth = column.MaxLength;
                  }
                  else
                  {
                     // Otherwise, use the max col width.
                     dataWidth = MAX_COL_WIDTH;
                  }
                  break;
               default:
                  dataWidth = column.ColumnName.Length;
                  break;
            }
            // Truncate, if over the maxlength.
            if (dataWidth &amp;gt; MAX_COL_WIDTH)
            {
               dataWidth = MAX_COL_WIDTH;
            }
            // Always be at least as wide as the colum name.
            return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
         }
         public static void WriteTablesFormated(string Title, System.Data.DataTableCollection theTables)
         {
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine("".PadRight(Console.BufferWidth, '='));
            Console.ResetColor();
            Console.WriteLine(Title);

            CodeSampleUtilities.WriteTablesToConsole(theTables);
         }
         public static void WriteSeparator()
         {
         }
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadTimesheetList">
      <MemberSignature Language="C#" Value="public WebSvcTimeSheet.TimesheetListDataSet ReadTimesheetList (Guid resUID, DateTime startDate, DateTime finishDate, int select);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcTimeSheet.TimesheetListDataSet ReadTimesheetList(valuetype System.Guid resUID, valuetype System.DateTime startDate, valuetype System.DateTime finishDate, int32 select) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.ReadTimesheetList(System.Guid,System.DateTime,System.DateTime,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadTimesheetList (resUID As Guid, startDate As DateTime, finishDate As DateTime, select As Integer) As TimesheetListDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcTimeSheet::TimesheetListDataSet ^ ReadTimesheetList(Guid resUID, DateTime startDate, DateTime finishDate, int select);" />
      <MemberSignature Language="F#" Value="member this.ReadTimesheetList : Guid * DateTime * DateTime * int -&gt; WebSvcTimeSheet.TimesheetListDataSet" Usage="timeSheet.ReadTimesheetList (resUID, startDate, finishDate, select)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/ReadTimesheetList", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcTimeSheet.TimesheetListDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resUID" Type="System.Guid" />
        <Parameter Name="startDate" Type="System.DateTime" />
        <Parameter Name="finishDate" Type="System.DateTime" />
        <Parameter Name="select" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="resUID">The resource GUID.</param>
        <param name="startDate">The date of earliest timesheet to return.</param>
        <param name="finishDate">The date of the most recent timesheet to return.</param>
        <param name="select">Filter for timesheet status; use <see cref="T:Microsoft.Office.Project.Server.Library.TimesheetEnum.ListSelect" />.</param>
        <summary>Reads a timesheet summary for the specified resource within the specified date range.</summary>
        <returns>
          <b>DataSet</b> with a summary list of timesheets that satisfy the parameters.</returns>
        <remarks>
          <para>Use a <see cref="T:Microsoft.Office.Project.Server.Library.TimesheetEnum.ListSelect" /> value for the <paramref name="select" /> parameter. You can combine the <b>ListSelect</b> values with the <b>OR</b> operation to filter for a combination of properties. For example, to select all timesheets that the user created that are in progress, set the <paramref name="select" /> parameter to <b>CreatedByMe</b><b>OR</b><b>InProgress</b>.</para>
          <para>To return all timesheets plus an empty record for a period where there is no timesheet, set <paramref name="select" /> to <b>TimeSheetEnum.ListSelect.AllPeriods</b>.</para>
          <para>
            <b>ReadTimesheetList</b> ignores <paramref name="resUID" /> if the value of <paramref name="select" /> is just <b>CreatedByMe</b>. To get a list of another person's timesheets that were created by you—that is, timesheets for which you are the surrogate—pass the other user's resource GUID in <paramref name="resUID" /> and a value for <paramref name="select" /> that is an <b>OR</b> operation between <b>CreatedByMe</b> and <b>InProgress</b>, <b>Submitted</b>, <b>Acceptable</b>, <b>Approved</b>, <b>Rejected</b>, or <b>AllExisting</b>.</para>
          <para>Valid dates in Project Server are January 1, 1984, through December 31, 2049.</para>
          <para>This method uses the <see cref="T:WebSvcQueueSystem.QueueSystem" /> object. The <see cref="P:WebSvcQueueSystem.QueueStatusDataSet.StatusRow.CorrelationGUID" /> property for the job is equal to the value of the <see cref="P:WebSvcTimeSheet.TimesheetDataSet.HeadersRow.TS_UID" /> property.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>Non-standard</term>
              <description>The current user is the timesheet owner, or the value of <paramref name="select" /> is <b>CreatedByMe</b>.</description>
            </item>
            <item>
              <term>
                <see cref="F:Microsoft.Office.Project.Server.Library.PSSecurityGlobalPermission.ViewResourceTimesheet" />
              </term>
              <description>Allows a user to view timesheets for a resource. Applies only if the current user is not the timesheet owner. Global permission.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following code sample reads all timesheets within specified dates that are created by the user and that are in progress. The sample uses the <b>TimeSheetUtils</b> class and the  <b>ExceptionHandlers</b> classe to separate functionality from the <b>Program</b> class. The <b>TimeSheetUtils.GetMyTimeSheetsInProgress</b> method uses the <b>GetCurrentUserUid</b> method in the Resource web service to return the user's GUID. </para>
          <para>For information about compiling the sample, see Prerequisites for Reference Code Samples. </para>
          <code>using System;
using System.Net;
using System.Web.Services.Protocols;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.TestTimesheet
{
   class Program
   {
      private static TimeSheetWebSvc.TimeSheet timesheet =
         new TimeSheetWebSvc.TimeSheet();
      private static ResourceWebSvc.Resource resource =
         new ResourceWebSvc.Resource();

      private static TimeSheetUtils timeSheetUtils = new TimeSheetUtils();
      private static ExceptionHandlers exceptionHandlers = new ExceptionHandlers();

      [STAThread]
      static void Main()
      {
         try
         {
            const string PROJECT_SERVER_URI = "http:// &lt;i&gt;ServerName&lt;/i&gt;/&lt;i&gt;ProjectServerName&lt;/i&gt;/";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
            const string TIMESHEET_SERVICE_PATH = "_vti_bin/psi/timesheet.asmx";

            // Set up the web service objects.
            resource.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resource.Credentials = CredentialCache.DefaultCredentials;

            timesheet.Url = PROJECT_SERVER_URI + TIMESHEET_SERVICE_PATH;
            timesheet.Credentials = CredentialCache.DefaultCredentials;

            // Get timesheet information for the specified dates.
            DateTime startDate = new DateTime(2006, 11, 27);
            DateTime finishDate = new DateTime(2006, 12, 1);
            Guid resUid;

            TimeSheetWebSvc.TimesheetListDataSet dsTimeSheetList = 
               timeSheetUtils.GetMyTimeSheetsInProgress(
                  timesheet, resource, startDate, finishDate, out resUid);

            Console.WriteLine("Active timesheets for resource: " + resUid.ToString());
            Console.WriteLine(string.Format("\tStart date: {0}\r\n\tFinish date: {1}", 
               startDate.ToString(), finishDate.ToString()));

            for (int i = 0; i &amp;lt; dsTimeSheetList.Timesheets.Count; i++)
            {
               Console.WriteLine(dsTimeSheetList.Timesheets[i].TS_UID.ToString(), 
                  dsTimeSheetList.Timesheets[i].TS_NAME);
            }
         }
         catch (SoapException ex)
         { exceptionHandlers.HandleSoapException(ex); }
         catch (WebException ex)
         { exceptionHandlers.HandleWebException(ex); }
         catch (Exception ex)
         { exceptionHandlers.HandleException(ex); }
         finally
         { exceptionHandlers.ResetConsole(); }
      }
   }

   class TimeSheetUtils
   {
      public TimeSheetUtils()
      {
      }

      // Get a list of timesheets that were created by the user and that are in progress.
      public TimeSheetWebSvc.TimesheetListDataSet GetMyTimeSheetsInProgress(
          TimeSheetWebSvc.TimeSheet timesheet,
          ResourceWebSvc.Resource resource,
          DateTime startDate,
          DateTime finishDate,
         out Guid resUid)
      {
         int select = Convert.ToInt32(
                         PSLibrary.TimesheetEnum.ListSelect.CreatedByMe
                       | PSLibrary.TimesheetEnum.ListSelect.InProgress);

         resUid = resource.GetCurrentUserUid();
         return timesheet.ReadTimesheetList(resUid, startDate, finishDate, select);
      }
   }

   class ExceptionHandlers
   {
      public ExceptionHandlers()
      {
      }

      public void HandleSoapException(SoapException ex)
      {
         PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
         PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
         string errMess = "==============================\r\nError: \r\n";
         for (int i = 0; i &amp;lt; errors.Length; i++)
         {
            errMess += "\n" + ex.Message.ToString() + "\r\n";
            errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
            errMess += errors[i].ErrId.ToString() + "\n";

            for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
            {
               errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": "
                  + errors[i].ErrorAttributes[j];
            }
            errMess += "\r\n".PadRight(30, '=');
         }
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine(errMess);
      }

      public void HandleWebException(WebException ex)
      {
         string errMess = ex.Message.ToString() +
            "\n\nLog on, or check the Project Server Queuing Service";
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine("Error: " + errMess);
      }

      public void HandleException(Exception ex)
      {
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine("Error: " + ex.Message);
      }

      public void ResetConsole()
      {
         Console.ResetColor();
         Console.WriteLine("\r\n\r\nPress any key...");
         Console.ReadKey();
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadTimesheetsPendingApproval">
      <MemberSignature Language="C#" Value="public WebSvcTimeSheet.TimesheetListDataSet ReadTimesheetsPendingApproval (DateTime start, DateTime finish, Guid[] resUIDs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcTimeSheet.TimesheetListDataSet ReadTimesheetsPendingApproval(valuetype System.DateTime start, valuetype System.DateTime finish, valuetype System.Guid[] resUIDs) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.ReadTimesheetsPendingApproval(System.DateTime,System.DateTime,System.Guid[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadTimesheetsPendingApproval (start As DateTime, finish As DateTime, resUIDs As Guid()) As TimesheetListDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcTimeSheet::TimesheetListDataSet ^ ReadTimesheetsPendingApproval(DateTime start, DateTime finish, cli::array &lt;Guid&gt; ^ resUIDs);" />
      <MemberSignature Language="F#" Value="member this.ReadTimesheetsPendingApproval : DateTime * DateTime * Guid[] -&gt; WebSvcTimeSheet.TimesheetListDataSet" Usage="timeSheet.ReadTimesheetsPendingApproval (start, finish, resUIDs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/ReadTimesheetsPendingApproval", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcTimeSheet.TimesheetListDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.DateTime" />
        <Parameter Name="finish" Type="System.DateTime" />
        <Parameter Name="resUIDs" Type="System.Guid[]" />
      </Parameters>
      <Docs>
        <param name="start">The starting date and time. Use <b>DateTime.MinValue</b> to include all entries from the beginning. </param>
        <param name="finish">The ending date and time. Use <b>DateTime.MaxValue</b> to include all entries to the end.</param>
        <param name="resUIDs">An array of unique IDs for those resources of interest. Pass a null reference (Nothing in Visual Basic) to return all resources.</param>
        <summary>Reads all timesheets that are pending approval in the specified time range.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This method uses the <see cref="T:WebSvcQueueSystem.QueueSystem" /> object. The <see cref="P:WebSvcQueueSystem.QueueStatusDataSet.StatusRow.CorrelationGUID" /> property for the job is equal to the value of the <see cref="P:WebSvcTimeSheet.TimesheetDataSet.HeadersRow.TS_UID" /> property.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>Non-standard</term>
              <description>Allows the user to obtain timesheets that have the timesheet manager set to the current user.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following code example creates a blank timesheet, adds an administrative line, prepares the line, saves it to the database, and submits it. The example then reads all the timesheets that are waiting for your approval and displays them.</para>
          <para>
            <b>Note</b>: You might need to delete old timesheets or create periods if there are no open periods without timesheets for the sample resource.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;
namespace Microsoft.SDK.Project.Samples.ReadTimesheetsPendingApproval
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            #region Setup
            const string PROJECT_SERVER_URI = "http:// &lt;i&gt;ServerName&lt;/i&gt;/&lt;i&gt;ProjectServerName&lt;/i&gt;/"; // &amp;lt;&amp;lt;--Change to be the name of your server running Project Server and the name of your directory.
            const string TIMESHEET_SERVICE_PATH = "_vti_bin/psi/timesheet.asmx";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
            const string ADMIN_SERVICE_PATH = "_vti_bin/psi/admin.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            TimeSheetWebSvc.TimesheetDataSet timesheetDs;

            // Set up the services.
            TimeSheetWebSvc.TimeSheet timeSheetSvc = new TimeSheetWebSvc.TimeSheet();
            timeSheetSvc.UseDefaultCredentials = true;
            timeSheetSvc.Url = PROJECT_SERVER_URI + TIMESHEET_SERVICE_PATH;
            CodeSample_TimeSheetUtilities timeSheetUtils = new CodeSample_TimeSheetUtilities(timeSheetSvc);

            ResourceWebSvc.Resource resourceSvc = new ResourceWebSvc.Resource();
            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.UseDefaultCredentials = true;
            CodeSample_ResourceUtilities resourceUtils = new CodeSample_ResourceUtilities(resourceSvc);

            AdminWebSvc.Admin adminSvc = new AdminWebSvc.Admin();
            adminSvc.Url = PROJECT_SERVER_URI + ADMIN_SERVICE_PATH;
            adminSvc.UseDefaultCredentials = true;

            QueueSystemWebSvc.QueueSystem q = new QueueSystemWebSvc.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;

            AdminWebSvc.TimesheetLineClassDataSet tsLineClassDs = adminSvc.ReadLineClasses(AdminWebSvc.LineClassType.AllNonProject, AdminWebSvc.LineClassState.Enabled);

            #endregion
            #region Setup a timesheet with no lines
            Guid sampleResourceUid = resourceUtils.EnsureLertchai();

            AdminWebSvc.TimePeriodDataSet timePeriodDs = adminSvc.ReadPeriods(AdminWebSvc.PeriodState.Open);

            Guid periodUid = timeSheetUtils.FindFirstEmptyPeriod(sampleResourceUid, timePeriodDs);
            Guid timeSheetUid = timeSheetUtils.CreateEmptyTimeSheetFor(sampleResourceUid, resourceUtils.myUid, periodUid);
            timesheetDs = timeSheetSvc.ReadTimesheet(timeSheetUid);
 
            TimeSheetWebSvc.TimesheetDataSet.LinesRow line = timesheetDs.Lines.NewLinesRow();
            line.TS_UID = timeSheetUid;
            line.TS_LINE_UID = Guid.NewGuid();
            line.TS_LINE_CLASS_UID = tsLineClassDs.LineClasses[0].TS_LINE_CLASS_UID;
            line.TS_LINE_COMMENT = "Added by code sample.";
            line.TS_LINE_STATUS = (byte)PSLibrary.TimesheetEnum.LineStatus.NotApplicable;
            line.TS_LINE_VALIDATION_TYPE = (byte)PSLibrary.TimesheetEnum.ValidationType.Unverified;
            line.TS_LINE_CACHED_ASSIGN_NAME = tsLineClassDs.LineClasses[0].TS_LINE_CLASS_DESC;
            timesheetDs.Lines.AddLinesRow(line);

            Console.WriteLine("Prepare the timesheet...");
            timeSheetSvc.PrepareTimesheetLine(timeSheetUid, ref timesheetDs, new Guid[] { line.TS_LINE_UID });

            Console.WriteLine("Save the changes to the database...");
            Guid jobUid = Guid.NewGuid();
            timeSheetSvc.QueueUpdateTimesheet(jobUid, timeSheetUid, timesheetDs);
            CodeSampleUtilities.WaitForQueue(q, jobUid);


            jobUid = Guid.NewGuid();
            timeSheetSvc.QueueSubmitTimesheet(jobUid, timeSheetUid,resourceUtils.myUid, "Approved via code sample");
            CodeSampleUtilities.WaitForQueue(q, jobUid);

            #endregion
            #region Read timesheets pending approval
            TimeSheetWebSvc.TimesheetListDataSet tsListDs = timeSheetSvc.ReadTimesheetsPendingApproval(new DateTime(1984,1,1), new DateTime(2049,12,31), new Guid[] { sampleResourceUid });

            CodeSampleUtilities.WriteTablesFormated("Timesheets waiting approval", tsListDs.Tables);

            #endregion
         }
         catch (SoapException ex)
         {
            ExceptionHandlers.HandleSoapException(ex);
         }
         catch (WebException ex)
         {
            ExceptionHandlers.HandleWebException(ex);
         }
         catch (Exception ex)
         {
            ExceptionHandlers.HandleException(ex);
         }
         finally
         {
            ExceptionHandlers.ResetConsole();
         }
      }
   }
   class ExceptionHandlers
   {
      public static void HandleSoapException(SoapException ex)
      {
         PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
         PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
         string errMess = "==============================\r\nError: \r\n";
         for (int i = 0; i &amp;lt; errors.Length; i++)
         {
            errMess += "\n" + ex.Message.ToString() + "\r\n";
            errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
            errMess += errors[i].ErrId.ToString() + "\n";

            for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
            {
               errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": "
                  + errors[i].ErrorAttributes[j];
            }
            errMess += "\r\n".PadRight(30, '=');
         }
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine(errMess);
      }

      public static void HandleWebException(WebException ex)
      {
         string errMess = ex.Message.ToString() +
            "\n\nLog on, or check the Project Server Queuing Service";
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine("Error: " + errMess);
      }

      public static void HandleException(Exception ex)
      {
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine("Error: " + ex.Message);
      }

      public static void ResetConsole()
      {
         Console.ResetColor();
         Console.WriteLine("\r\n\r\nPress any key...");
         Console.ReadKey();
      }
   }
   class CodeSampleUtilities
   {
      // Write all contents of a table collection to the console.
      public static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing.
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // Add a space so that it will not wrap.
            tableWidth += 1;
            // Make the console as wide as the widest table.
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data.
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {

                  dataString = row[i].ToString();
                  // Truncate output, if it is wider than 
                  // the desired column width.
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // Add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // A helper function for WriteTablesToConsole.
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: Might not handle byte[]data types well.
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         // Return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it.
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise, use the max col width.
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // Truncate, if over the maxlength.
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // Always be at least as wide as the colum name.
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
      public static void WriteTablesFormated(string Title, System.Data.DataTableCollection theTables)
      {
         WriteSeparator();
         Console.WriteLine(Title);

         CodeSampleUtilities.WriteTablesToConsole(theTables);

      }
      public static void WriteSeparator()
      {
         Console.ForegroundColor = ConsoleColor.DarkYellow;
         Console.WriteLine("".PadRight(Console.BufferWidth, '='));
         Console.ResetColor();

      }

      // Wait for the job to finish.
      // Outputs job status to the console.
      static public void WaitForQueue(QueueSystemWebSvc.QueueSystem q, Guid jobId)
      {
         QueueSystemWebSvc.JobState jobState;
         const int QUEUE_WAIT_TIME = 1; // One second
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         //Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Console.Write("Waiting on queue. Estimate: {0} seconds.\r\n ", wait);

         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == QueueSystemWebSvc.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == QueueSystemWebSvc.JobState.Unknown
               || jobState == QueueSystemWebSvc.JobState.Failed
               || jobState == QueueSystemWebSvc.JobState.FailedNotBlocking
               || jobState == QueueSystemWebSvc.JobState.CorrelationBlocked
               || jobState == QueueSystemWebSvc.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  //Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                  Console.Write("~");
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
         Console.Write("\r\n");
      }
   }
   class CodeSample_TimeSheetUtilities
   {
      TimeSheetWebSvc.TimeSheet timeSheetSvc;

      public CodeSample_TimeSheetUtilities(TimeSheetWebSvc.TimeSheet theTimeSheetSvc)
      {
         timeSheetSvc = theTimeSheetSvc;
      }
      public Guid CreateEmptyTimeSheetFor(Guid resourceGuid, Guid mgrUid, Guid periodUid)
      {

         TimeSheetWebSvc.TimesheetDataSet timesheetDs = new TimeSheetWebSvc.TimesheetDataSet();
         TimeSheetWebSvc.TimesheetDataSet.HeadersRow headersRow = timesheetDs.Headers.NewHeadersRow();
         headersRow.RES_UID = resourceGuid;
         headersRow.TS_UID = Guid.NewGuid();
         headersRow.WPRD_UID = periodUid;
         headersRow.TS_CREATOR_RES_UID = mgrUid;
         headersRow.TS_NAME = "Timesheet ";
         headersRow.TS_COMMENTS = "Timesheet for code sample";
         headersRow.TS_ENTRY_MODE_ENUM = (byte)PSLibrary.TimesheetEnum.EntryMode.Weekly;
         timesheetDs.Headers.AddHeadersRow(headersRow);

         // Create the timesheet with the default line types that are specified by the admin.
         timeSheetSvc.CreateTimesheet(timesheetDs, TimeSheetWebSvc.PreloadType.None);

         return headersRow.TS_UID;
      }

      public Guid FindFirstEmptyPeriod(Guid resUid, AdminWebSvc.TimePeriodDataSet timePeriodDs)
      {
         TimeSheetWebSvc.TimesheetDataSet timeSheetDs;

         for (int i = 0; i &amp;lt; timePeriodDs.TimePeriods.Count; i++)
         {
            timeSheetDs = timeSheetSvc.ReadTimesheetByPeriod(resUid, timePeriodDs.TimePeriods[i].WPRD_UID, TimeSheetWebSvc.Navigation.Current);
            if (timeSheetDs.Headers.Count == 0)
            {
               return timePeriodDs.TimePeriods[i].WPRD_UID;
            }
         }
         return Guid.Empty;
      }
   }
   class CodeSample_ResourceUtilities
   {

      private ResourceWebSvc.Resource m_resourceSvc;
      private Guid m_MyUid;
      private Guid sampleResource = Guid.Empty;

      public CodeSample_ResourceUtilities(ResourceWebSvc.Resource theResourceSvc)
      {
         m_resourceSvc = theResourceSvc;
         m_MyUid = resourceSvc.GetCurrentUserUid();
      }

      public Guid myUid
      {
         get { return m_MyUid; }
      }

      public ResourceWebSvc.Resource resourceSvc
      {
         get { return m_resourceSvc; }
      }

      public Guid EnsureLertchai()
      {
         return EnsureSampleResource("Lertchai Treetawatchaiwong", "LT");
      }

      public Guid EnsureSampleResource(string name, string inits)
      {
         Guid resGuid = GetResourceGuid(name);
         if (resGuid == Guid.Empty)
         {
            resGuid = this.CreateResource(name, inits, myUid);
         }
         return resGuid;
      }

      public Guid GetResourceGuid(string resourceName)
      {
         ResourceWebSvc.ResourceDataSet resourceDs = new ResourceWebSvc.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, resourceName);
         resourceFilter.Criteria = existingResource;
         resourceDs = resourceSvc.ReadResources(resourceFilter.GetXml(), false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs.Resources[0].RES_UID;
         }
         else
         {
            return Guid.Empty;
         }
      }

      private Guid CreateResource(string resourceName, string initials, Guid timesheetMgr)
      {
         ResourceWebSvc.ResourceDataSet resourceDs = new ResourceWebSvc.ResourceDataSet();
         ResourceWebSvc.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
         resourceRow.RES_UID = Guid.NewGuid();
         resourceRow.RES_NAME = resourceName;
         resourceRow.RES_INITIALS = initials;
         resourceRow.RES_TYPE = (int)PSLibrary.Resource.Type.WorkResource;
         resourceRow.RES_TIMESHEET_MGR_UID = timesheetMgr;
         resourceDs.Resources.AddResourcesRow(resourceRow);
         resourceSvc.CreateResources(resourceDs, false, true);
         return resourceRow.RES_UID;
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadTimesheetsToAdjust">
      <MemberSignature Language="C#" Value="public WebSvcTimeSheet.TimesheetListDataSet ReadTimesheetsToAdjust (DateTime start, DateTime finish, Guid[] resUIDs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSvcTimeSheet.TimesheetListDataSet ReadTimesheetsToAdjust(valuetype System.DateTime start, valuetype System.DateTime finish, valuetype System.Guid[] resUIDs) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.ReadTimesheetsToAdjust(System.DateTime,System.DateTime,System.Guid[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadTimesheetsToAdjust (start As DateTime, finish As DateTime, resUIDs As Guid()) As TimesheetListDataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebSvcTimeSheet::TimesheetListDataSet ^ ReadTimesheetsToAdjust(DateTime start, DateTime finish, cli::array &lt;Guid&gt; ^ resUIDs);" />
      <MemberSignature Language="F#" Value="member this.ReadTimesheetsToAdjust : DateTime * DateTime * Guid[] -&gt; WebSvcTimeSheet.TimesheetListDataSet" Usage="timeSheet.ReadTimesheetsToAdjust (start, finish, resUIDs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/ReadTimesheetsToAdjust", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebSvcTimeSheet.TimesheetListDataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.DateTime" />
        <Parameter Name="finish" Type="System.DateTime" />
        <Parameter Name="resUIDs" Type="System.Guid[]" />
      </Parameters>
      <Docs>
        <param name="start">The starting date and time. Use <b>DateTime.MinValue</b> to include all entries from the beginning. </param>
        <param name="finish">The ending date and time. Use <b>DateTime.MaxValue</b> to include all entries to the end.</param>
        <param name="resUIDs">An array of unique IDs for those resources of interest. Pass a null reference (Nothing in Visual Basic) to return all resources.</param>
        <summary>Reads all timesheets that are pending approval for the specified resources in the specified time range.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This method uses the <see cref="T:WebSvcQueueSystem.QueueSystem" /> object. The <see cref="P:WebSvcQueueSystem.QueueStatusDataSet.StatusRow.CorrelationGUID" /> property for the job is equal to the value of the <see cref="P:WebSvcTimeSheet.TimesheetDataSet.HeadersRow.TS_UID" /> property.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>Non-standard</term>
              <description>Allows the user to obtain timesheets that have the timesheet manager set to the current user.</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>The following code example creates a blank timesheet, adds an administrative line, prepares the line, saves it to the database, and submits it. The example then reads all the timesheets that are available for adjusting and displays them.</para>
          <para>
            <b>Note</b>: You might need to delete old timesheets or create periods if there are no open periods without timesheets for the sample resource.</para>
          <para>For critical information about running this code sample, see Prerequisites for Reference Code Samples.</para>
          <code>using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Data;
using System.Web.Services.Protocols;
using System.Threading;
using PSLibrary = Microsoft.Office.Project.Server.Library;

namespace Microsoft.SDK.Project.Samples.ReadTimesheetsToAdjust
{
   class Program
   {
      [STAThread]
      static void Main()
      {
         try
         {
            #region Setup
            const string PROJECT_SERVER_URI = "http:// &lt;i&gt;ServerName&lt;/i&gt;/&lt;i&gt;ProjectServerName&lt;/i&gt;/"; // &amp;lt;&amp;lt;--Change to be the name of your server running Project Server and the name of your directory.
            const string TIMESHEET_SERVICE_PATH = "_vti_bin/psi/timesheet.asmx";
            const string RESOURCE_SERVICE_PATH = "_vti_bin/psi/resource.asmx";
            const string ADMIN_SERVICE_PATH = "_vti_bin/psi/admin.asmx";
            const string QUEUESYSTEM_SERVICE_PATH = "_vti_bin/psi/queuesystem.asmx";
            TimeSheetWebSvc.TimesheetDataSet timesheetDs;

            // Set up the services.
            TimeSheetWebSvc.TimeSheet timeSheetSvc = new TimeSheetWebSvc.TimeSheet();
            timeSheetSvc.UseDefaultCredentials = true;
            timeSheetSvc.Url = PROJECT_SERVER_URI + TIMESHEET_SERVICE_PATH;
            CodeSample_TimeSheetUtilities timeSheetUtils = new CodeSample_TimeSheetUtilities(timeSheetSvc);

            ResourceWebSvc.Resource resourceSvc = new ResourceWebSvc.Resource();
            resourceSvc.Url = PROJECT_SERVER_URI + RESOURCE_SERVICE_PATH;
            resourceSvc.UseDefaultCredentials = true;
            CodeSample_ResourceUtilities resourceUtils = new CodeSample_ResourceUtilities(resourceSvc);

            AdminWebSvc.Admin adminSvc = new AdminWebSvc.Admin();
            adminSvc.Url = PROJECT_SERVER_URI + ADMIN_SERVICE_PATH;
            adminSvc.UseDefaultCredentials = true;

            QueueSystemWebSvc.QueueSystem q = new QueueSystemWebSvc.QueueSystem();
            q.Url = PROJECT_SERVER_URI + QUEUESYSTEM_SERVICE_PATH;
            q.UseDefaultCredentials = true;

            AdminWebSvc.TimesheetLineClassDataSet tsLineClassDs = adminSvc.ReadLineClasses(AdminWebSvc.LineClassType.AllNonProject, AdminWebSvc.LineClassState.Enabled);

            #endregion
            #region Setup a timesheet with no lines
            Guid sampleResourceUid = resourceUtils.EnsureLertchai();

            AdminWebSvc.TimePeriodDataSet timePeriodDs = adminSvc.ReadPeriods(AdminWebSvc.PeriodState.Open);

            Guid periodUid = timeSheetUtils.FindFirstEmptyPeriod(sampleResourceUid, timePeriodDs);
            Guid timeSheetUid = timeSheetUtils.CreateEmptyTimeSheetFor(sampleResourceUid, resourceUtils.myUid, periodUid);
            timesheetDs = timeSheetSvc.ReadTimesheet(timeSheetUid);
 
            TimeSheetWebSvc.TimesheetDataSet.LinesRow line = timesheetDs.Lines.NewLinesRow();
            line.TS_UID = timeSheetUid;
            line.TS_LINE_UID = Guid.NewGuid();
            line.TS_LINE_CLASS_UID = tsLineClassDs.LineClasses[0].TS_LINE_CLASS_UID;
            line.TS_LINE_COMMENT = "Added by code sample.";
            line.TS_LINE_STATUS = (byte)PSLibrary.TimesheetEnum.LineStatus.NotApplicable;
            line.TS_LINE_VALIDATION_TYPE = (byte)PSLibrary.TimesheetEnum.ValidationType.Unverified;
            line.TS_LINE_CACHED_ASSIGN_NAME = tsLineClassDs.LineClasses[0].TS_LINE_CLASS_DESC;
            timesheetDs.Lines.AddLinesRow(line);

            Console.WriteLine("Prepare the timesheet...");
            timeSheetSvc.PrepareTimesheetLine(timeSheetUid, ref timesheetDs, new Guid[] { line.TS_LINE_UID });

            Console.WriteLine("Save the changes to the database...");
            Guid jobUid = Guid.NewGuid();
            timeSheetSvc.QueueUpdateTimesheet(jobUid, timeSheetUid, timesheetDs);
            CodeSampleUtilities.WaitForQueue(q, jobUid);


            jobUid = Guid.NewGuid();
            timeSheetSvc.QueueSubmitTimesheet(jobUid, timeSheetUid,resourceUtils.myUid, "Approved via code sample");
            CodeSampleUtilities.WaitForQueue(q, jobUid);

            #endregion
            #region Read timesheets available for adjustment
            TimeSheetWebSvc.TimesheetListDataSet tsListDs = timeSheetSvc.ReadTimesheetsToAdjust(new DateTime(1984,1,1), new DateTime(2049,12,31), new Guid[] { sampleResourceUid });

            CodeSampleUtilities.WriteTablesFormated("Timesheets available to adjust", tsListDs.Tables);

            #endregion
         }
         catch (SoapException ex)
         {
            ExceptionHandlers.HandleSoapException(ex);
         }
         catch (WebException ex)
         {
            ExceptionHandlers.HandleWebException(ex);
         }
         catch (Exception ex)
         {
            ExceptionHandlers.HandleException(ex);
         }
         finally
         {
            ExceptionHandlers.ResetConsole();
         }
      }
   }
   class ExceptionHandlers
   {
      public static void HandleSoapException(SoapException ex)
      {
         PSLibrary.PSClientError error = new PSLibrary.PSClientError(ex);
         PSLibrary.PSErrorInfo[] errors = error.GetAllErrors();
         string errMess = "==============================\r\nError: \r\n";
         for (int i = 0; i &amp;lt; errors.Length; i++)
         {
            errMess += "\n" + ex.Message.ToString() + "\r\n";
            errMess += "".PadRight(30, '=') + "\r\nPSCLientError Output:\r\n \r\n";
            errMess += errors[i].ErrId.ToString() + "\n";

            for (int j = 0; j &amp;lt; errors[i].ErrorAttributes.Length; j++)
            {
               errMess += "\r\n\t" + errors[i].ErrorAttributeNames()[j] + ": "
                  + errors[i].ErrorAttributes[j];
            }
            errMess += "\r\n".PadRight(30, '=');
         }
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine(errMess);
      }

      public static void HandleWebException(WebException ex)
      {
         string errMess = ex.Message.ToString() +
            "\n\nLog on, or check the Project Server Queuing Service";
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine("Error: " + errMess);
      }

      public static void HandleException(Exception ex)
      {
         Console.ForegroundColor = ConsoleColor.Red;
         Console.WriteLine("Error: " + ex.Message);
      }

      public static void ResetConsole()
      {
         Console.ResetColor();
         Console.WriteLine("\r\n\r\nPress any key...");
         Console.ReadKey();
      }
   }
   class CodeSampleUtilities
   {
      // Write all contents of a table collection to the console.
      public static void WriteTablesToConsole(System.Data.DataTableCollection theTables)
      {
         Console.ForegroundColor = ConsoleColor.DarkGreen;
         foreach (System.Data.DataTable table in theTables)
         {

            int[] columnWidths = new int[table.Columns.Count];
            int tableWidth = 0;
            string dataString;
            Console.WriteLine("Table: " + table.TableName);

            // Write out the column names and get their spacing.
            StringBuilder tableRow = new StringBuilder();
            for (int i = 0; i &amp;lt; table.Columns.Count; i++)
            {
               columnWidths[i] = GetColumnWidth(table.Columns[i]);
               tableRow.Append(table.Columns[i].ColumnName.PadRight(columnWidths[i]));

               tableWidth += columnWidths[i];
            }
            // Add a space so that it will not wrap.
            tableWidth += 1;
            // Make the console as wide as the widest table.
            Console.BufferWidth = (Console.BufferWidth &amp;gt; tableWidth ? Console.BufferWidth : tableWidth);
            tableRow.Append("\r\n");
            Console.Write(tableRow.ToString());

            // Write out the data.
            foreach (DataRow row in table.Rows)
            {
               tableRow = new StringBuilder();
               for (int i = 0; i &amp;lt; table.Columns.Count; i++)
               {

                  dataString = row[i].ToString();
                  // Truncate output, if it is wider than 
                  // the desired column width.
                  if (dataString.Length &amp;gt;= columnWidths[i])
                  {
                     dataString = dataString.Substring(0, columnWidths[i] - 1);
                  }
                  // Add the output to the stringbuilder and pad right to fill
                  // up to the column width.
                  tableRow.Append(dataString.PadRight(columnWidths[i]));
               }
               tableRow.Append("\r\n");
               Console.Write(tableRow.ToString());
            }
            Console.Write("\r\n".PadLeft(tableWidth, '-'));
         }
         Console.ResetColor();
      }
      // A helper function for WriteTablesToConsole.
      private static int GetColumnWidth(DataColumn column)
      {
         // Note: Might not handle byte[]data types well.
         const int MAX_COL_WIDTH = 40;
         int dataWidth = 0;

         // Return 12 for numbers, 30 for dates, and string width for strings.
         switch (column.DataType.UnderlyingSystemType.ToString())
         {
            case "System.Boolean":
            case "System.Byte":
            case "System.Byte[]":
            case "System.Char":
            case "System.Decimal":
            case "System.Double":
            case "System.Int16":
            case "System.Int32":
            case "System.Int64":
            case "System.SByte":
            case "System.Single":
            case "System.UInt16":
            case "System.UInt32":
            case "System.UInt64":
               dataWidth = 12;
               break;
            case "System.DateTime":
            case "System.TimeSpan":
               dataWidth = 30;
               break;
            case "System.Guid":
               dataWidth = 37;
               break;
            case "System.String":
               // If it has a maxlength, use it.
               if (column.MaxLength &amp;gt; 0)
               {
                  dataWidth = column.MaxLength;
               }
               else
               {
                  // Otherwise, use the max col width.
                  dataWidth = MAX_COL_WIDTH;
               }
               break;
            default:
               dataWidth = column.ColumnName.Length;
               break;
         }
         // Truncate, if over the maxlength.
         if (dataWidth &amp;gt; MAX_COL_WIDTH)
         {
            dataWidth = MAX_COL_WIDTH;
         }
         // Always be at least as wide as the colum name.
         return (column.ColumnName.Length &amp;gt; (dataWidth) ? column.ColumnName.Length + 1 : dataWidth);
      }
      public static void WriteTablesFormated(string Title, System.Data.DataTableCollection theTables)
      {
         WriteSeparator();
         Console.WriteLine(Title);

         CodeSampleUtilities.WriteTablesToConsole(theTables);

      }
      public static void WriteSeparator()
      {
         Console.ForegroundColor = ConsoleColor.DarkYellow;
         Console.WriteLine("".PadRight(Console.BufferWidth, '='));
         Console.ResetColor();

      }

      // Wait for the job to finish.
      // Outputs job status to the console.
      static public void WaitForQueue(QueueSystemWebSvc.QueueSystem q, Guid jobId)
      {
         QueueSystemWebSvc.JobState jobState;
         const int QUEUE_WAIT_TIME = 1; // One second
         bool jobDone = false;
         string xmlError = string.Empty;
         int wait = 0;

         //Wait for the project to get through the queue.
         // Get the estimated wait time in seconds.
         wait = q.GetJobWaitTime(jobId);

         // Wait for it.
         Console.Write("Waiting on queue. Estimate: {0} seconds.\r\n ", wait);

         // Wait until it is finished.

         do
         {
            // Get the job state.
            jobState = q.GetJobCompletionState(jobId, out xmlError);

            if (jobState == QueueSystemWebSvc.JobState.Success)
            {
               jobDone = true;
            }
            else
            {
               if (jobState == QueueSystemWebSvc.JobState.Unknown
               || jobState == QueueSystemWebSvc.JobState.Failed
               || jobState == QueueSystemWebSvc.JobState.FailedNotBlocking
               || jobState == QueueSystemWebSvc.JobState.CorrelationBlocked
               || jobState == QueueSystemWebSvc.JobState.Canceled)
               {
                  // If the job failed, error out.
                  throw (new ApplicationException("Queue request " + jobState + " for Job ID " + jobId + ".\r\n" + xmlError));
               }
               else
               {
                  //Console.WriteLine("Job State: " + jobState + " for Job ID: " + jobId);
                  Console.Write("~");
                  Thread.Sleep(QUEUE_WAIT_TIME * 1000);
               }
            }
         }
         while (!jobDone);
         Console.Write("\r\n");
      }
   }
   class CodeSample_TimeSheetUtilities
   {
      TimeSheetWebSvc.TimeSheet timeSheetSvc;

      public CodeSample_TimeSheetUtilities(TimeSheetWebSvc.TimeSheet theTimeSheetSvc)
      {
         timeSheetSvc = theTimeSheetSvc;
      }
      public Guid CreateEmptyTimeSheetFor(Guid resourceGuid, Guid mgrUid, Guid periodUid)
      {

         TimeSheetWebSvc.TimesheetDataSet timesheetDs = new TimeSheetWebSvc.TimesheetDataSet();
         TimeSheetWebSvc.TimesheetDataSet.HeadersRow headersRow = timesheetDs.Headers.NewHeadersRow();
         headersRow.RES_UID = resourceGuid;
         headersRow.TS_UID = Guid.NewGuid();
         headersRow.WPRD_UID = periodUid;
         headersRow.TS_CREATOR_RES_UID = mgrUid;
         headersRow.TS_NAME = "Timesheet ";
         headersRow.TS_COMMENTS = "Timesheet for code sample";
         headersRow.TS_ENTRY_MODE_ENUM = (byte)PSLibrary.TimesheetEnum.EntryMode.Weekly;
         timesheetDs.Headers.AddHeadersRow(headersRow);

         // Create the timesheet with the default line types that are specified by the admin.
         timeSheetSvc.CreateTimesheet(timesheetDs, TimeSheetWebSvc.PreloadType.None);

         return headersRow.TS_UID;
      }

      public Guid FindFirstEmptyPeriod(Guid resUid, AdminWebSvc.TimePeriodDataSet timePeriodDs)
      {
         TimeSheetWebSvc.TimesheetDataSet timeSheetDs;

         for (int i = 0; i &amp;lt; timePeriodDs.TimePeriods.Count; i++)
         {
            timeSheetDs = timeSheetSvc.ReadTimesheetByPeriod(resUid, timePeriodDs.TimePeriods[i].WPRD_UID, TimeSheetWebSvc.Navigation.Current);
            if (timeSheetDs.Headers.Count == 0)
            {
               return timePeriodDs.TimePeriods[i].WPRD_UID;
            }
         }
         return Guid.Empty;
      }
   }
   class CodeSample_ResourceUtilities
   {

      private ResourceWebSvc.Resource m_resourceSvc;
      private Guid m_MyUid;
      private Guid sampleResource = Guid.Empty;

      public CodeSample_ResourceUtilities(ResourceWebSvc.Resource theResourceSvc)
      {
         m_resourceSvc = theResourceSvc;
         m_MyUid = resourceSvc.GetCurrentUserUid();
      }

      public Guid myUid
      {
         get { return m_MyUid; }
      }

      public ResourceWebSvc.Resource resourceSvc
      {
         get { return m_resourceSvc; }
      }

      public Guid EnsureLertchai()
      {
         return EnsureSampleResource("Lertchai Treetawatchaiwong", "LT");
      }

      public Guid EnsureSampleResource(string name, string inits)
      {
         Guid resGuid = GetResourceGuid(name);
         if (resGuid == Guid.Empty)
         {
            resGuid = this.CreateResource(name, inits, myUid);
         }
         return resGuid;
      }

      public Guid GetResourceGuid(string resourceName)
      {
         ResourceWebSvc.ResourceDataSet resourceDs = new ResourceWebSvc.ResourceDataSet();

         PSLibrary.Filter resourceFilter = new Microsoft.Office.Project.Server.Library.Filter();
         resourceFilter.FilterTableName = resourceDs.Resources.TableName;
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_UIDColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         resourceFilter.Fields.Add(new PSLibrary.Filter.Field(resourceDs.Resources.TableName, resourceDs.Resources.RES_NAMEColumn.ColumnName, PSLibrary.Filter.SortOrderTypeEnum.None));
         PSLibrary.Filter.FieldOperator existingResource = new PSLibrary.Filter.FieldOperator(PSLibrary.Filter.FieldOperationType.Equal, resourceDs.Resources.RES_NAMEColumn.ColumnName, resourceName);
         resourceFilter.Criteria = existingResource;
         resourceDs = resourceSvc.ReadResources(resourceFilter.GetXml(), false);
         if (resourceDs.Resources.Count &amp;gt;= 1)
         {
            return resourceDs.Resources[0].RES_UID;
         }
         else
         {
            return Guid.Empty;
         }
      }

      private Guid CreateResource(string resourceName, string initials, Guid timesheetMgr)
      {
         ResourceWebSvc.ResourceDataSet resourceDs = new ResourceWebSvc.ResourceDataSet();
         ResourceWebSvc.ResourceDataSet.ResourcesRow resourceRow = resourceDs.Resources.NewResourcesRow();
         resourceRow.RES_UID = Guid.NewGuid();
         resourceRow.RES_NAME = resourceName;
         resourceRow.RES_INITIALS = initials;
         resourceRow.RES_TYPE = (int)PSLibrary.Resource.Type.WorkResource;
         resourceRow.RES_TIMESHEET_MGR_UID = timesheetMgr;
         resourceDs.Resources.AddResourcesRow(resourceRow);
         resourceSvc.CreateResources(resourceDs, false, true);
         return resourceRow.RES_UID;
      }
   }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="SubmitTimesheetLines">
      <MemberSignature Language="C#" Value="public void SubmitTimesheetLines (Guid[] timesheetLines, string comment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SubmitTimesheetLines(valuetype System.Guid[] timesheetLines, string comment) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebSvcTimeSheet.TimeSheet.SubmitTimesheetLines(System.Guid[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SubmitTimesheetLines (timesheetLines As Guid(), comment As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SubmitTimesheetLines(cli::array &lt;Guid&gt; ^ timesheetLines, System::String ^ comment);" />
      <MemberSignature Language="F#" Value="member this.SubmitTimesheetLines : Guid[] * string -&gt; unit" Usage="timeSheet.SubmitTimesheetLines (timesheetLines, comment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ProjectServerServices</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.Protocols.SoapDocumentMethod("http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/SubmitTimesheetLines", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, RequestNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", ResponseNamespace="http://schemas.microsoft.com/office/project/server/webservices/TimeSheet/", Use=System.Web.Services.Description.SoapBindingUse.Literal)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timesheetLines" Type="System.Guid[]" />
        <Parameter Name="comment" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="timesheetLines">To be added.</param>
        <param name="comment">To be added.</param>
        <summary>Submits timesheet lines for approval.</summary>
        <remarks>
          <para>This is a new method in Project Server 2010.</para>
          <para>Project Server Permissions</para>
          <list type="table">
            <item>
              <term>Non-standard.</term>
              <description>The current user is the timesheet owner, or must be able to view or create a surrogate timesheet.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>